{"version":3,"file":"component---src-components-voting-admin-page-js-8f38a21c12482e200b60.js","mappings":"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","sources":["webpack://medlem/./src/components/checkin/doorkeeperPanel.js","webpack://medlem/./src/scss/form.module.scss","webpack://medlem/./src/components/form/input.js","webpack://medlem/./src/components/form/form.js","webpack://medlem/./src/components/modal/useConfirmModal.js","webpack://medlem/./src/components/votingAdmin/meetingPanel.js","webpack://medlem/./src/components/votingAdmin/addVote.js","webpack://medlem/./src/components/votingAdmin/voteStats.js","webpack://medlem/./src/components/votingAdmin/votePanel.js","webpack://medlem/./src/components/votingAdmin/attendantPanel.js","webpack://medlem/./src/components/votingAdmin/speakerPanel.js","webpack://medlem/./src/components/votingAdmin/addMeeting.js","webpack://medlem/./src/components/votingAdmin/page.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nimport { FiTrash2 } from 'react-icons/fi'\r\nimport { List, ListItem, ListButton } from '../ui/list'\r\nimport useSWR from 'swr'\r\nimport { post, del } from '../request'\r\n\r\nconst DoorkeeperPanel = ({ event }) => {\r\n  const [input, setInput] = useState('')\r\n\r\n  const { data: doorkeepers, mutate } = useSWR(\r\n    `/checkin/doorkeepers/?event_id=${event.id}`\r\n  )\r\n\r\n  const create = async data => {\r\n    const { data: newDoorkeeper } = await post('/checkin/doorkeepers/', data)\r\n    mutate([...doorkeepers, newDoorkeeper])\r\n    return newDoorkeeper\r\n  }\r\n\r\n  const destroy = async id => {\r\n    await del(`/checkin/doorkeepers/${id}/`)\r\n    mutate(doorkeepers.filter(d => d.id !== id))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Dörrvakter</h2>\r\n      <form\r\n        onSubmit={e => {\r\n          e.preventDefault()\r\n          setInput('')\r\n\r\n          create({\r\n            user_username: input,\r\n            event_id: event.id,\r\n          })\r\n        }}\r\n      >\r\n        <input\r\n          value={input}\r\n          placeholder=\"LiU-ID\"\r\n          onChange={e => setInput(e.target.value)}\r\n        />\r\n      </form>\r\n      <List>\r\n        {doorkeepers &&\r\n          doorkeepers.map(doorkeeper => (\r\n            <ListItem\r\n              title={doorkeeper.user.pretty_name}\r\n              key={doorkeeper.id}\r\n              buttons={[\r\n                <ListButton\r\n                  onClick={() => destroy(doorkeeper.id)}\r\n                  iconComponent={FiTrash2}\r\n                  text=\"Ta bort dörrvakt\"\r\n                  key=\"remove\"\r\n                />,\r\n              ]}\r\n            />\r\n          ))}\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DoorkeeperPanel\r\n","// extracted by mini-css-extract-plugin\nexport var Label = \"form-module--Label--ab587\";\nexport var inputWrapper = \"form-module--inputWrapper--1111e\";\nexport var required = \"form-module--required--7063a\";","import React, { useState, useEffect, useDeferredValue } from 'react'\r\nimport DateTimePicker from './dateTimePicker'\r\n\r\nimport { Label, Required, inputWrapper } from '../../scss/form.module.scss'\r\n\r\nconst AutoInput = ({\r\n  value,\r\n  onChange,\r\n  type,\r\n  label,\r\n  required,\r\n  min_value,\r\n  max_value,\r\n  min_length,\r\n  max_length,\r\n}) => {\r\n\r\n  const [initialOptions, setInitialOptions] = useState([])\r\n\r\n  // Set the initial options based on the first value received\r\n  useEffect(() => {\r\n    if (value) {\r\n      setInitialOptions(value)\r\n    }\r\n  }, []) // Run only once, when the component mounts\r\n\r\n  const change = e => {\r\n    onChange(e.target.value)\r\n  }\r\n  \r\n  const optionElementsCollection = initialOptions?.map((item) => (\r\n    <option key={item.id} value={item.id}>\r\n      {item.name}\r\n    </option>\r\n  ))\r\n\r\n  const map = {\r\n    datetime: <DateTimePicker required={required} value={value} onChange={onChange} />,\r\n    date: <input type=\"date\" required={required} value={value} onChange={change} />,\r\n    boolean: (\r\n      <input\r\n        type=\"checkbox\"\r\n        required={required}\r\n        checked={value}\r\n        onChange={e => {\r\n          onChange(e.target.checked)\r\n        }}\r\n      />\r\n    ),\r\n    integer: (\r\n      <input\r\n        type=\"number\"\r\n        required={required}\r\n        value={value}\r\n        onChange={change}\r\n        max={max_value}\r\n        min={min_value}\r\n      />\r\n    ),\r\n    field: (\r\n      <select\r\n        multiple\r\n        required={required}\r\n        value={value}\r\n        onChange={e =>\r\n          onChange(Array.from(e.target.selectedOptions, option => option.value))\r\n        }\r\n      >\r\n        {optionElementsCollection}\r\n      </select>\r\n    )\r\n  }\r\n\r\n  const component = Object.prototype.hasOwnProperty.call(map, type) ? (\r\n    map[type]\r\n  ) : (\r\n    <input\r\n      value={value}\r\n      onChange={change}\r\n      maxLength={max_length}\r\n      minLength={min_length}\r\n    />\r\n  )\r\n\r\n  return (\r\n    <label className={Label}>\r\n      {`${label}`}\r\n      {required && <span className={Required}>*</span>}\r\n      <div className={inputWrapper}>{component}</div>\r\n    </label>\r\n  )\r\n}\r\nexport default AutoInput\r\n","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport request, { options } from '../request'\r\nimport AutoInput from './input'\r\nimport { Button } from '../ui/buttons'\r\n\r\nconst AutoForm = ({ endpoint, method, customFetcher, onSubmit, defaults }) => {\r\n  const [fields, setFields] = useState()\r\n  const [values, setValues] = useState(defaults)\r\n  const [errors, setErrors] = useState({})\r\n\r\n  const setValue = (field, value) => {\r\n    setValues(old => ({ ...old, [field]: value }))\r\n  }\r\n\r\n  const setError = (field, error) => {\r\n    setErrors(old => ({ ...old, [field]: error }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    // request endpoint info from server\r\n    options(endpoint)\r\n      .then(res => {\r\n        const raw = res.data.actions.POST\r\n\r\n        // object to array\r\n        const arrayified = Object.keys(raw).map(key => ({\r\n          key,\r\n          ...raw[key],\r\n        }))\r\n        const editable = arrayified.filter(f => !f.read_only)\r\n\r\n        setFields(editable)\r\n      })\r\n      .catch(err => {})\r\n  }, endpoint)\r\n\r\n  return (\r\n    <form\r\n      onSubmit={e => {\r\n        e.preventDefault()\r\n        onSubmit()\r\n        if (customFetcher) {\r\n          customFetcher(values).catch(err => {\r\n            if (err.response) {\r\n              setErrors(err.response.data)\r\n            }\r\n          })\r\n        } else {\r\n          request({ endpoint, method, data: values })\r\n        }\r\n      }}\r\n    >\r\n      {fields &&\r\n        fields.map(field => (\r\n          <React.Fragment key={field.key}>\r\n            <AutoInput\r\n              {...field}\r\n              onChange={newValue => {\r\n                setValue(field.key, newValue)\r\n              }}\r\n              value={values[field.key]}\r\n            />\r\n            {Object.prototype.hasOwnProperty.call(errors, field.key) && (\r\n              <div>{errors[field.key].join(', ')}</div>\r\n            )}\r\n          </React.Fragment>\r\n        ))}\r\n      <Button type=\"submit\" onClick={() => {}}>\r\n        Submit\r\n      </Button>\r\n    </form>\r\n  )\r\n}\r\n\r\nAutoForm.defaultProps = {\r\n  method: 'POST',\r\n  customFetcher: null,\r\n  onSubmit: () => {},\r\n  defaults: {},\r\n}\r\n\r\nAutoForm.propTypes = {\r\n  method: PropTypes.string,\r\n  endpoint: PropTypes.string.isRequired,\r\n  customFetcher: PropTypes.func,\r\n  onSubmit: PropTypes.func,\r\n  defaults: PropTypes.object,\r\n}\r\n\r\nexport default AutoForm\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport useModal, { useCloseModal } from './useModal'\r\nimport { Button } from '../ui/buttons'\r\n\r\nimport { confirmation } from '../../scss/modal.module.scss'\r\n\r\nconst Confirmation = ({ text, onAccept, onDecline }) => {\r\n  const close = useCloseModal()\r\n  return (\r\n    <div className={confirmation}>\r\n      <p>{text}</p>\r\n      <Button\r\n        onClick={() => {\r\n          onDecline()\r\n          close()\r\n        }}\r\n      >\r\n        Nej\r\n      </Button>\r\n      <Button\r\n        onClick={() => {\r\n          onAccept()\r\n          close()\r\n        }}\r\n      >\r\n        Ja\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nConfirmation.propTypes = {\r\n  text: PropTypes.string,\r\n  onAccept: PropTypes.func,\r\n  onDecline: PropTypes.func,\r\n}\r\n\r\nConfirmation.defaultProps = {\r\n  text: 'Är du säker?',\r\n  onAccept: () => {},\r\n  onDecline: () => {},\r\n}\r\n\r\nexport default function useConfirmModal() {\r\n  const [openModal, isOpen] = useModal(Confirmation)\r\n\r\n  const open = (text, onAccept, onDecline) => {\r\n    openModal('', { text, onAccept, onDecline })\r\n  }\r\n\r\n  return [open, isOpen]\r\n}\r\n","import React from 'react'\r\nimport { ButtonGroup, Button } from '../ui/buttons'\r\nimport { patch } from '../request'\r\n\r\nconst MeetingPanel = ({ currentMeeting, updatePatch }) => (\r\n  <div>\r\n    <h2>Mötesinfo</h2>\r\n    <h3>{currentMeeting.name}</h3>\r\n    {currentMeeting.description && (\r\n      <p style={{ whiteSpace: 'pre-line' }}>{currentMeeting.description}</p>\r\n    )}\r\n    <h3>Detaljer</h3>\r\n    <ul>\r\n      <li>\r\n        {currentMeeting.enable_speaker_requests\r\n          ? 'Talarlista aktiverad'\r\n          : 'Talarlista inaktiverad'}\r\n      </li>\r\n      <li>\r\n        {currentMeeting.open_attendance\r\n          ? 'Öppen incheckning'\r\n          : 'Stängd incheckning'}\r\n      </li>\r\n      <li>{`Mötesdata rensas: ${currentMeeting.clear_data}`}</li>\r\n    </ul>\r\n    <ButtonGroup>\r\n      <Button\r\n        onClick={() =>\r\n          updatePatch({\r\n            enable_speaker_requests: !currentMeeting.enable_speaker_requests,\r\n          })\r\n        }\r\n      >\r\n        {currentMeeting.enable_speaker_requests\r\n          ? 'Inaktivera talarlista'\r\n          : 'Aktivera talarlista'}\r\n      </Button>\r\n      <Button\r\n        onClick={() =>\r\n          updatePatch({\r\n            open_attendance: !currentMeeting.open_attendance,\r\n          })\r\n        }\r\n      >\r\n        {currentMeeting.open_attendance\r\n          ? 'Stäng självincheckning'\r\n          : 'Öppna självincheckning'}\r\n      </Button>\r\n    </ButtonGroup>\r\n  </div>\r\n)\r\n\r\nexport default MeetingPanel\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nlet currentKey = 0\r\n// creates an alternative with an unique key, do not manually create alternative objects\r\n// the key does not match the id later given by the server.\r\nconst createAlternative = (existingData = {}) => {\r\n  currentKey += 1\r\n  return { text: '', ...existingData, key: currentKey }\r\n}\r\n\r\nconst AddVote = ({ currentMeeting, create, updateData, update }) => {\r\n  const [question, setQuestion] = useState(\r\n    updateData ? updateData.question : ''\r\n  )\r\n  const [alternatives, setAlternatives] = useState(\r\n    updateData\r\n      ? updateData.alternatives.map(alt => createAlternative(alt))\r\n      : [createAlternative({text: 'Vakant'}), createAlternative({text: 'Blankt'})]\r\n  )\r\n  const [currentQuestion, setCurrentQuestion] = useState(\r\n    updateData ? updateData.open : true\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <label>\r\n        Fråga\r\n        <input\r\n          value={question}\r\n          onChange={e => {\r\n            setQuestion(e.target.value)\r\n          }}\r\n        />\r\n      </label>\r\n      <hr />\r\n      <ul>\r\n        {alternatives.map((alt, i) => (\r\n          <li key={alt.key}>\r\n            <input\r\n              value={alt.text}\r\n              onChange={e => {\r\n                const newVal = e.target.value\r\n                setAlternatives(prev => [\r\n                  ...prev.slice(0, i),\r\n                  { ...prev[i], text: newVal },\r\n                  ...prev.slice(i + 1),\r\n                ])\r\n              }}\r\n            />\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setAlternatives(prev => [\r\n                  ...prev.slice(0, i),\r\n                  ...prev.slice(i + 1),\r\n                ])\r\n              }}\r\n            >\r\n              X\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          setAlternatives(prev => [...prev, createAlternative()])\r\n        }}\r\n      >\r\n        Lägg till alternativ\r\n      </button>\r\n      <hr />\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={currentQuestion}\r\n          onChange={() => setCurrentQuestion(prev => !prev)}\r\n        />\r\n        Nuvarande frågan\r\n      </label>\r\n      <hr />\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          if (updateData) {\r\n            update(updateData.id, {\r\n              question,\r\n              open: currentQuestion,\r\n              alternatives,\r\n              meeting: currentMeeting.id,\r\n            })\r\n          } else {\r\n            create({\r\n              question,\r\n              open: currentQuestion,\r\n              alternatives,\r\n              meeting: currentMeeting.id,\r\n            })\r\n          }\r\n        }}\r\n      >\r\n        {updateData ? 'Uppdatera omröstning' : 'Skapa ny omröstning'}\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddVote\r\n","import React, { useRef, useEffect } from 'react'\r\nimport useSWR from 'swr'\r\n\r\nconst VoteStats = ({ currentMeeting, voteId }) => {\r\n  const { data } = useSWR(() => voteId && `/voting/admin-votes/${voteId}/`)\r\n\r\n  const voteSum = (data\r\n    ? data.alternatives.map(alt => alt.num_votes)\r\n    : []\r\n  ).reduce((a, b) => a + b, 0)\r\n\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {data &&\r\n          data.alternatives.map(alt => (\r\n            <li key={alt.text}>\r\n              {`${alt.text}: ${alt.num_votes}`}\r\n              {voteSum\r\n                ? ` (${\r\n                    alt.num_votes\r\n                      ? Math.round((1000 * alt.num_votes) / voteSum) / 10\r\n                      : 0\r\n                  }%)`\r\n                : ''}\r\n            </li>\r\n          ))}\r\n      </ul>\r\n      <p>\r\n        {'Summa: '}\r\n        {voteSum}\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VoteStats\r\n","import React, { useEffect } from 'react'\r\nimport useSWR from 'swr'\r\nimport { FiTrash2, FiBarChart2, FiEdit2 } from 'react-icons/fi'\r\n\r\nimport useModal, { useCloseModal } from '../modal/useModal'\r\nimport useConfirmModal from '../modal/useConfirmModal'\r\nimport AddVote from './addVote'\r\nimport VoteStats from './voteStats'\r\nimport { List, ListItem, ListButton } from '../ui/list'\r\nimport { Button } from '../ui/buttons'\r\nimport { del, post, put } from '../request'\r\n\r\nconst VotePanel = ({ currentMeeting }) => {\r\n  const { data: votes, mutate } = useSWR(\r\n    `/voting/admin-votes/?event_id=${currentMeeting.id}`\r\n  )\r\n\r\n  const create = async data => {\r\n    const { data: newVote } = await post('/voting/admin-votes/', data)\r\n    mutate([...votes, newVote])\r\n    return newVote\r\n  }\r\n\r\n  const update = async (id, data) => {\r\n    const { data: updatedVote } = await put(`/voting/admin-votes/${id}/`, data)\r\n    mutate([...votes.filter(v => v.id !== id), updatedVote])\r\n    return updatedVote\r\n  }\r\n\r\n  const open = async vote => {\r\n    await closeModal()\r\n    openChartModal(`Resultat av \"${vote.question}\"`, {\r\n      voteId: vote.id,\r\n    })\r\n  }\r\n\r\n  const [openCreateModal] = useModal(AddVote)\r\n  const [openChartModal] = useModal(VoteStats)\r\n  const closeModal = useCloseModal()\r\n  const [confirmModal] = useConfirmModal()\r\n\r\n  // Close modal when a vote is created\r\n  useEffect(closeModal, [votes])\r\n\r\n  // if (votes === null) return <></>\r\n\r\n  return (\r\n    <div>\r\n      <h2>Omröstningar</h2>\r\n      <Button\r\n        onClick={() =>\r\n          openCreateModal('Ny omröstning', {\r\n            currentMeeting,\r\n            create,\r\n          })\r\n        }\r\n      >\r\n        Ny omröstning\r\n      </Button>\r\n      <List>\r\n        {votes &&\r\n          votes\r\n            .filter(vote => vote.meeting === currentMeeting.id)\r\n            .map(vote => (\r\n              <ListItem\r\n                title={vote.question}\r\n                subtitle={vote.open ? 'Active' : undefined}\r\n                key={vote.id}\r\n                buttons={[\r\n                  <ListButton\r\n                    onClick={() =>\r\n                      confirmModal(\r\n                        `Vill du ta bort omröstningen?`,\r\n                        async () => {\r\n                          console.log(vote)\r\n                          await del(`/voting/admin-votes/${vote.id}`, {\r\n                            params: {\r\n                              meeting_id: currentMeeting.id,\r\n                              vote_id: vote.id,\r\n                            },\r\n                          })\r\n\r\n                          mutate([])\r\n                        },\r\n                        closeModal\r\n                      )\r\n                    }\r\n                    iconComponent={FiTrash2}\r\n                    text=\"Ta bort\"\r\n                    key=\"remove\"\r\n                  />,\r\n                  <ListButton\r\n                    onClick={() =>\r\n                      confirmModal(\r\n                        `Vill du se resultatet?`,\r\n                        function() {\r\n                          open(vote)\r\n                        },\r\n                        closeModal\r\n                      )\r\n                    }\r\n                    iconComponent={FiBarChart2}\r\n                    text=\"Resultat\"\r\n                    key=\"results\"\r\n                  />,\r\n                  <ListButton\r\n                    onClick={() =>\r\n                      openCreateModal(`Uppdatera \"${vote.question}\"`, {\r\n                        currentMeeting,\r\n                        update,\r\n                        updateData: vote,\r\n                      })\r\n                    }\r\n                    iconComponent={FiEdit2}\r\n                    text=\"Uppdatera omröstning\"\r\n                    key=\"update\"\r\n                  />,\r\n                ]}\r\n              />\r\n            ))}\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VotePanel\r\n","import React, { useState, useEffect } from 'react'\r\nimport { FiTrash2 } from 'react-icons/fi'\r\n\r\nimport { List, ListButton, ListItem } from '../ui/list'\r\nimport { Button, ButtonGroup } from '../ui/buttons'\r\nimport { del, post } from '../request'\r\nimport useConfirmModal from '../modal/useConfirmModal'\r\nimport { useCloseModal } from '../modal/useModal'\r\nimport useSWR from 'swr'\r\n\r\nconst getMemberAttendants = attendants => {\r\n  const memberAttendants = attendants.filter(\r\n    attendant => attendant.has_voting_rights\r\n  )\r\n  return memberAttendants\r\n}\r\n\r\nconst AttendantPanel = ({ currentMeeting }) => {\r\n  const [input, setInput] = useState('')\r\n  const [confirmModal] = useConfirmModal()\r\n  const closeModal = useCloseModal()\r\n\r\n  const { data: attendants, mutate } = useSWR(\r\n    () => `/voting/attendants/?meeting_id=${currentMeeting.id}`,\r\n    { refreshInterval: 4000 }\r\n  )\r\n\r\n  if (attendants === null) return <></>\r\n\r\n  return (\r\n    <div>\r\n      <h2>Deltagare</h2>\r\n      <form\r\n        onSubmit={async e => {\r\n          e.preventDefault()\r\n          setInput('')\r\n          const { data: newAttendant } = await post('/voting/attendants/', {\r\n            user_username: input,\r\n            meeting_id: currentMeeting.id,\r\n            has_voting_rights: true,\r\n          })\r\n          mutate([...attendants, newAttendant])\r\n        }}\r\n      >\r\n        <input\r\n          value={input}\r\n          placeholder=\"LiU-ID\"\r\n          onChange={e => setInput(e.target.value)}\r\n        />\r\n      </form>\r\n      <div>\r\n        <ButtonGroup>\r\n          <p>{`Röstlängd: ${\r\n            attendants ? getMemberAttendants(attendants).length : 0\r\n          }`}</p>\r\n          <Button\r\n            onClick={() =>\r\n              confirmModal(\r\n                `Är du säker på att du vill ta bort alla deltagare?`,\r\n                async () => {\r\n                  await del(\r\n                    `/voting/attendants/clear/?meeting_id=${currentMeeting.id}`\r\n                  )\r\n\r\n                  mutate([])\r\n                },\r\n                closeModal\r\n              )\r\n            }\r\n          >\r\n            Återställ deltagarlista\r\n          </Button>\r\n        </ButtonGroup>\r\n      </div>\r\n      <List>\r\n        {attendants &&\r\n          getMemberAttendants(attendants).map(attendant => (\r\n            <ListItem\r\n              title={attendant.user.pretty_name}\r\n              key={attendant.id}\r\n              buttons={[\r\n                <ListButton\r\n                  onClick={async () => {\r\n                    await del(`/voting/attendants/${attendant.id}`, {\r\n                      meeting_id: currentMeeting.id,\r\n                    })\r\n                    mutate(attendants.filter(x => x.id !== attendant.id))\r\n                  }}\r\n                  iconComponent={FiTrash2}\r\n                  text=\"Ta bort deltagare\"\r\n                  key=\"remove\"\r\n                />,\r\n              ]}\r\n            />\r\n          ))}\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AttendantPanel\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport useSWR from 'swr'\r\n\r\nimport { FiTrash2 } from 'react-icons/fi'\r\nimport { List, ListButton, ListItem } from '../ui/list'\r\nimport { Button } from '../ui/buttons'\r\nimport { UserContext } from '../layout/layout'\r\nimport { post, del } from '../request'\r\n\r\nconst SpeakerPanel = ({ meeting }) => {\r\n  const { data: speakers, mutate } = useSWR(\r\n    () => meeting && `/voting/speakers/?meeting_id=${meeting.id}`,\r\n    { refreshInterval: 4000 }\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <h2>Talarlista</h2>\r\n      <List>\r\n        {speakers &&\r\n          speakers.map(s => (\r\n            <ListItem\r\n              title={s.user.pretty_name}\r\n              subtitle={s.prioritized ? 'Replik' : null}\r\n              key={s.id}\r\n              buttons={[\r\n                <ListButton\r\n                  onClick={async () => {\r\n                    await del(`/voting/speakers/${s.id}`)\r\n                    mutate(speakers.filter(x => x.id !== s.id))\r\n                  }}\r\n                  iconComponent={FiTrash2}\r\n                  text=\"Ta bort från talarlista\"\r\n                  key=\"remove\"\r\n                />,\r\n              ]}\r\n            />\r\n          ))}\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SpeakerPanel\r\n","import React from 'react'\r\nimport AutoForm from '../form/form'\r\n\r\nconst AddMeeting = ({ create }) => (\r\n  <AutoForm\r\n    endpoint=\"/voting/admin-meetings/\" // onSubmit={() => {\r\n    //   setNewMeetingName('')\r\n    // }}\r\n    customFetcher={create}\r\n  />\r\n)\r\n\r\nexport default AddMeeting\r\n","import React, { useState, useEffect } from 'react'\r\nimport useSWR from 'swr'\r\n\r\nimport MeetingPanel from './meetingPanel'\r\nimport DoorkeeperPanel from '../checkin/doorkeeperPanel'\r\nimport VotePanel from './votePanel'\r\nimport AttendantPanel from './attendantPanel'\r\nimport { GridContainer, GridItem } from '../ui/grid'\r\nimport SpeakerPanel from './speakerPanel'\r\nimport TitleChooser from '../ui/titleChooser'\r\nimport AddMeeting from './addMeeting'\r\nimport useModal, { useCloseModal } from '../modal/useModal'\r\nimport { post, patch } from '../request'\r\nimport BigPixels from '../layout/bigPixels'\r\n\r\nconst VotingAdminPage = ({ pageContext: { title } }) => {\r\n  const [currentMeeting, setCurrentMeeting] = useState(null)\r\n  const { data: unorderedMeetings, mutate } = useSWR('/voting/admin-meetings/')\r\n  const [openCreateModal] = useModal(AddMeeting)\r\n  const closeModal = useCloseModal()\r\n\r\n  const create = async data => {\r\n    const { data: newMeeting } = await post('/voting/admin-meetings/', data)\r\n    mutate([...unorderedMeetings, newMeeting])\r\n  }\r\n\r\n  const updatePatch = async data => {\r\n    const { data: updatedMeeting } = await patch(\r\n      `/voting/admin-meetings/${currentMeeting.id}/`,\r\n      data\r\n    )\r\n    mutate([\r\n      ...unorderedMeetings.filter(meeting => meeting.id !== currentMeeting.id),\r\n      updatedMeeting,\r\n    ])\r\n  }\r\n\r\n  const meetings = unorderedMeetings ? [...unorderedMeetings].reverse() : null\r\n\r\n  // sync currentMeeting with updated meetings\r\n  useEffect(() => {\r\n    if (currentMeeting)\r\n      setCurrentMeeting(meetings.find(m => m.id === currentMeeting.id))\r\n  }, [meetings])\r\n\r\n  return (\r\n    <BigPixels>\r\n      <GridContainer>\r\n        <GridItem fullWidth>\r\n          <TitleChooser\r\n            title={title}\r\n            choice={currentMeeting}\r\n            setChoice={setCurrentMeeting}\r\n            choices={meetings}\r\n            label=\"name\"\r\n            action={() => {\r\n              openCreateModal('Nytt möte', {\r\n                create: async data => {\r\n                  await create(data)\r\n                  closeModal()\r\n                },\r\n              })\r\n            }}\r\n            actionLabel=\"Nytt möte\"\r\n            noChoicesLabel=\"Det finns inga möten just nu.\"\r\n          />\r\n        </GridItem>\r\n        {currentMeeting && (\r\n          <>\r\n            <GridItem>\r\n              <MeetingPanel\r\n                currentMeeting={currentMeeting}\r\n                updatePatch={updatePatch}\r\n              />\r\n            </GridItem>\r\n            <GridItem>\r\n              <VotePanel currentMeeting={currentMeeting} />\r\n            </GridItem>\r\n            <GridItem>\r\n              <DoorkeeperPanel event={currentMeeting} />\r\n            </GridItem>\r\n            <GridItem>\r\n              <AttendantPanel currentMeeting={currentMeeting} />\r\n            </GridItem>\r\n            <GridItem>\r\n              <SpeakerPanel meeting={currentMeeting} />\r\n            </GridItem>\r\n          </>\r\n        )}\r\n      </GridContainer>\r\n    </BigPixels>\r\n  )\r\n}\r\n\r\nexport default VotingAdminPage\r\n"],"names":["_ref","event","input","setInput","useState","data","doorkeepers","mutate","useSWR","id","React","onSubmit","e","preventDefault","async","newDoorkeeper","post","concat","_toConsumableArray","create","user_username","event_id","value","placeholder","onChange","target","List","map","doorkeeper","ListItem","title","user","pretty_name","key","buttons","ListButton","onClick","del","filter","d","destroy","iconComponent","FiTrash2","text","Label","inputWrapper","type","label","required","min_value","max_value","min_length","max_length","initialOptions","setInitialOptions","useEffect","change","optionElementsCollection","item","name","datetime","DateTimePicker","date","boolean","checked","integer","max","min","field","multiple","Array","from","selectedOptions","option","component","Object","prototype","hasOwnProperty","call","maxLength","minLength","className","Required","AutoForm","endpoint","method","customFetcher","defaults","fields","setFields","values","setValues","errors","setErrors","options","then","res","raw","actions","POST","editable","keys","f","read_only","catch","err","response","request","AutoInput","assign","newValue","setValue","old","join","Button","defaultProps","Confirmation","onAccept","onDecline","close","useCloseModal","confirmation","useConfirmModal","openModal","isOpen","useModal","open","currentMeeting","updatePatch","description","style","whiteSpace","enable_speaker_requests","open_attendance","clear_data","ButtonGroup","currentKey","createAlternative","existingData","updateData","update","question","setQuestion","alternatives","setAlternatives","alt","currentQuestion","setCurrentQuestion","i","newVal","prev","slice","meeting","voteId","voteSum","num_votes","reduce","a","b","Math","round","votes","newVote","updatedVote","put","v","openCreateModal","AddVote","openChartModal","VoteStats","closeModal","confirmModal","vote","subtitle","undefined","console","log","params","meeting_id","vote_id","FiBarChart2","FiEdit2","getMemberAttendants","attendants","attendant","has_voting_rights","refreshInterval","newAttendant","length","x","speakers","s","prioritized","pageContext","setCurrentMeeting","unorderedMeetings","AddMeeting","meetings","reverse","find","m","BigPixels","GridContainer","GridItem","fullWidth","TitleChooser","choice","setChoice","choices","action","newMeeting","actionLabel","noChoicesLabel","MeetingPanel","updatedMeeting","patch","VotePanel","DoorkeeperPanel","AttendantPanel","SpeakerPanel"],"sourceRoot":""}