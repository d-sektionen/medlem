{"version":3,"file":"component---src-components-voting-admin-page-js-8f38a21c12482e200b60.js","mappings":"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","sources":["webpack://medlem/./src/components/checkin/doorkeeperPanel.js","webpack://medlem/./src/scss/form.module.scss","webpack://medlem/./src/components/form/input.js","webpack://medlem/./src/components/form/form.js","webpack://medlem/./src/components/modal/useConfirmModal.js","webpack://medlem/./src/components/votingAdmin/meetingPanel.js","webpack://medlem/./src/components/votingAdmin/addVote.js","webpack://medlem/./src/components/votingAdmin/voteStats.js","webpack://medlem/./src/components/votingAdmin/votePanel.js","webpack://medlem/./src/components/votingAdmin/attendantPanel.js","webpack://medlem/./src/components/votingAdmin/speakerPanel.js","webpack://medlem/./src/components/votingAdmin/addMeeting.js","webpack://medlem/./src/components/votingAdmin/page.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport { FiTrash2 } from 'react-icons/fi'\nimport { List, ListItem, ListButton } from '../ui/list'\nimport useSWR from 'swr'\nimport { post, del } from '../request'\n\nconst DoorkeeperPanel = ({ event }) => {\n  const [input, setInput] = useState('')\n\n  const { data: doorkeepers, mutate } = useSWR(\n    `/checkin/doorkeepers/?event_id=${event.id}`\n  )\n\n  const create = async data => {\n    const { data: newDoorkeeper } = await post('/checkin/doorkeepers/', data)\n    mutate([...doorkeepers, newDoorkeeper])\n    return newDoorkeeper\n  }\n\n  const destroy = async id => {\n    await del(`/checkin/doorkeepers/${id}/`)\n    mutate(doorkeepers.filter(d => d.id !== id))\n  }\n\n  return (\n    <div>\n      <h2>Dörrvakter</h2>\n      <form\n        onSubmit={e => {\n          e.preventDefault()\n          setInput('')\n\n          create({\n            user_username: input,\n            event_id: event.id,\n          })\n        }}\n      >\n        <input\n          value={input}\n          placeholder=\"LiU-ID\"\n          onChange={e => setInput(e.target.value)}\n        />\n      </form>\n      <List>\n        {doorkeepers &&\n          doorkeepers.map(doorkeeper => (\n            <ListItem\n              title={doorkeeper.user.pretty_name}\n              key={doorkeeper.id}\n              buttons={[\n                <ListButton\n                  onClick={() => destroy(doorkeeper.id)}\n                  iconComponent={FiTrash2}\n                  text=\"Ta bort dörrvakt\"\n                  key=\"remove\"\n                />,\n              ]}\n            />\n          ))}\n      </List>\n    </div>\n  )\n}\n\nexport default DoorkeeperPanel\n","// extracted by mini-css-extract-plugin\nexport var Label = \"form-module--Label--ab587\";\nexport var inputWrapper = \"form-module--inputWrapper--1111e\";\nexport var required = \"form-module--required--7063a\";","import React, { useState, useEffect, useDeferredValue } from 'react'\nimport DateTimePicker from './dateTimePicker'\n\nimport { Label, Required, inputWrapper } from '../../scss/form.module.scss'\n\nconst AutoInput = ({\n  value,\n  onChange,\n  type,\n  label,\n  required,\n  min_value,\n  max_value,\n  min_length,\n  max_length,\n}) => {\n\n  const [initialOptions, setInitialOptions] = useState([])\n\n  // Set the initial options based on the first value received\n  useEffect(() => {\n    if (value) {\n      setInitialOptions(value)\n    }\n  }, []) // Run only once, when the component mounts\n\n  const change = e => {\n    onChange(e.target.value)\n  }\n  \n  const optionElementsCollection = initialOptions?.map((item) => (\n    <option key={item.id} value={item.id}>\n      {item.name}\n    </option>\n  ))\n\n  const map = {\n    datetime: <DateTimePicker required={required} value={value} onChange={onChange} />,\n    date: <input type=\"date\" required={required} value={value} onChange={change} />,\n    boolean: (\n      <input\n        type=\"checkbox\"\n        required={required}\n        checked={value}\n        onChange={e => {\n          onChange(e.target.checked)\n        }}\n      />\n    ),\n    integer: (\n      <input\n        type=\"number\"\n        required={required}\n        value={value}\n        onChange={change}\n        max={max_value}\n        min={min_value}\n      />\n    ),\n    field: (\n      <select\n        multiple\n        required={required}\n        value={value}\n        onChange={e =>\n          onChange(Array.from(e.target.selectedOptions, option => option.value))\n        }\n      >\n        {optionElementsCollection}\n      </select>\n    )\n  }\n\n  const component = Object.prototype.hasOwnProperty.call(map, type) ? (\n    map[type]\n  ) : (\n    <input\n      value={value}\n      onChange={change}\n      maxLength={max_length}\n      minLength={min_length}\n    />\n  )\n\n  return (\n    <label className={Label}>\n      {`${label}`}\n      {required && <span className={Required}>*</span>}\n      <div className={inputWrapper}>{component}</div>\n    </label>\n  )\n}\nexport default AutoInput\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport request, { options } from '../request'\nimport AutoInput from './input'\nimport { Button } from '../ui/buttons'\n\nconst AutoForm = ({ endpoint, method, customFetcher, onSubmit, defaults }) => {\n  const [fields, setFields] = useState()\n  const [values, setValues] = useState(defaults)\n  const [errors, setErrors] = useState({})\n\n  const setValue = (field, value) => {\n    setValues(old => ({ ...old, [field]: value }))\n  }\n\n  const setError = (field, error) => {\n    setErrors(old => ({ ...old, [field]: error }))\n  }\n\n  useEffect(() => {\n    // request endpoint info from server\n    options(endpoint)\n      .then(res => {\n        const raw = res.data.actions.POST\n\n        // object to array\n        const arrayified = Object.keys(raw).map(key => ({\n          key,\n          ...raw[key],\n        }))\n        const editable = arrayified.filter(f => !f.read_only)\n\n        setFields(editable)\n      })\n      .catch(err => {})\n  }, endpoint)\n\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault()\n        onSubmit()\n        if (customFetcher) {\n          customFetcher(values).catch(err => {\n            if (err.response) {\n              setErrors(err.response.data)\n            }\n          })\n        } else {\n          request({ endpoint, method, data: values })\n        }\n      }}\n    >\n      {fields &&\n        fields.map(field => (\n          <React.Fragment key={field.key}>\n            <AutoInput\n              {...field}\n              onChange={newValue => {\n                setValue(field.key, newValue)\n              }}\n              value={values[field.key]}\n            />\n            {Object.prototype.hasOwnProperty.call(errors, field.key) && (\n              <div>{errors[field.key].join(', ')}</div>\n            )}\n          </React.Fragment>\n        ))}\n      <Button type=\"submit\" onClick={() => {}}>\n        Submit\n      </Button>\n    </form>\n  )\n}\n\nAutoForm.defaultProps = {\n  method: 'POST',\n  customFetcher: null,\n  onSubmit: () => {},\n  defaults: {},\n}\n\nAutoForm.propTypes = {\n  method: PropTypes.string,\n  endpoint: PropTypes.string.isRequired,\n  customFetcher: PropTypes.func,\n  onSubmit: PropTypes.func,\n  defaults: PropTypes.object,\n}\n\nexport default AutoForm\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport useModal, { useCloseModal } from './useModal'\nimport { Button } from '../ui/buttons'\n\nimport { confirmation } from '../../scss/modal.module.scss'\n\nconst Confirmation = ({ text, onAccept, onDecline }) => {\n  const close = useCloseModal()\n  return (\n    <div className={confirmation}>\n      <p>{text}</p>\n      <Button\n        onClick={() => {\n          onDecline()\n          close()\n        }}\n      >\n        Nej\n      </Button>\n      <Button\n        onClick={() => {\n          onAccept()\n          close()\n        }}\n      >\n        Ja\n      </Button>\n    </div>\n  )\n}\n\nConfirmation.propTypes = {\n  text: PropTypes.string,\n  onAccept: PropTypes.func,\n  onDecline: PropTypes.func,\n}\n\nConfirmation.defaultProps = {\n  text: 'Är du säker?',\n  onAccept: () => {},\n  onDecline: () => {},\n}\n\nexport default function useConfirmModal() {\n  const [openModal, isOpen] = useModal(Confirmation)\n\n  const open = (text, onAccept, onDecline) => {\n    openModal('', { text, onAccept, onDecline })\n  }\n\n  return [open, isOpen]\n}\n","import React from 'react'\nimport { ButtonGroup, Button } from '../ui/buttons'\nimport { patch } from '../request'\n\nconst MeetingPanel = ({ currentMeeting, updatePatch }) => (\n  <div>\n    <h2>Mötesinfo</h2>\n    <h3>{currentMeeting.name}</h3>\n    {currentMeeting.description && (\n      <p style={{ whiteSpace: 'pre-line' }}>{currentMeeting.description}</p>\n    )}\n    <h3>Detaljer</h3>\n    <ul>\n      <li>\n        {currentMeeting.enable_speaker_requests\n          ? 'Talarlista aktiverad'\n          : 'Talarlista inaktiverad'}\n      </li>\n      <li>\n        {currentMeeting.open_attendance\n          ? 'Öppen incheckning'\n          : 'Stängd incheckning'}\n      </li>\n      <li>{`Mötesdata rensas: ${currentMeeting.clear_data}`}</li>\n    </ul>\n    <ButtonGroup>\n      <Button\n        onClick={() =>\n          updatePatch({\n            enable_speaker_requests: !currentMeeting.enable_speaker_requests,\n          })\n        }\n      >\n        {currentMeeting.enable_speaker_requests\n          ? 'Inaktivera talarlista'\n          : 'Aktivera talarlista'}\n      </Button>\n      <Button\n        onClick={() =>\n          updatePatch({\n            open_attendance: !currentMeeting.open_attendance,\n          })\n        }\n      >\n        {currentMeeting.open_attendance\n          ? 'Stäng självincheckning'\n          : 'Öppna självincheckning'}\n      </Button>\n    </ButtonGroup>\n  </div>\n)\n\nexport default MeetingPanel\n","import React, { useState, useEffect } from 'react'\n\nlet currentKey = 0\n// creates an alternative with an unique key, do not manually create alternative objects\n// the key does not match the id later given by the server.\nconst createAlternative = (existingData = {}) => {\n  currentKey += 1\n  return { text: '', ...existingData, key: currentKey }\n}\n\nconst AddVote = ({ currentMeeting, create, updateData, update }) => {\n  const [question, setQuestion] = useState(\n    updateData ? updateData.question : ''\n  )\n  const [alternatives, setAlternatives] = useState(\n    updateData\n      ? updateData.alternatives.map(alt => createAlternative(alt))\n      : [createAlternative({text: 'Vakant'}), createAlternative({text: 'Blankt'})]\n  )\n  const [currentQuestion, setCurrentQuestion] = useState(\n    updateData ? updateData.open : true\n  )\n\n  return (\n    <div>\n      <label>\n        Fråga\n        <input\n          value={question}\n          onChange={e => {\n            setQuestion(e.target.value)\n          }}\n        />\n      </label>\n      <hr />\n      <ul>\n        {alternatives.map((alt, i) => (\n          <li key={alt.key}>\n            <input\n              value={alt.text}\n              onChange={e => {\n                const newVal = e.target.value\n                setAlternatives(prev => [\n                  ...prev.slice(0, i),\n                  { ...prev[i], text: newVal },\n                  ...prev.slice(i + 1),\n                ])\n              }}\n            />\n            <button\n              type=\"button\"\n              onClick={() => {\n                setAlternatives(prev => [\n                  ...prev.slice(0, i),\n                  ...prev.slice(i + 1),\n                ])\n              }}\n            >\n              X\n            </button>\n          </li>\n        ))}\n      </ul>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setAlternatives(prev => [...prev, createAlternative()])\n        }}\n      >\n        Lägg till alternativ\n      </button>\n      <hr />\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={currentQuestion}\n          onChange={() => setCurrentQuestion(prev => !prev)}\n        />\n        Nuvarande frågan\n      </label>\n      <hr />\n      <button\n        type=\"button\"\n        onClick={() => {\n          if (updateData) {\n            update(updateData.id, {\n              question,\n              open: currentQuestion,\n              alternatives,\n              meeting: currentMeeting.id,\n            })\n          } else {\n            create({\n              question,\n              open: currentQuestion,\n              alternatives,\n              meeting: currentMeeting.id,\n            })\n          }\n        }}\n      >\n        {updateData ? 'Uppdatera omröstning' : 'Skapa ny omröstning'}\n      </button>\n    </div>\n  )\n}\n\nexport default AddVote\n","import React, { useRef, useEffect } from 'react'\nimport useSWR from 'swr'\n\nconst VoteStats = ({ currentMeeting, voteId }) => {\n  const { data } = useSWR(() => voteId && `/voting/admin-votes/${voteId}/`)\n\n  const voteSum = (data\n    ? data.alternatives.map(alt => alt.num_votes)\n    : []\n  ).reduce((a, b) => a + b, 0)\n\n  return (\n    <div>\n      <ul>\n        {data &&\n          data.alternatives.map(alt => (\n            <li key={alt.text}>\n              {`${alt.text}: ${alt.num_votes}`}\n              {voteSum\n                ? ` (${\n                    alt.num_votes\n                      ? Math.round((1000 * alt.num_votes) / voteSum) / 10\n                      : 0\n                  }%)`\n                : ''}\n            </li>\n          ))}\n      </ul>\n      <p>\n        {'Summa: '}\n        {voteSum}\n      </p>\n    </div>\n  )\n}\n\nexport default VoteStats\n","import React, { useEffect } from 'react'\nimport useSWR from 'swr'\nimport { FiTrash2, FiBarChart2, FiEdit2 } from 'react-icons/fi'\n\nimport useModal, { useCloseModal } from '../modal/useModal'\nimport useConfirmModal from '../modal/useConfirmModal'\nimport AddVote from './addVote'\nimport VoteStats from './voteStats'\nimport { List, ListItem, ListButton } from '../ui/list'\nimport { Button } from '../ui/buttons'\nimport { del, post, put } from '../request'\n\nconst VotePanel = ({ currentMeeting }) => {\n  const { data: votes, mutate } = useSWR(\n    `/voting/admin-votes/?event_id=${currentMeeting.id}`\n  )\n\n  const create = async data => {\n    const { data: newVote } = await post('/voting/admin-votes/', data)\n    mutate([...votes, newVote])\n    return newVote\n  }\n\n  const update = async (id, data) => {\n    const { data: updatedVote } = await put(`/voting/admin-votes/${id}/`, data)\n    mutate([...votes.filter(v => v.id !== id), updatedVote])\n    return updatedVote\n  }\n\n  const open = async vote => {\n    await closeModal()\n    openChartModal(`Resultat av \"${vote.question}\"`, {\n      voteId: vote.id,\n    })\n  }\n\n  const [openCreateModal] = useModal(AddVote)\n  const [openChartModal] = useModal(VoteStats)\n  const closeModal = useCloseModal()\n  const [confirmModal] = useConfirmModal()\n\n  // Close modal when a vote is created\n  useEffect(closeModal, [votes])\n\n  // if (votes === null) return <></>\n\n  return (\n    <div>\n      <h2>Omröstningar</h2>\n      <Button\n        onClick={() =>\n          openCreateModal('Ny omröstning', {\n            currentMeeting,\n            create,\n          })\n        }\n      >\n        Ny omröstning\n      </Button>\n      <List>\n        {votes &&\n          votes\n            .filter(vote => vote.meeting === currentMeeting.id)\n            .map(vote => (\n              <ListItem\n                title={vote.question}\n                subtitle={vote.open ? 'Active' : undefined}\n                key={vote.id}\n                buttons={[\n                  <ListButton\n                    onClick={() =>\n                      confirmModal(\n                        `Vill du ta bort omröstningen?`,\n                        async () => {\n                          console.log(vote)\n                          await del(`/voting/admin-votes/${vote.id}`, {\n                            params: {\n                              meeting_id: currentMeeting.id,\n                              vote_id: vote.id,\n                            },\n                          })\n\n                          mutate([])\n                        },\n                        closeModal\n                      )\n                    }\n                    iconComponent={FiTrash2}\n                    text=\"Ta bort\"\n                    key=\"remove\"\n                  />,\n                  <ListButton\n                    onClick={() =>\n                      confirmModal(\n                        `Vill du se resultatet?`,\n                        function() {\n                          open(vote)\n                        },\n                        closeModal\n                      )\n                    }\n                    iconComponent={FiBarChart2}\n                    text=\"Resultat\"\n                    key=\"results\"\n                  />,\n                  <ListButton\n                    onClick={() =>\n                      openCreateModal(`Uppdatera \"${vote.question}\"`, {\n                        currentMeeting,\n                        update,\n                        updateData: vote,\n                      })\n                    }\n                    iconComponent={FiEdit2}\n                    text=\"Uppdatera omröstning\"\n                    key=\"update\"\n                  />,\n                ]}\n              />\n            ))}\n      </List>\n    </div>\n  )\n}\n\nexport default VotePanel\n","import React, { useState, useEffect } from 'react'\nimport { FiTrash2 } from 'react-icons/fi'\n\nimport { List, ListButton, ListItem } from '../ui/list'\nimport { Button, ButtonGroup } from '../ui/buttons'\nimport { del, post } from '../request'\nimport useConfirmModal from '../modal/useConfirmModal'\nimport { useCloseModal } from '../modal/useModal'\nimport useSWR from 'swr'\n\nconst getMemberAttendants = attendants => {\n  const memberAttendants = attendants.filter(\n    attendant => attendant.has_voting_rights\n  )\n  return memberAttendants\n}\n\nconst AttendantPanel = ({ currentMeeting }) => {\n  const [input, setInput] = useState('')\n  const [confirmModal] = useConfirmModal()\n  const closeModal = useCloseModal()\n\n  const { data: attendants, mutate } = useSWR(\n    () => `/voting/attendants/?meeting_id=${currentMeeting.id}`,\n    { refreshInterval: 4000 }\n  )\n\n  if (attendants === null) return <></>\n\n  return (\n    <div>\n      <h2>Deltagare</h2>\n      <form\n        onSubmit={async e => {\n          e.preventDefault()\n          setInput('')\n          const { data: newAttendant } = await post('/voting/attendants/', {\n            user_username: input,\n            meeting_id: currentMeeting.id,\n            has_voting_rights: true,\n          })\n          mutate([...attendants, newAttendant])\n        }}\n      >\n        <input\n          value={input}\n          placeholder=\"LiU-ID\"\n          onChange={e => setInput(e.target.value)}\n        />\n      </form>\n      <div>\n        <ButtonGroup>\n          <p>{`Röstlängd: ${\n            attendants ? getMemberAttendants(attendants).length : 0\n          }`}</p>\n          <Button\n            onClick={() =>\n              confirmModal(\n                `Är du säker på att du vill ta bort alla deltagare?`,\n                async () => {\n                  await del(\n                    `/voting/attendants/clear/?meeting_id=${currentMeeting.id}`\n                  )\n\n                  mutate([])\n                },\n                closeModal\n              )\n            }\n          >\n            Återställ deltagarlista\n          </Button>\n        </ButtonGroup>\n      </div>\n      <List>\n        {attendants &&\n          getMemberAttendants(attendants).map(attendant => (\n            <ListItem\n              title={attendant.user.pretty_name}\n              key={attendant.id}\n              buttons={[\n                <ListButton\n                  onClick={async () => {\n                    await del(`/voting/attendants/${attendant.id}`, {\n                      meeting_id: currentMeeting.id,\n                    })\n                    mutate(attendants.filter(x => x.id !== attendant.id))\n                  }}\n                  iconComponent={FiTrash2}\n                  text=\"Ta bort deltagare\"\n                  key=\"remove\"\n                />,\n              ]}\n            />\n          ))}\n      </List>\n    </div>\n  )\n}\n\nexport default AttendantPanel\n","import React, { useState, useEffect, useContext } from 'react'\nimport useSWR from 'swr'\n\nimport { FiTrash2 } from 'react-icons/fi'\nimport { List, ListButton, ListItem } from '../ui/list'\nimport { Button } from '../ui/buttons'\nimport { UserContext } from '../layout/layout'\nimport { post, del } from '../request'\n\nconst SpeakerPanel = ({ meeting }) => {\n  const { data: speakers, mutate } = useSWR(\n    () => meeting && `/voting/speakers/?meeting_id=${meeting.id}`,\n    { refreshInterval: 4000 }\n  )\n\n  return (\n    <div>\n      <h2>Talarlista</h2>\n      <List>\n        {speakers &&\n          speakers.map(s => (\n            <ListItem\n              title={s.user.pretty_name}\n              subtitle={s.prioritized ? 'Replik' : null}\n              key={s.id}\n              buttons={[\n                <ListButton\n                  onClick={async () => {\n                    await del(`/voting/speakers/${s.id}`)\n                    mutate(speakers.filter(x => x.id !== s.id))\n                  }}\n                  iconComponent={FiTrash2}\n                  text=\"Ta bort från talarlista\"\n                  key=\"remove\"\n                />,\n              ]}\n            />\n          ))}\n      </List>\n    </div>\n  )\n}\n\nexport default SpeakerPanel\n","import React from 'react'\nimport AutoForm from '../form/form'\n\nconst AddMeeting = ({ create }) => (\n  <AutoForm\n    endpoint=\"/voting/admin-meetings/\" // onSubmit={() => {\n    //   setNewMeetingName('')\n    // }}\n    customFetcher={create}\n  />\n)\n\nexport default AddMeeting\n","import React, { useState, useEffect } from 'react'\nimport useSWR from 'swr'\n\nimport MeetingPanel from './meetingPanel'\nimport DoorkeeperPanel from '../checkin/doorkeeperPanel'\nimport VotePanel from './votePanel'\nimport AttendantPanel from './attendantPanel'\nimport { GridContainer, GridItem } from '../ui/grid'\nimport SpeakerPanel from './speakerPanel'\nimport TitleChooser from '../ui/titleChooser'\nimport AddMeeting from './addMeeting'\nimport useModal, { useCloseModal } from '../modal/useModal'\nimport { post, patch } from '../request'\nimport BigPixels from '../layout/bigPixels'\n\nconst VotingAdminPage = ({ pageContext: { title } }) => {\n  const [currentMeeting, setCurrentMeeting] = useState(null)\n  const { data: unorderedMeetings, mutate } = useSWR('/voting/admin-meetings/')\n  const [openCreateModal] = useModal(AddMeeting)\n  const closeModal = useCloseModal()\n\n  const create = async data => {\n    const { data: newMeeting } = await post('/voting/admin-meetings/', data)\n    mutate([...unorderedMeetings, newMeeting])\n  }\n\n  const updatePatch = async data => {\n    const { data: updatedMeeting } = await patch(\n      `/voting/admin-meetings/${currentMeeting.id}/`,\n      data\n    )\n    mutate([\n      ...unorderedMeetings.filter(meeting => meeting.id !== currentMeeting.id),\n      updatedMeeting,\n    ])\n  }\n\n  const meetings = unorderedMeetings ? [...unorderedMeetings].reverse() : null\n\n  // sync currentMeeting with updated meetings\n  useEffect(() => {\n    if (currentMeeting)\n      setCurrentMeeting(meetings.find(m => m.id === currentMeeting.id))\n  }, [meetings])\n\n  return (\n    <BigPixels>\n      <GridContainer>\n        <GridItem fullWidth>\n          <TitleChooser\n            title={title}\n            choice={currentMeeting}\n            setChoice={setCurrentMeeting}\n            choices={meetings}\n            label=\"name\"\n            action={() => {\n              openCreateModal('Nytt möte', {\n                create: async data => {\n                  await create(data)\n                  closeModal()\n                },\n              })\n            }}\n            actionLabel=\"Nytt möte\"\n            noChoicesLabel=\"Det finns inga möten just nu.\"\n          />\n        </GridItem>\n        {currentMeeting && (\n          <>\n            <GridItem>\n              <MeetingPanel\n                currentMeeting={currentMeeting}\n                updatePatch={updatePatch}\n              />\n            </GridItem>\n            <GridItem>\n              <VotePanel currentMeeting={currentMeeting} />\n            </GridItem>\n            <GridItem>\n              <DoorkeeperPanel event={currentMeeting} />\n            </GridItem>\n            <GridItem>\n              <AttendantPanel currentMeeting={currentMeeting} />\n            </GridItem>\n            <GridItem>\n              <SpeakerPanel meeting={currentMeeting} />\n            </GridItem>\n          </>\n        )}\n      </GridContainer>\n    </BigPixels>\n  )\n}\n\nexport default VotingAdminPage\n"],"names":["_ref","event","input","setInput","useState","data","doorkeepers","mutate","useSWR","id","React","onSubmit","e","preventDefault","async","newDoorkeeper","post","concat","_toConsumableArray","create","user_username","event_id","value","placeholder","onChange","target","List","map","doorkeeper","ListItem","title","user","pretty_name","key","buttons","ListButton","onClick","del","filter","d","destroy","iconComponent","FiTrash2","text","Label","inputWrapper","type","label","required","min_value","max_value","min_length","max_length","initialOptions","setInitialOptions","useEffect","change","optionElementsCollection","item","name","datetime","DateTimePicker","date","boolean","checked","integer","max","min","field","multiple","Array","from","selectedOptions","option","component","Object","prototype","hasOwnProperty","call","maxLength","minLength","className","Required","AutoForm","endpoint","method","customFetcher","defaults","fields","setFields","values","setValues","errors","setErrors","options","then","res","raw","actions","POST","editable","keys","f","read_only","catch","err","response","request","AutoInput","assign","newValue","setValue","old","join","Button","defaultProps","Confirmation","onAccept","onDecline","close","useCloseModal","confirmation","useConfirmModal","openModal","isOpen","useModal","open","currentMeeting","updatePatch","description","style","whiteSpace","enable_speaker_requests","open_attendance","clear_data","ButtonGroup","currentKey","createAlternative","existingData","updateData","update","question","setQuestion","alternatives","setAlternatives","alt","currentQuestion","setCurrentQuestion","i","newVal","prev","slice","meeting","voteId","voteSum","num_votes","reduce","a","b","Math","round","votes","newVote","updatedVote","put","v","openCreateModal","AddVote","openChartModal","VoteStats","closeModal","confirmModal","vote","subtitle","undefined","console","log","params","meeting_id","vote_id","FiBarChart2","FiEdit2","getMemberAttendants","attendants","attendant","has_voting_rights","refreshInterval","newAttendant","length","x","speakers","s","prioritized","pageContext","setCurrentMeeting","unorderedMeetings","AddMeeting","meetings","reverse","find","m","BigPixels","GridContainer","GridItem","fullWidth","TitleChooser","choice","setChoice","choices","action","newMeeting","actionLabel","noChoicesLabel","MeetingPanel","updatedMeeting","patch","VotePanel","DoorkeeperPanel","AttendantPanel","SpeakerPanel"],"sourceRoot":""}