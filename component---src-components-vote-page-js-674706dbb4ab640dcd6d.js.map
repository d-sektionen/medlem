{"version":3,"sources":["webpack:///./src/components/ui/titleChooser.js","webpack:///./src/components/ui/list.js","webpack:///./src/components/vote/speakerPanel.js","webpack:///./src/components/vote/meetingInfoPanel.js","webpack:///./src/components/vote/voteForm.js","webpack:///./src/components/vote/votePanel.js","webpack:///./src/components/vote/page.js"],"names":["TitleChooser","title","choices","categorizedChoices","choice","setChoice","label","action","actionLabel","noChoicesLabel","allChoices","Object","keys","reduce","accumulator","category","className","style","titleChooser","actions","length","selectContainer","onChange","e","selectedValue","target","value","c","filter","i","id","hidden","sort","map","key","hint","onClick","defaultProps","List","children","list","ListItem","subtitle","buttons","color","listItemColor","borderColor","listText","listButtons","ListButton","href","iconComponent","Icon","text","shown","listButton","type","SpeakerPanel","meeting","data","speakers","mutate","useSWR","user","useContext","UserContext","errorMessage","attending","enable_speaker_requests","async","newSpeaker","post","meeting_id","prioritized","s","pretty_name","prioQS","del","x","FiTrash2","MeetingInfoPanel","currentMeeting","revalidate","name","description","whiteSpace","open_attendance","VoteForm","vote","checkedId","setCheckedId","useState","successfullyVoted","setSuccessfullyVoted","votingDisabled","buttonText","alreadyVotedText","question","has_voted","alternatives","checked","disabled","voteData","vote_id","alternative_id","VotePanel","votes","error","useEffect","VotePage","pageContext","setCurrentMeeting","meetings","find","m","fullWidth"],"mappings":"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","file":"component---src-components-vote-page-js-674706dbb4ab640dcd6d.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport style from '../../scss/ui.module.scss'\r\nimport { Button } from './buttons'\r\n\r\nconst TitleChooser = ({\r\n  title,\r\n  choices,\r\n  categorizedChoices,\r\n  choice,\r\n  setChoice,\r\n  label,\r\n  action,\r\n  actionLabel,\r\n  noChoicesLabel,\r\n}) => {\r\n  const allChoices = [\r\n    ...(choices || []),\r\n    // merge all categorized choices to single array.\r\n    ...Object.keys(categorizedChoices).reduce(\r\n      (accumulator, category) => [\r\n        ...accumulator,\r\n        ...categorizedChoices[category],\r\n      ],\r\n      []\r\n    ),\r\n  ]\r\n  return (\r\n    <div className={style.titleChooser}>\r\n      <h1>{title}</h1>\r\n      <div className={style.actions}>\r\n        {allChoices.length ? (\r\n          <div className={style.selectContainer}>\r\n            <select\r\n              onChange={e => {\r\n                const selectedValue = e.target.value\r\n                const c =\r\n                  selectedValue === ''\r\n                    ? null\r\n                    : allChoices.filter(i => `${i.id}` === selectedValue)[0]\r\n                setChoice(c)\r\n              }}\r\n              value={choice ? choice.id : ''}\r\n            >\r\n              <option hidden value=\"\" />\r\n              {choices.sort().map(c => (\r\n                <option value={c.id} key={c.id}>\r\n                  {c[label]}\r\n                </option>\r\n              ))}\r\n              {Object.keys(categorizedChoices)\r\n                .sort()\r\n                .map(key => (\r\n                  <optgroup label={key} key={key}>\r\n                    {categorizedChoices[key].sort().map(c => (\r\n                      <option value={c.id} key={c.id}>\r\n                        {c[label]}\r\n                      </option>\r\n                    ))}\r\n                  </optgroup>\r\n                ))}\r\n            </select>\r\n            {choice === null && (\r\n              <div className={style.hint}>VÃ¤lj ett objekt</div>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <span>{noChoicesLabel}</span>\r\n        )}\r\n\r\n        {action && <Button onClick={action}>{actionLabel}</Button>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nTitleChooser.defaultProps = {\r\n  categorizedChoices: {},\r\n  choices: [],\r\n  action: null,\r\n  actionLabel: '',\r\n  choice: null,\r\n  noChoicesLabel: '',\r\n  setChoice: () => {},\r\n  label: '',\r\n}\r\n\r\nTitleChooser.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  choices: PropTypes.array,\r\n  categorizedChoices: PropTypes.object,\r\n  choice: PropTypes.object,\r\n  setChoice: PropTypes.func,\r\n  label: PropTypes.string,\r\n  action: PropTypes.func,\r\n  actionLabel: PropTypes.string,\r\n  noChoicesLabel: PropTypes.string,\r\n}\r\n\r\nexport default TitleChooser\r\n","import React from 'react'\r\n\r\nimport style from '../../scss/ui.module.scss'\r\n\r\nconst List = ({ children }) => <ul className={style.list}>{children}</ul>\r\n\r\nconst ListItem = ({ title, subtitle, buttons, color }) => (\r\n  <li\r\n    className={color ? style.listItemColor : ''}\r\n    style={{ borderColor: color }}\r\n  >\r\n    <div className={style.listText}>\r\n      <h3>{title}</h3>\r\n      <p>{subtitle}</p>\r\n    </div>\r\n    <div className={style.listButtons}>{buttons}</div>\r\n  </li>\r\n)\r\n\r\nListItem.defaultProps = {\r\n  color: null,\r\n}\r\n\r\nconst ListButton = ({ href, onClick, iconComponent: Icon, text, shown }) =>\r\n  shown ? (\r\n    <>\r\n      {href ? (\r\n        <a\r\n          className={style.listButton}\r\n          href={href}\r\n          onClick={onClick}\r\n          title={text}\r\n        >\r\n          <Icon />\r\n        </a>\r\n      ) : (\r\n        <button\r\n          className={style.listButton}\r\n          type=\"button\"\r\n          onClick={onClick}\r\n          title={text}\r\n        >\r\n          <Icon />\r\n        </button>\r\n      )}\r\n    </>\r\n  ) : (\r\n    <></>\r\n  )\r\n\r\nListButton.defaultProps = {\r\n  shown: true,\r\n}\r\n\r\nexport { List, ListItem, ListButton }\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport useSWR from 'swr'\r\n\r\nimport { FiTrash2 } from 'react-icons/fi'\r\nimport { List, ListButton, ListItem } from '../ui/list'\r\nimport { Button, ButtonGroup } from '../ui/buttons'\r\nimport { UserContext } from '../layout/layout'\r\nimport { post, del } from '../request'\r\n\r\nconst SpeakerPanel = ({ meeting }) => {\r\n  const { data: speakers, mutate } = useSWR(\r\n    () => meeting && `/voting/speakers/?meeting_id=${meeting.id}`\r\n  )\r\n\r\n  const [user] = useContext(UserContext)\r\n\r\n  const errorMessage = meeting.attending\r\n    ? 'Talarlista Ã¤r inaktiverad fÃ¶r mÃ¶tet.'\r\n    : 'Du mÃ¥ste vara registrerad pÃ¥ mÃ¶tet fÃ¶r att kunna skriva upp dig pÃ¥ talarlistan.'\r\n\r\n  return (\r\n    <div>\r\n      <h2>Talarlista</h2>\r\n      {meeting.attending && meeting.enable_speaker_requests ? (\r\n        <ButtonGroup>\r\n          <Button\r\n            onClick={async () => {\r\n              const { data: newSpeaker } = await post('/voting/speakers/', {\r\n                meeting_id: meeting.id,\r\n              })\r\n              mutate([...speakers, newSpeaker])\r\n            }}\r\n          >\r\n            Jag vill tala!\r\n          </Button>\r\n          <Button\r\n            onClick={async () => {\r\n              const { data: newSpeaker } = await post('/voting/speakers/', {\r\n                meeting_id: meeting.id,\r\n                prioritized: true,\r\n              })\r\n              mutate([...speakers, newSpeaker])\r\n            }}\r\n          >\r\n            Replik!\r\n          </Button>\r\n        </ButtonGroup>\r\n      ) : (\r\n        <p>{errorMessage}</p>\r\n      )}\r\n      <List>\r\n        {speakers &&\r\n          speakers.map(s => (\r\n            <ListItem\r\n              title={s.user.pretty_name}\r\n              subtitle={s.prioritized ? 'Replik' : null}\r\n              key={s.id}\r\n              buttons={[\r\n                <ListButton\r\n                  shown={user.id === s.user.id}\r\n                  onClick={async () => {\r\n                    const prioQS = s.prioritized ? '&prioritized' : ''\r\n                    await del(\r\n                      `/voting/speakers/?meeting_id=${meeting.id}${prioQS}`\r\n                    )\r\n                    mutate(speakers.filter(x => x.id !== s.id))\r\n                  }}\r\n                  iconComponent={FiTrash2}\r\n                  text=\"LÃ¤mna talarlista\"\r\n                  key=\"remove\"\r\n                />,\r\n              ]}\r\n            />\r\n          ))}\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SpeakerPanel\r\n","import React from 'react'\r\nimport { Button } from '../ui/buttons'\r\nimport { post, del } from '../request'\r\n\r\nconst MeetingInfoPanel = ({ currentMeeting, revalidate }) => (\r\n  <div>\r\n    <h2>MÃ¶tesinfo</h2>\r\n    <h3>{currentMeeting.name}</h3>\r\n    <p>\r\n      <strong>\r\n        {currentMeeting.attending\r\n          ? 'Du deltar pÃ¥ mÃ¶tet.'\r\n          : 'Du Ã¤r inte registrerad pÃ¥ mÃ¶tet.'}\r\n      </strong>\r\n    </p>\r\n    {currentMeeting.description && (\r\n      <p style={{ whiteSpace: 'pre-line' }}>{currentMeeting.description}</p>\r\n    )}\r\n    {currentMeeting.open_attendance && (\r\n      <p>\r\n        {currentMeeting.attending ? (\r\n          <Button\r\n            onClick={async () => {\r\n              await del(`/voting/attend/?meeting_id=${currentMeeting.id}`)\r\n              revalidate()\r\n            }}\r\n          >\r\n            LÃ¤mna rÃ¶stlÃ¤ngden\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            onClick={async () => {\r\n              await post('/voting/attend/', { meeting_id: currentMeeting.id })\r\n              revalidate()\r\n            }}\r\n          >\r\n            GÃ¥ med i rÃ¶stlÃ¤ngden\r\n          </Button>\r\n        )}\r\n      </p>\r\n    )}\r\n  </div>\r\n)\r\n\r\nexport default MeetingInfoPanel\r\n","import React, { Component, useState } from 'react'\r\nimport { post } from '../request'\r\n\r\nconst VoteForm = ({ vote }) => {\r\n  const [checkedId, setCheckedId] = useState(-1)\r\n  const [successfullyVoted, setSuccessfullyVoted] = useState(false)\r\n\r\n  const placeVote = async () => {\r\n    const voteData = {\r\n      vote_id: vote.id,\r\n      alternative_id: checkedId,\r\n    }\r\n\r\n    await post('/voting/made_votes/', voteData)\r\n    setSuccessfullyVoted(true)\r\n  }\r\n  const votingDisabled = checkedId === -1\r\n  const buttonText = votingDisabled ? 'VÃ¤lj ett alternativ' : 'RÃ¶sta'\r\n  const alreadyVotedText = successfullyVoted\r\n    ? 'Tack fÃ¶r din rÃ¶st!'\r\n    : 'Du har rÃ¶stat i omrÃ¶stningen.'\r\n\r\n  return (\r\n    <div>\r\n      <strong>{vote.question}</strong>\r\n      {vote.has_voted || successfullyVoted ? (\r\n        <p>{alreadyVotedText}</p>\r\n      ) : (\r\n        <>\r\n          <ul>\r\n            {vote.alternatives.map(({ text, id }) => (\r\n              <li key={id}>\r\n                <label>\r\n                  <input\r\n                    type=\"radio\"\r\n                    checked={checkedId === id}\r\n                    onChange={() => setCheckedId(id)}\r\n                  />\r\n                  {` ${text}`}\r\n                </label>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <button type=\"button\" disabled={votingDisabled} onClick={placeVote}>\r\n            {buttonText}\r\n          </button>\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VoteForm\r\n","import React, { useContext, useState, useEffect } from 'react'\r\nimport useSWR from 'swr'\r\nimport VoteForm from './voteForm'\r\n\r\n// import style from '../../scss/vote.module.scss'\r\n\r\nconst VotePanel = ({ meeting }) => {\r\n  const { data: votes, error, revalidate } = useSWR(\r\n    () => `/voting/votes/?meeting_id=${meeting.id}`\r\n  )\r\n\r\n  useEffect(\r\n    () => {\r\n      revalidate()\r\n    },\r\n    [meeting]\r\n  )\r\n  return (\r\n    <div>\r\n      <h2>RÃ¶sta</h2>\r\n      {votes && (\r\n        <>\r\n          {votes.length === 0 && <p>Det finns ingen aktiv omrÃ¶stning</p>}\r\n          {votes.map(vote => (\r\n            <VoteForm key={vote.id} vote={vote} />\r\n          ))}\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VotePanel\r\n","import React, { useContext, useState, useEffect } from 'react'\r\nimport useSWR from 'swr'\r\n\r\nimport BigPixels from '../layout/bigPixels'\r\nimport { GridContainer, GridItem } from '../ui/grid'\r\nimport TitleChooser from '../ui/titleChooser'\r\nimport SpeakerPanel from './speakerPanel'\r\nimport MeetingInfoPanel from './meetingInfoPanel'\r\nimport VotePanel from './votePanel'\r\n\r\nconst VotePage = ({ pageContext: { title } }) => {\r\n  const [currentMeeting, setCurrentMeeting] = useState(null)\r\n  const { data: meetings, revalidate } = useSWR('/voting/meetings/')\r\n\r\n  // sync currentMeeting with updated meetings\r\n  useEffect(\r\n    () => {\r\n      if (currentMeeting)\r\n        setCurrentMeeting(meetings.find(m => m.id === currentMeeting.id))\r\n    },\r\n    [meetings]\r\n  )\r\n\r\n  return (\r\n    <BigPixels>\r\n      <GridContainer>\r\n        <GridItem fullWidth>\r\n          <TitleChooser\r\n            title={title}\r\n            choice={currentMeeting}\r\n            setChoice={setCurrentMeeting}\r\n            choices={meetings}\r\n            label=\"name\"\r\n            noChoicesLabel=\"Det finns inga mÃ¶ten just nu.\"\r\n          />\r\n        </GridItem>\r\n        {currentMeeting && (\r\n          <>\r\n            <GridItem>\r\n              <MeetingInfoPanel\r\n                currentMeeting={currentMeeting}\r\n                revalidate={revalidate}\r\n              />\r\n            </GridItem>\r\n            <GridItem>\r\n              <VotePanel meeting={currentMeeting} />\r\n            </GridItem>\r\n            {/* {currentMeeting.enable_speaker_requests && ( */}\r\n            <GridItem>\r\n              <SpeakerPanel meeting={currentMeeting} />\r\n            </GridItem>\r\n            {/* )} */}\r\n          </>\r\n        )}\r\n      </GridContainer>\r\n    </BigPixels>\r\n  )\r\n}\r\nexport default VotePage\r\n"],"sourceRoot":""}