{"version":3,"sources":["webpack:///./src/components/votingAdmin/meetingPanel.js","webpack:///./src/components/votingAdmin/addVote.js","webpack:///./src/components/votingAdmin/voteStats.js","webpack:///./src/components/votingAdmin/votePanel.js","webpack:///./src/components/votingAdmin/attendantPanel.js","webpack:///./src/components/votingAdmin/speakerPanel.js","webpack:///./src/components/votingAdmin/addMeeting.js","webpack:///./src/components/votingAdmin/page.js","webpack:///./src/components/checkin/doorkeeperPanel.js","webpack:///./src/scss/form.module.scss","webpack:///./src/components/form/input.js","webpack:///./src/components/form/form.js"],"names":["MeetingPanel","currentMeeting","updatePatch","name","description","style","whiteSpace","enable_speaker_requests","open_attendance","clear_data","onClick","currentKey","createAlternative","existingData","text","key","AddVote","create","updateData","update","question","setQuestion","useState","alternatives","setAlternatives","map","alt","currentQuestion","setCurrentQuestion","open","value","onChange","e","target","i","newVal","prev","slice","type","checked","id","meeting","VoteStats","voteId","data","useSWR","voteSum","num_votes","reduce","a","b","Math","round","VotePanel","votes","mutate","async","newVote","post","updatedVote","put","filter","v","openCreateModal","useModal","openChartModal","closeModal","useCloseModal","useEffect","vote","title","subtitle","undefined","buttons","iconComponent","FiBarChart2","FiEdit2","AttendantPanel","input","setInput","attendants","refreshInterval","onSubmit","preventDefault","newAttendant","user_username","meeting_id","length","del","attendant","user","pretty_name","x","FiTrash2","SpeakerPanel","speakers","s","prioritized","AddMeeting","endpoint","customFetcher","VotingAdminPage","pageContext","setCurrentMeeting","unorderedMeetings","meetings","reverse","find","m","fullWidth","choice","setChoice","choices","label","action","newMeeting","actionLabel","noChoicesLabel","updatedMeeting","patch","event","DoorkeeperPanel","doorkeepers","newDoorkeeper","event_id","doorkeeper","d","destroy","module","exports","AutoInput","required","min_value","max_value","min_length","max_length","change","datetime","date","boolean","integer","max","min","component","Object","prototype","hasOwnProperty","call","maxLength","minLength","className","inputWrapper","AutoForm","method","defaults","fields","setFields","values","setValues","errors","setErrors","options","then","res","raw","actions","POST","editable","keys","f","read_only","catch","err","response","request","field","Fragment","newValue","old","setValue","join","defaultProps"],"mappings":"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","file":"component---src-components-voting-admin-page-js-8989d8aa1c267324c51f.js","sourcesContent":["import React from 'react'\nimport { ButtonGroup, Button } from '../ui/buttons'\nimport { patch } from '../request'\n\nconst MeetingPanel = ({ currentMeeting, updatePatch }) => (\n  <div>\n    <h2>Mötesinfo</h2>\n    <h3>{currentMeeting.name}</h3>\n    {currentMeeting.description && (\n      <p style={{ whiteSpace: 'pre-line' }}>{currentMeeting.description}</p>\n    )}\n    <h3>Detaljer</h3>\n    <ul>\n      <li>\n        {currentMeeting.enable_speaker_requests\n          ? 'Talarlista aktiverad'\n          : 'Talarlista inaktiverad'}\n      </li>\n      <li>\n        {currentMeeting.open_attendance\n          ? 'Öppen incheckning'\n          : 'Stängd incheckning'}\n      </li>\n      <li>{`Mötesdata rensas: ${currentMeeting.clear_data}`}</li>\n    </ul>\n    <ButtonGroup>\n      <Button\n        onClick={() =>\n          updatePatch({\n            enable_speaker_requests: !currentMeeting.enable_speaker_requests,\n          })\n        }\n      >\n        {currentMeeting.enable_speaker_requests\n          ? 'Inaktivera talarlista'\n          : 'Aktivera talarlista'}\n      </Button>\n      <Button\n        onClick={() =>\n          updatePatch({\n            open_attendance: !currentMeeting.open_attendance,\n          })\n        }\n      >\n        {currentMeeting.open_attendance\n          ? 'Stäng självincheckning'\n          : 'Öppna självincheckning'}\n      </Button>\n    </ButtonGroup>\n  </div>\n)\n\nexport default MeetingPanel\n","import React, { useState, useEffect } from 'react'\n\nlet currentKey = 0\n// creates an alternative with an unique key, do not manually create alternative objects\n// the key does not match the id later given by the server.\nconst createAlternative = (existingData = {}) => {\n  currentKey += 1\n  return { text: '', ...existingData, key: currentKey }\n}\n\nconst AddVote = ({ currentMeeting, create, updateData, update }) => {\n  const [question, setQuestion] = useState(\n    updateData ? updateData.question : ''\n  )\n  const [alternatives, setAlternatives] = useState(\n    updateData\n      ? updateData.alternatives.map(alt => createAlternative(alt))\n      : [createAlternative(), createAlternative()]\n  )\n  const [currentQuestion, setCurrentQuestion] = useState(\n    updateData ? updateData.open : true\n  )\n\n  return (\n    <div>\n      <label>\n        Fråga\n        <input\n          value={question}\n          onChange={e => {\n            setQuestion(e.target.value)\n          }}\n        />\n      </label>\n      <hr />\n      <ul>\n        {alternatives.map((alt, i) => (\n          <li key={alt.key}>\n            <input\n              value={alt.text}\n              onChange={e => {\n                const newVal = e.target.value\n                setAlternatives(prev => [\n                  ...prev.slice(0, i),\n                  { ...prev[i], text: newVal },\n                  ...prev.slice(i + 1),\n                ])\n              }}\n            />\n            <button\n              type=\"button\"\n              onClick={() => {\n                setAlternatives(prev => [\n                  ...prev.slice(0, i),\n                  ...prev.slice(i + 1),\n                ])\n              }}\n            >\n              X\n            </button>\n          </li>\n        ))}\n      </ul>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setAlternatives(prev => [...prev, createAlternative()])\n        }}\n      >\n        Lägg till alternativ\n      </button>\n      <hr />\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={currentQuestion}\n          onChange={() => setCurrentQuestion(prev => !prev)}\n        />\n        Nuvarande frågan\n      </label>\n      <hr />\n      <button\n        type=\"button\"\n        onClick={() => {\n          if (updateData) {\n            update(updateData.id, {\n              question,\n              open: currentQuestion,\n              alternatives,\n              meeting: currentMeeting.id,\n            })\n          } else {\n            create({\n              question,\n              open: currentQuestion,\n              alternatives,\n              meeting: currentMeeting.id,\n            })\n          }\n        }}\n      >\n        {updateData ? 'Uppdatera omröstning' : 'Skapa ny omröstning'}\n      </button>\n    </div>\n  )\n}\n\nexport default AddVote\n","import React, { useRef, useEffect } from 'react'\nimport useSWR from 'swr'\n\nconst VoteStats = ({ currentMeeting, voteId }) => {\n  const { data } = useSWR(() => voteId && `/voting/admin-votes/${voteId}/`)\n\n  const voteSum = (data\n    ? data.alternatives.map(alt => alt.num_votes)\n    : []\n  ).reduce((a, b) => a + b, 0)\n\n  return (\n    <div>\n      <ul>\n        {data &&\n          data.alternatives.map(alt => (\n            <li key={alt.text}>\n              {`${alt.text}: ${alt.num_votes}`}\n              {voteSum\n                ? ` (${\n                    alt.num_votes\n                      ? Math.round((1000 * alt.num_votes) / voteSum) / 10\n                      : 0\n                  }%)`\n                : ''}\n            </li>\n          ))}\n      </ul>\n      <p>\n        {'Summa: '}\n        {voteSum}\n      </p>\n    </div>\n  )\n}\n\nexport default VoteStats\n","import React, { useEffect } from 'react'\nimport useSWR from 'swr'\nimport { FiBarChart2, FiEdit2 } from 'react-icons/fi'\n\nimport useModal, { useCloseModal } from '../modal/useModal'\nimport AddVote from './addVote'\nimport VoteStats from './voteStats'\nimport { List, ListItem, ListButton } from '../ui/list'\nimport { Button } from '../ui/buttons'\nimport { post, put } from '../request'\n\nconst VotePanel = ({ currentMeeting }) => {\n  const { data: votes, mutate } = useSWR(\n    `/voting/admin-votes/?event_id=${currentMeeting.id}`\n  )\n\n  const create = async data => {\n    const { data: newVote } = await post('/voting/admin-votes/', data)\n    mutate([...votes, newVote])\n    return newVote\n  }\n\n  const update = async (id, data) => {\n    const { data: updatedVote } = await put(`/voting/admin-votes/${id}/`, data)\n    mutate([...votes.filter(v => v.id !== id), updatedVote])\n    return updatedVote\n  }\n\n  const [openCreateModal] = useModal(AddVote)\n  const [openChartModal] = useModal(VoteStats)\n  const closeModal = useCloseModal()\n\n  // Close modal when a vote is created\n  useEffect(closeModal, [votes])\n\n  // if (votes === null) return <></>\n\n  return (\n    <div>\n      <h2>Omröstningar</h2>\n      <Button\n        onClick={() =>\n          openCreateModal('Ny omröstning', {\n            currentMeeting,\n            create,\n          })\n        }\n      >\n        Ny omröstning\n      </Button>\n      <List>\n        {votes &&\n          votes\n            .filter(vote => vote.meeting === currentMeeting.id)\n            .map(vote => (\n              <ListItem\n                title={vote.question}\n                subtitle={vote.open ? 'Active' : undefined}\n                key={vote.id}\n                buttons={[\n                  <ListButton\n                    onClick={() =>\n                      openChartModal(`Resultat av \"${vote.question}\"`, {\n                        voteId: vote.id,\n                      })\n                    }\n                    iconComponent={FiBarChart2}\n                    text=\"Resultat\"\n                    key=\"results\"\n                  />,\n                  <ListButton\n                    onClick={() =>\n                      openCreateModal(`Uppdatera \"${vote.question}\"`, {\n                        currentMeeting,\n                        update,\n                        updateData: vote,\n                      })\n                    }\n                    iconComponent={FiEdit2}\n                    text=\"Uppdatera omröstning\"\n                    key=\"update\"\n                  />,\n                ]}\n              />\n            ))}\n      </List>\n    </div>\n  )\n}\n\nexport default VotePanel\n","import React, { useState, useEffect } from 'react'\nimport { FiTrash2 } from 'react-icons/fi'\n\nimport { List, ListButton, ListItem } from '../ui/list'\nimport { Button, ButtonGroup } from '../ui/buttons'\nimport { del, post } from '../request'\nimport useSWR from 'swr'\n\nconst AttendantPanel = ({ currentMeeting }) => {\n  const [input, setInput] = useState('')\n\n  const { data: attendants, mutate } = useSWR(\n    () => `/voting/attendants/?meeting_id=${currentMeeting.id}`,\n    { refreshInterval: 4000 }\n  )\n\n  if (attendants === null) return <></>\n\n  return (\n    <div>\n      <h2>Deltagare</h2>\n      <form\n        onSubmit={async e => {\n          e.preventDefault()\n          setInput('')\n          const { data: newAttendant } = await post('/voting/attendants/', {\n            user_username: input,\n            meeting_id: currentMeeting.id,\n          })\n          mutate([...attendants, newAttendant])\n        }}\n      >\n        <input value={input} onChange={e => setInput(e.target.value)} />\n      </form>\n      <div>\n        <ButtonGroup>\n          <p>{`Röstlängd: ${attendants ? attendants.length : 0}`}</p>\n          <Button\n            onClick={async () => {\n              // TODO: fix this ugly solution\n              await del(\n                `/voting/attendants/clear/?meeting_id=${currentMeeting.id}`\n              )\n\n              mutate([])\n            }}\n          >\n            Återställ deltagarlista\n          </Button>\n        </ButtonGroup>\n      </div>\n      <List>\n        {attendants &&\n          attendants.map(attendant => (\n            <ListItem\n              title={attendant.user.pretty_name}\n              key={attendant.id}\n              buttons={[\n                <ListButton\n                  onClick={async () => {\n                    await del(`/voting/attendants/${attendant.id}`, {\n                      meeting_id: currentMeeting.id,\n                    })\n                    mutate(attendants.filter(x => x.id !== attendant.id))\n                  }}\n                  iconComponent={FiTrash2}\n                  text=\"Ta bort deltagare\"\n                  key=\"remove\"\n                />,\n              ]}\n            />\n          ))}\n      </List>\n    </div>\n  )\n}\n\nexport default AttendantPanel\n","import React, { useState, useEffect, useContext } from 'react'\nimport useSWR from 'swr'\n\nimport { FiTrash2 } from 'react-icons/fi'\nimport { List, ListButton, ListItem } from '../ui/list'\nimport { Button } from '../ui/buttons'\nimport { UserContext } from '../layout/layout'\nimport { post, del } from '../request'\n\nconst SpeakerPanel = ({ meeting }) => {\n  const { data: speakers, mutate } = useSWR(\n    () => meeting && `/voting/speakers/?meeting_id=${meeting.id}`,\n    { refreshInterval: 4000 }\n  )\n\n  return (\n    <div>\n      <h2>Talarlista</h2>\n      <List>\n        {speakers &&\n          speakers.map(s => (\n            <ListItem\n              title={s.user.pretty_name}\n              subtitle={s.prioritized ? 'Replik' : null}\n              key={s.id}\n              buttons={[\n                <ListButton\n                  onClick={async () => {\n                    await del(`/voting/speakers/${s.id}`)\n                    mutate(speakers.filter(x => x.id !== s.id))\n                  }}\n                  iconComponent={FiTrash2}\n                  text=\"Ta bort från talarlista\"\n                  key=\"remove\"\n                />,\n              ]}\n            />\n          ))}\n      </List>\n    </div>\n  )\n}\n\nexport default SpeakerPanel\n","import React from 'react'\nimport AutoForm from '../form/form'\n\nconst AddMeeting = ({ create }) => (\n  <AutoForm\n    endpoint=\"/voting/admin-meetings/\" // onSubmit={() => {\n    //   setNewMeetingName('')\n    // }}\n    customFetcher={create}\n  />\n)\n\nexport default AddMeeting\n","import React, { useState, useEffect } from 'react'\nimport useSWR from 'swr'\n\nimport MeetingPanel from './meetingPanel'\nimport DoorkeeperPanel from '../checkin/doorkeeperPanel'\nimport VotePanel from './votePanel'\nimport AttendantPanel from './attendantPanel'\nimport { GridContainer, GridItem } from '../ui/grid'\nimport SpeakerPanel from './speakerPanel'\nimport TitleChooser from '../ui/titleChooser'\nimport AddMeeting from './addMeeting'\nimport useModal, { useCloseModal } from '../modal/useModal'\nimport { post, patch } from '../request'\nimport BigPixels from '../layout/bigPixels'\n\nconst VotingAdminPage = ({ pageContext: { title } }) => {\n  const [currentMeeting, setCurrentMeeting] = useState(null)\n  const { data: unorderedMeetings, mutate } = useSWR('/voting/admin-meetings/')\n  const [openCreateModal] = useModal(AddMeeting)\n  const closeModal = useCloseModal()\n\n  const create = async data => {\n    const { data: newMeeting } = await post('/voting/admin-meetings/', data)\n    mutate([...unorderedMeetings, newMeeting])\n  }\n\n  const updatePatch = async data => {\n    const { data: updatedMeeting } = await patch(\n      `/voting/admin-meetings/${currentMeeting.id}/`,\n      data\n    )\n    mutate([\n      ...unorderedMeetings.filter(meeting => meeting.id !== currentMeeting.id),\n      updatedMeeting,\n    ])\n  }\n\n  const meetings = unorderedMeetings ? [...unorderedMeetings].reverse() : null\n\n  // sync currentMeeting with updated meetings\n  useEffect(\n    () => {\n      if (currentMeeting)\n        setCurrentMeeting(meetings.find(m => m.id === currentMeeting.id))\n    },\n    [meetings]\n  )\n\n  return (\n    <BigPixels>\n      <GridContainer>\n        <GridItem fullWidth>\n          <TitleChooser\n            title={title}\n            choice={currentMeeting}\n            setChoice={setCurrentMeeting}\n            choices={meetings}\n            label=\"name\"\n            action={() => {\n              openCreateModal('Nytt möte', {\n                create: async data => {\n                  await create(data)\n                  closeModal()\n                },\n              })\n            }}\n            actionLabel=\"Nytt möte\"\n            noChoicesLabel=\"Det finns inga möten just nu.\"\n          />\n        </GridItem>\n        {currentMeeting && (\n          <>\n            <GridItem>\n              <MeetingPanel\n                currentMeeting={currentMeeting}\n                updatePatch={updatePatch}\n              />\n            </GridItem>\n            <GridItem>\n              <VotePanel currentMeeting={currentMeeting} />\n            </GridItem>\n            <GridItem>\n              <DoorkeeperPanel event={currentMeeting} />\n            </GridItem>\n            <GridItem>\n              <AttendantPanel currentMeeting={currentMeeting} />\n            </GridItem>\n            <GridItem>\n              <SpeakerPanel meeting={currentMeeting} />\n            </GridItem>\n          </>\n        )}\n      </GridContainer>\n    </BigPixels>\n  )\n}\n\nexport default VotingAdminPage\n","import React, { useState, useEffect } from 'react'\n\nimport { FiTrash2 } from 'react-icons/fi'\nimport { List, ListItem, ListButton } from '../ui/list'\nimport useSWR from 'swr'\nimport { post, del } from '../request'\n\nconst DoorkeeperPanel = ({ event }) => {\n  const [input, setInput] = useState('')\n\n  const { data: doorkeepers, mutate } = useSWR(\n    `/checkin/doorkeepers/?event_id=${event.id}`\n  )\n\n  const create = async data => {\n    const { data: newDoorkeeper } = await post('/checkin/doorkeepers/', data)\n    mutate([...doorkeepers, newDoorkeeper])\n    return newDoorkeeper\n  }\n\n  const destroy = async id => {\n    await del(`/checkin/doorkeepers/${id}/`)\n    mutate(doorkeepers.filter(d => d.id !== id))\n  }\n\n  return (\n    <div>\n      <h2>Dörrvakter</h2>\n      <form\n        onSubmit={e => {\n          e.preventDefault()\n          setInput('')\n\n          create({\n            user_username: input,\n            event_id: event.id,\n          })\n        }}\n      >\n        <input value={input} onChange={e => setInput(e.target.value)} />\n      </form>\n      <List>\n        {doorkeepers &&\n          doorkeepers.map(doorkeeper => (\n            <ListItem\n              title={doorkeeper.user.pretty_name}\n              key={doorkeeper.id}\n              buttons={[\n                <ListButton\n                  onClick={() => destroy(doorkeeper.id)}\n                  iconComponent={FiTrash2}\n                  text=\"Ta bort dörrvakt\"\n                  key=\"remove\"\n                />,\n              ]}\n            />\n          ))}\n      </List>\n    </div>\n  )\n}\n\nexport default DoorkeeperPanel\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"form-module--label--1j4rO\",\"inputWrapper\":\"form-module--inputWrapper--tEZjQ\",\"required\":\"form-module--required--1ei65\"};","import React, { useState, useEffect } from 'react'\nimport DateTimePicker from './dateTimePicker'\n\nimport style from '../../scss/form.module.scss'\n\nconst AutoInput = ({\n  value,\n  onChange,\n  type,\n  label,\n  required,\n  min_value,\n  max_value,\n  min_length,\n  max_length,\n}) => {\n  const change = e => {\n    onChange(e.target.value)\n  }\n\n  const map = {\n    datetime: <DateTimePicker value={value} onChange={onChange} />,\n    date: <input type=\"date\" value={value} onChange={change} />,\n    boolean: (\n      <input\n        type=\"checkbox\"\n        checked={value}\n        onChange={e => {\n          onChange(e.target.checked)\n        }}\n      />\n    ),\n    integer: (\n      <input\n        type=\"number\"\n        value={value}\n        onChange={change}\n        max={max_value}\n        min={min_value}\n      />\n    ),\n  }\n\n  const component = Object.prototype.hasOwnProperty.call(map, type) ? (\n    map[type]\n  ) : (\n    <input\n      value={value}\n      onChange={change}\n      maxLength={max_length}\n      minLength={min_length}\n    />\n  )\n\n  return (\n    <label className={style.label}>\n      {`${label}`}\n      {required && <span className={style.required}>*</span>}\n      <div className={style.inputWrapper}>{component}</div>\n    </label>\n  )\n}\nexport default AutoInput\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport request, { options } from '../request'\nimport AutoInput from './input'\nimport { Button } from '../ui/buttons'\n\nconst AutoForm = ({ endpoint, method, customFetcher, onSubmit, defaults }) => {\n  const [fields, setFields] = useState()\n  const [values, setValues] = useState(defaults)\n  const [errors, setErrors] = useState({})\n\n  const setValue = (field, value) => {\n    setValues(old => ({ ...old, [field]: value }))\n  }\n\n  const setError = (field, error) => {\n    setErrors(old => ({ ...old, [field]: error }))\n  }\n\n  useEffect(() => {\n    // request endpoint info from server\n    options(endpoint)\n      .then(res => {\n        const raw = res.data.actions.POST\n\n        // object to array\n        const arrayified = Object.keys(raw).map(key => ({\n          key,\n          ...raw[key],\n        }))\n        const editable = arrayified.filter(f => !f.read_only)\n\n        setFields(editable)\n      })\n      .catch(err => {})\n  }, endpoint)\n\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault()\n        onSubmit()\n        if (customFetcher) {\n          customFetcher(values).catch(err => {\n            if (err.response) {\n              setErrors(err.response.data)\n            }\n          })\n        } else {\n          request({ endpoint, method, data: values })\n        }\n      }}\n    >\n      {fields &&\n        fields.map(field => (\n          <React.Fragment key={field.key}>\n            <AutoInput\n              {...field}\n              onChange={newValue => {\n                setValue(field.key, newValue)\n              }}\n              value={values[field.key]}\n            />\n            {Object.prototype.hasOwnProperty.call(errors, field.key) && (\n              <div>{errors[field.key].join(', ')}</div>\n            )}\n          </React.Fragment>\n        ))}\n      <Button type=\"submit\" onClick={() => {}}>\n        Submit\n      </Button>\n    </form>\n  )\n}\n\nAutoForm.defaultProps = {\n  method: 'POST',\n  customFetcher: null,\n  onSubmit: () => {},\n  defaults: {},\n}\n\nAutoForm.propTypes = {\n  method: PropTypes.string,\n  endpoint: PropTypes.string.isRequired,\n  customFetcher: PropTypes.func,\n  onSubmit: PropTypes.func,\n  defaults: PropTypes.object,\n}\n\nexport default AutoForm\n"],"sourceRoot":""}