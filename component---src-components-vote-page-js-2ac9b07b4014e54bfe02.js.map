{"version":3,"file":"component---src-components-vote-page-js-2ac9b07b4014e54bfe02.js","mappings":"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","sources":["webpack://medlem/./src/components/ui/list.js","webpack://medlem/./src/components/ui/titleChooser.js","webpack://medlem/./src/components/vote/speakerPanel.js","webpack://medlem/./src/components/vote/meetingInfoPanel.js","webpack://medlem/./src/components/vote/voteForm.js","webpack://medlem/./src/components/vote/votePanel.js","webpack://medlem/./src/scss/vote.module.scss","webpack://medlem/./src/components/vote/page.js"],"sourcesContent":["import React from 'react'\n\nimport {listItemColor, listText, listButtons, list, listButton} from '../../scss/ui.module.scss'\n\nconst List = ({ children }) => <ul className={list}>{children}</ul>\n\nconst ListItem = ({ title, subtitle, buttons, color }) => (\n  <li\n    className={color ? listItemColor : ''}\n    style={{ borderColor: color }}\n  >\n    <div className={listText}>\n      <h3>{title}</h3>\n      <p>{subtitle}</p>\n    </div>\n    <div className={listButtons}>{buttons}</div>\n  </li>\n)\n\nListItem.defaultProps = {\n  color: null,\n}\n\nconst ListButton = ({ href, onClick, iconComponent: Icon, text, shown }) =>\n  shown ? (\n    <>\n      {href ? (\n        <a\n          className={listButton}\n          href={href}\n          onClick={onClick}\n          title={text}\n        >\n          <Icon />\n        </a>\n      ) : (\n        <button\n          className={listButton}\n          type=\"button\"\n          onClick={onClick}\n          title={text}\n        >\n          <Icon />\n        </button>\n      )}\n    </>\n  ) : (\n    <></>\n  )\n\nListButton.defaultProps = {\n  shown: true,\n}\n\nexport { List, ListItem, ListButton }\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {actions, titleChooser, selectContainer, hint} from '../../scss/ui.module.scss'\nimport { Button } from './buttons'\n\nconst TitleChooser = ({\n  title,\n  choices,\n  categorizedChoices,\n  choice,\n  setChoice,\n  label,\n  action,\n  actionLabel,\n  noChoicesLabel,\n  onChange,\n}) => {\n  const allChoices = [\n    ...(choices || []),\n    // merge all categorized choices to single array.\n    ...Object.keys(categorizedChoices).reduce(\n      (accumulator, category) => [\n        ...accumulator,\n        ...categorizedChoices[category],\n      ],\n      []\n    ),\n  ]\n  return (\n    <div className={titleChooser}>\n      <h1>{title}</h1>\n      <div className={actions}>\n        {allChoices.length ? (\n          <div className={selectContainer}>\n            <select\n              onChange={e => {\n                const selectedValue = e.target.value\n                const c =\n                  selectedValue === ''\n                    ? null\n                    : allChoices.filter(i => `${i.id}` === selectedValue)[0]\n                setChoice(c)\n                onChange(e)\n              }}\n              value={choice ? choice.id : ''}\n            >\n              <option hidden value=\"\" />\n              {choices.sort().map(c => (\n                <option value={c.id} key={c.id}>\n                  {c[label]}\n                </option>\n              ))}\n              {Object.keys(categorizedChoices)\n                .sort()\n                .map(key => (\n                  <optgroup label={key} key={key}>\n                    {categorizedChoices[key].sort().map(c => (\n                      <option value={c.id} key={c.id}>\n                        {c[label]}\n                      </option>\n                    ))}\n                  </optgroup>\n                ))}\n            </select>\n            {choice === null && (\n              <div className={hint}>VÃ¤lj ett objekt</div>\n            )}\n          </div>\n        ) : (\n          <span>{noChoicesLabel}</span>\n        )}\n\n        {action && <Button onClick={action}>{actionLabel}</Button>}\n      </div>\n    </div>\n  )\n}\nTitleChooser.defaultProps = {\n  categorizedChoices: {},\n  choices: [],\n  action: null,\n  actionLabel: '',\n  choice: null,\n  noChoicesLabel: '',\n  setChoice: () => {},\n  label: '',\n  onChange: () => {},\n}\n\nTitleChooser.propTypes = {\n  title: PropTypes.string.isRequired,\n  choices: PropTypes.array,\n  categorizedChoices: PropTypes.object,\n  choice: PropTypes.object,\n  setChoice: PropTypes.func,\n  label: PropTypes.string,\n  action: PropTypes.func,\n  actionLabel: PropTypes.string,\n  noChoicesLabel: PropTypes.string,\n  onChange: PropTypes.func,\n}\n\nexport default TitleChooser\n","import React, { useState, useEffect, useContext } from 'react'\nimport useSWR from 'swr'\n\nimport { FiTrash2 } from 'react-icons/fi'\nimport { List, ListButton, ListItem } from '../ui/list'\nimport { Button, ButtonGroup } from '../ui/buttons'\nimport { UserContext } from '../layout/layout'\nimport { post, del } from '../request'\n\nconst SpeakerPanel = ({ meeting }) => {\n  const { data: speakers, mutate } = useSWR(\n    () => meeting && `/voting/speakers/?meeting_id=${meeting.id}`\n  )\n\n  const [user] = useContext(UserContext)\n\n  const errorMessage = meeting.attending\n    ? 'Talarlista Ã¤r inaktiverad fÃ¶r mÃ¶tet.'\n    : 'Du mÃ¥ste vara registrerad pÃ¥ mÃ¶tet fÃ¶r att kunna skriva upp dig pÃ¥ talarlistan.'\n\n  return (\n    <div>\n      <h2>Talarlista</h2>\n      {meeting.attending && meeting.enable_speaker_requests ? (\n        <ButtonGroup>\n          <Button\n            onClick={async () => {\n              const { data: newSpeaker } = await post('/voting/speakers/', {\n                meeting_id: meeting.id,\n              })\n              mutate([...speakers, newSpeaker])\n            }}\n          >\n            Jag vill tala!\n          </Button>\n          <Button\n            onClick={async () => {\n              const { data: newSpeaker } = await post('/voting/speakers/', {\n                meeting_id: meeting.id,\n                prioritized: true,\n              })\n              mutate([...speakers, newSpeaker])\n            }}\n          >\n            Replik!\n          </Button>\n        </ButtonGroup>\n      ) : (\n        <p>{errorMessage}</p>\n      )}\n      <List>\n        {speakers &&\n          speakers.map(s => (\n            <ListItem\n              title={s.user.pretty_name}\n              subtitle={s.prioritized ? 'Replik' : null}\n              key={s.id}\n              buttons={[\n                <ListButton\n                  shown={user.id === s.user.id}\n                  onClick={async () => {\n                    const prioQS = s.prioritized ? '&prioritized' : ''\n                    await del(\n                      `/voting/speakers/?meeting_id=${meeting.id}${prioQS}`\n                    )\n                    mutate(speakers.filter(x => x.id !== s.id))\n                  }}\n                  iconComponent={FiTrash2}\n                  text=\"LÃ¤mna talarlista\"\n                  key=\"remove\"\n                />,\n              ]}\n            />\n          ))}\n      </List>\n    </div>\n  )\n}\n\nexport default SpeakerPanel\n","import React from 'react'\nimport { Button } from '../ui/buttons'\nimport { post, del } from '../request'\n\nconst MeetingInfoPanel = ({ currentMeeting, revalidate }) => (\n  <div>\n    <h2>MÃ¶tesinfo</h2>\n    <h3>{currentMeeting.name}</h3>\n    <p>\n      <strong>\n        {currentMeeting.attending\n          ? 'Du deltar pÃ¥ mÃ¶tet.'\n          : 'Du Ã¤r inte registrerad pÃ¥ mÃ¶tet.'}\n      </strong>\n    </p>\n    {currentMeeting.description && (\n      <p style={{ whiteSpace: 'pre-line' }}>{currentMeeting.description}</p>\n    )}\n    {currentMeeting.open_attendance && (\n      <p>\n        {currentMeeting.attending ? (\n          <Button\n            onClick={async () => {\n              await del(`/voting/attend/?meeting_id=${currentMeeting.id}`)\n              revalidate()\n            }}\n          >\n            LÃ¤mna rÃ¶stlÃ¤ngden\n          </Button>\n        ) : (\n          <Button\n            onClick={async () => {\n              await post('/voting/attend/', { meeting_id: currentMeeting.id })\n              revalidate()\n            }}\n          >\n            GÃ¥ med i rÃ¶stlÃ¤ngden\n          </Button>\n        )}\n      </p>\n    )}\n  </div>\n)\n\nexport default MeetingInfoPanel\n","import React, { Component, useState } from 'react'\nimport { post } from '../request'\n\nconst VoteForm = ({ vote, setErrors }) => {\n  const [checkedId, setCheckedId] = useState(-1)\n  const [successfullyVoted, setSuccessfullyVoted] = useState(false)\n\n  const placeVote = async () => {\n    setErrors({})\n\n    const voteData = {\n      vote_id: vote.id,\n      alternative_id: checkedId,\n    }\n\n    await post('/voting/made_votes/', voteData)\n      .then(() => setSuccessfullyVoted(true))\n      .catch(err => {\n        setErrors({ voteError: err.response.data.error })\n      })\n  }\n  const votingDisabled = checkedId === -1\n  const buttonText = votingDisabled ? 'VÃ¤lj ett alternativ' : 'RÃ¶sta'\n  const alreadyVotedText = successfullyVoted\n    ? 'Tack fÃ¶r din rÃ¶st!'\n    : 'Du har rÃ¶stat i omrÃ¶stningen.'\n\n  return (\n    <div>\n      <strong>{vote.question}</strong>\n      {vote.has_voted || successfullyVoted ? (\n        <p>{alreadyVotedText}</p>\n      ) : (\n        <>\n          <ul>\n            {vote.alternatives.map(({ text, id }) => (\n              <li key={id}>\n                <label>\n                  <input\n                    type=\"radio\"\n                    checked={checkedId === id}\n                    onChange={() => setCheckedId(id)}\n                  />\n                  {` ${text}`}\n                </label>\n              </li>\n            ))}\n          </ul>\n          <button type=\"button\" disabled={votingDisabled} onClick={placeVote}>\n            {buttonText}\n          </button>\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default VoteForm\n","import React, { useState } from 'react'\nimport useSWR from 'swr'\nimport VoteForm from './voteForm'\nimport { formError } from '../../scss/vote.module.scss'\n\nconst VotePanel = ({ meeting }) => {\n  const { data: votes } = useSWR(\n    () => `/voting/votes/?meeting_id=${meeting.id}`\n  )\n  const [errors, setErrors] = useState({})\n  const setFormErrors = errors => {\n    setErrors(errors)\n    setTimeout(() => setErrors({}), 3000)\n  }\n\n  return (\n    <div>\n      <h2>RÃ¶sta</h2>\n      {errors && <div className={formError}>{errors.voteError}</div>}\n      {votes && (\n        <>\n          {votes.length === 0 && <p>Det finns ingen aktiv omrÃ¶stning</p>}\n          {votes.map(vote => (\n            <VoteForm key={vote.id} vote={vote} setErrors={setFormErrors} />\n          ))}\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default VotePanel\n","// extracted by mini-css-extract-plugin\nexport var formError = \"vote-module--formError--40ff7\";","import React, { useContext, useState, useEffect } from 'react'\nimport useSWR from 'swr'\n\nimport BigPixels from '../layout/bigPixels'\nimport { GridContainer, GridItem } from '../ui/grid'\nimport TitleChooser from '../ui/titleChooser'\nimport SpeakerPanel from './speakerPanel'\nimport MeetingInfoPanel from './meetingInfoPanel'\nimport VotePanel from './votePanel'\n\nconst VotePage = ({ pageContext: { title } }) => {\n  const [currentMeeting, setCurrentMeeting] = useState(null)\n  const { data: meetings, revalidate } = useSWR('/voting/meetings/')\n\n  // sync currentMeeting with updated meetings\n  useEffect(\n    () => {\n      if (currentMeeting)\n        setCurrentMeeting(meetings.find(m => m.id === currentMeeting.id))\n    },\n    [meetings]\n  )\n\n  return (\n    <BigPixels>\n      <GridContainer>\n        <GridItem fullWidth>\n          <TitleChooser\n            title={title}\n            choice={currentMeeting}\n            setChoice={setCurrentMeeting}\n            choices={meetings}\n            label=\"name\"\n            noChoicesLabel=\"Det finns inga mÃ¶ten just nu.\"\n          />\n        </GridItem>\n        {currentMeeting && (\n          <>\n            <GridItem>\n              <MeetingInfoPanel\n                currentMeeting={currentMeeting}\n                revalidate={revalidate}\n              />\n            </GridItem>\n            {/* {currentMeeting.enable_speaker_requests && ( */}\n            <GridItem>\n              <SpeakerPanel meeting={currentMeeting} />\n            </GridItem>\n            {/* )} */}\n            <GridItem>\n              <VotePanel meeting={currentMeeting} />\n            </GridItem>\n          </>\n        )}\n      </GridContainer>\n    </BigPixels>\n  )\n}\nexport default VotePage\n"],"names":["List","_ref","children","React","className","list","ListItem","_ref2","title","subtitle","buttons","color","listItemColor","style","borderColor","listText","listButtons","defaultProps","ListButton","_ref3","href","onClick","iconComponent","Icon","text","shown","listButton","type","TitleChooser","choices","categorizedChoices","choice","setChoice","label","action","actionLabel","noChoicesLabel","onChange","allChoices","concat","_toConsumableArray","Object","keys","reduce","accumulator","category","titleChooser","actions","length","selectContainer","e","selectedValue","target","value","c","filter","i","id","hidden","sort","map","key","hint","Button","meeting","data","speakers","mutate","useSWR","user","useContext","UserContext","errorMessage","attending","enable_speaker_requests","ButtonGroup","async","newSpeaker","post","meeting_id","prioritized","s","pretty_name","prioQS","del","x","FiTrash2","currentMeeting","revalidate","name","description","whiteSpace","open_attendance","vote","setErrors","checkedId","setCheckedId","useState","successfullyVoted","setSuccessfullyVoted","votingDisabled","buttonText","alreadyVotedText","question","has_voted","alternatives","checked","disabled","voteData","vote_id","alternative_id","then","catch","err","voteError","response","error","votes","errors","setFormErrors","setTimeout","VoteForm","pageContext","setCurrentMeeting","meetings","useEffect","find","m","BigPixels","GridContainer","GridItem","fullWidth","MeetingInfoPanel","SpeakerPanel","VotePanel"],"sourceRoot":""}