{"version":3,"sources":["webpack:///./src/components/votingAdmin/meetingPanel.js","webpack:///./src/components/votingAdmin/addVote.js","webpack:///./src/components/votingAdmin/votePanel.js","webpack:///./src/components/votingAdmin/attendantPanel.js","webpack:///./src/components/votingAdmin/speakerPanel.js","webpack:///./src/components/votingAdmin/addMeeting.js","webpack:///./src/components/votingAdmin/guestPanel.js","webpack:///./src/components/votingAdmin/page.js","webpack:///./src/components/modal/useConfirmModal.js","webpack:///./src/components/checkin/doorkeeperPanel.js","webpack:///./src/components/votingAdmin/voteStats.js","webpack:///./src/scss/form.module.scss","webpack:///./src/components/form/input.js","webpack:///./src/components/form/form.js"],"names":["MeetingPanel","currentMeeting","updatePatch","name","description","style","whiteSpace","enable_speaker_requests","open_attendance","clear_data","onClick","currentKey","createAlternative","existingData","text","key","AddVote","create","updateData","update","question","setQuestion","useState","alternatives","setAlternatives","map","alt","currentQuestion","setCurrentQuestion","open","multiChoiceQuestion","setMultiChoiceQuestion","max_number_of_selectable_alternatives","exactAmountOfAlternatives","setExactAmountOfAlternatives","min_number_of_selectable_alternatives","userOptionMinAmount","setUserOptionMinAmount","userOptionMaxAmount","setUserOptionMaxAmount","value","onChange","e","target","i","newVal","prev","slice","type","checked","id","Number","defaultValue","disabled","meeting","VotePanel","data","votes","mutate","useSWR","async","newVote","post","updatedVote","put","filter","v","openCreateModal","useModal","openChartModal","VoteStats","closeModal","useCloseModal","confirmModal","useConfirmModal","useEffect","vote","title","subtitle","undefined","buttons","voteId","iconComponent","FiBarChart2","FiEdit2","getMemberAttendants","attendants","attendant","has_voting_rights","AttendantPanel","input","setInput","refreshInterval","onSubmit","preventDefault","newAttendant","user_username","meeting_id","length","del","user","pretty_name","x","FiTrash2","SpeakerPanel","speakers","s","prioritized","AddMeeting","endpoint","customFetcher","getGuestAttendants","GuestPanel","VotingAdminPage","pageContext","setCurrentMeeting","unorderedMeetings","meetings","reverse","find","m","fullWidth","choice","setChoice","choices","label","action","newMeeting","actionLabel","noChoicesLabel","updatedMeeting","patch","event","Confirmation","onAccept","onDecline","close","className","confirmation","openModal","isOpen","defaultProps","DoorkeeperPanel","doorkeepers","newDoorkeeper","event_id","doorkeeper","d","destroy","voteSum","num_votes","reduce","a","b","attendantsVoted","attendants_voted","allVotes","thisVote","maxSelectable","minSelectable","Math","round","module","exports","AutoInput","required","min_value","max_value","min_length","max_length","change","datetime","date","boolean","integer","max","min","component","Object","prototype","hasOwnProperty","call","maxLength","minLength","inputWrapper","AutoForm","method","defaults","fields","setFields","values","setValues","errors","setErrors","options","then","res","raw","actions","POST","editable","keys","f","read_only","catch","err","response","request","field","Fragment","newValue","old","setValue","join"],"mappings":"8KAoDeA,MAhDM,EAAGC,iBAAgBC,iBACtC,6BACE,yCACA,4BAAKD,EAAeE,MACnBF,EAAeG,aACd,uBAAGC,MAAO,CAAEC,WAAY,aAAeL,EAAeG,aAExD,wCACA,4BACE,4BACGH,EAAeM,wBACZ,uBACA,0BAEN,4BACGN,EAAeO,gBACZ,oBACA,sBAEN,iDAA0BP,EAAeQ,aAE3C,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,QAAS,IACPR,EAAY,CACVK,yBAA0BN,EAAeM,2BAI5CN,EAAeM,wBACZ,wBACA,uBAEN,kBAAC,IAAD,CACEG,QAAS,IACPR,EAAY,CACVM,iBAAkBP,EAAeO,mBAIpCP,EAAeO,gBACZ,yBACA,4B,gDC5CZ,IAAIG,EAAa,EAGjB,MAAMC,EAAoB,CAACC,EAAe,MACxCF,GAAc,EACP,CAAEG,KAAM,MAAOD,EAAcE,IAAKJ,IA4P5BK,MAzPC,EAAGf,iBAAgBgB,SAAQC,aAAYC,aACrD,MAAM,EAACC,EAAD,EAAWC,GAAeC,mBAC9BJ,EAAaA,EAAWE,SAAW,KAE/B,EAACG,EAAD,EAAeC,GAAmBF,mBACtCJ,EACIA,EAAWK,aAAaE,IAAIC,GAAOd,EAAkBc,IACrD,CAACd,IAAqBA,OAEtB,EAACe,EAAD,EAAkBC,GAAsBN,oBAC5CJ,GAAaA,EAAWW,OAGpB,EAACC,EAAD,EAAsBC,GAA0BT,qBACpDJ,GAAaA,EAAWc,sCAAwC,IAE5D,EAACC,EAAD,EAA4BC,GAAgCZ,qBAChEJ,GACIA,EAAWiB,wCACTjB,EAAWc,wCAGb,EAACI,EAAD,EAAsBC,GAA0Bf,mBACpDJ,EAAaA,EAAWiB,sCAAwC,IAE5D,EAACG,EAAD,EAAsBC,GAA0BjB,mBACpDJ,EAAaA,EAAWc,sCAAwC,GAGlE,OACE,6BACE,uCAEE,2BACEQ,MAAOpB,EACPqB,SAAUC,IACRrB,EAAYqB,EAAEC,OAAOH,WAI3B,6BACA,4BACGjB,EAAaE,IAAI,CAACC,EAAKkB,IACtB,wBAAI7B,IAAKW,EAAIX,KACX,2BACEyB,MAAOd,EAAIZ,KACX2B,SAAUC,IACR,MAAMG,EAASH,EAAEC,OAAOH,MACxBhB,EAAgBsB,GAAI,sBACfA,EAAKC,MAAM,EAAGH,IADC,CAElB,IAAKE,EAAKF,GAAI9B,KAAM+B,IAFF,YAGfC,EAAKC,MAAMH,EAAI,SAIxB,4BACEI,KAAK,SACLtC,QAAS,KACPc,EAAgBsB,GAAI,sBACfA,EAAKC,MAAM,EAAGH,IADC,YAEfE,EAAKC,MAAMH,EAAI,QALxB,QAcN,4BACEI,KAAK,SACLtC,QAAS,KACPc,EAAgBsB,GAAI,sBAAQA,GAAR,CAAclC,SAHtC,wBAQA,6BACA,+BACE,2BACEoC,KAAK,WACLC,QAAStB,EACTc,SAAU,IAAMb,EAAmBkB,IAASA,KAJhD,oBAQA,6BAEA,+BACE,2BACEE,KAAK,WACLC,QAASnB,EACTW,SAAU,KACRV,EAAuBe,IAASA,GAChCT,EAAuB,GACvBE,EAAuB,MAP7B,iBAaA,6BAECT,GACC,oCACE,+BACE,2BACEkB,KAAK,WACLC,QAAShB,EACTQ,SAAU,KACRP,EAA6BY,IAASA,GACtCT,EAAuB,GACvBE,EAAuB,MAP7B,sCAaA,8BAIHT,GAAuBG,GACtB,oCACE,sDAEE,6BAFF,4BAIE,8BAEF,4BACE9B,KAAK,WACL+C,GAAG,WACHT,SAAUC,IACRL,EAAuBc,OAAOT,EAAEC,OAAOH,QACvCD,EAAuBY,OAAOT,EAAEC,OAAOH,SAEzCY,aAAcd,GAEbf,EAAaE,IAAI,CAACC,EAAKkB,IACtB,4BAAQ7B,IAAK6B,EAAI,EAAGJ,MAAOI,EAAI,GAC5BA,EAAI,KAKX,8BAIHd,IAAwBG,GACvB,oCACE,6DAEE,6BAFF,4BAIE,8BAEF,4BACE9B,KAAK,WACL+C,GAAG,WACHT,SAAUC,GAAKL,EAAuBc,OAAOT,EAAEC,OAAOH,QACtDY,aAAchB,GAEbb,EAAaE,IAAI,CAACC,EAAKkB,IACtB,4BAAQ7B,IAAK6B,EAAI,EAAGJ,MAAOI,EAAI,GAC5BA,EAAI,KAKX,6BAEA,+CAEE,8BAEF,4BACEzC,KAAK,WACL+C,GAAG,WACHT,SAAUC,GAAKH,EAAuBY,OAAOT,EAAEC,OAAOH,QACtDY,aAAcd,GAEbf,EAAaE,IAAI,CAACC,EAAKkB,IACtB,4BAAQ7B,IAAK6B,EAAI,EAAGJ,MAAOI,EAAI,GAC5BA,EAAI,MAOf,6BAECd,IACEG,GACDG,EAAsBE,GACpB,gDAEE,6BAFF,2BAIE,6BAJF,iBAME,6BANF,kBAWJ,4BACEU,KAAK,SACLK,SACEvB,GAAuBM,EAAsBE,EAE/C5B,QAAS,KACHQ,EACFC,EAAOD,EAAWgC,GAAI,CACpB9B,WACAS,KAAMF,EACNJ,eACA+B,QAASrD,EAAeiD,GACxBf,sCAAuCL,EACnCM,EACA,EACJJ,sCAAuCF,EACnCQ,EACA,IAGNrB,EAAO,CACLG,WACAS,KAAMF,EACNJ,eACA+B,QAASrD,EAAeiD,GACxBf,sCAAuCL,EACnCM,EACA,EACJJ,sCAAuCF,EACnCQ,EACA,MAKTpB,EAAa,uBAAyB,yB,wBCrJhCqC,MA5FG,EAAGtD,qBACnB,MAAQuD,KAAMC,EAAR,OAAeC,GAAWC,YAAO,iCACJ1D,EAAeiD,IAG5CjC,EAAS2C,UACb,MAAQJ,KAAMK,SAAkBC,YAAK,uBAAwBN,GAE7D,OADAE,EAAO,GAAD,mBAAKD,GAAL,CAAYI,KACXA,GAGH1C,EAASyC,MAAOV,EAAIM,KACxB,MAAQA,KAAMO,SAAsBC,YAAI,uBAAuBd,EAAxB,IAA+BM,GAEtE,OADAE,EAAO,GAAD,mBAAKD,EAAMQ,OAAOC,GAAKA,EAAEhB,KAAOA,IAAhC,CAAqCa,KACpCA,IAWFI,GAAmBC,YAASpD,IAC5BqD,GAAkBD,YAASE,KAC5BC,EAAaC,eACZC,GAAgBC,cAOvB,OAJAC,oBAAUJ,EAAY,CAACd,IAKrB,6BACE,4CACA,kBAAC,IAAD,CACE/C,QAAS,IACPyD,EAAgB,gBAAiB,CAC/BlE,iBACAgB,YAJN,iBAUA,kBAAC,IAAD,KACGwC,GACCA,EACGQ,OAAOW,GAAQA,EAAKtB,UAAYrD,EAAeiD,IAC/CzB,IAAImD,GACH,kBAAC,IAAD,CACEC,MAAOD,EAAKxD,SACZ0D,SAAUF,EAAK/C,KAAO,cAAWkD,EACjChE,IAAK6D,EAAK1B,GACV8B,QAAS,CACP,kBAAC,IAAD,CACEtE,QAAS,IACP+D,EAAa,yBAEX,KA7CTb,iBACLW,IACNF,EAAe,gBAAgBO,EAAKxD,SAAtB,IAAmC,CAC/CnB,iBACAgF,OAAQL,EAAK1B,MA0COrB,CAAK+C,IAEPL,GAGJW,cAAeC,IACfrE,KAAK,WACLC,IAAI,YAEN,kBAAC,IAAD,CACEL,QAAS,IACPyD,EAAgB,cAAcS,EAAKxD,SAApB,IAAiC,CAC9CnB,iBACAkB,SACAD,WAAY0D,IAGhBM,cAAeE,IACftE,KAAK,uBACLC,IAAI,kBCtFxB,MAAMsE,EAAsBC,GACDA,EAAWrB,OAClCsB,GAAaA,EAAUC,mBA6EZC,MAxEQ,EAAGxF,qBACxB,MAAM,EAACyF,EAAD,EAAQC,GAAYrE,mBAAS,KAE3BkC,KAAM8B,EAAR,OAAoB5B,GAAWC,YACnC,sCAAwC1D,EAAeiD,GACvD,CAAE0C,gBAAiB,MAGrB,OAAmB,OAAfN,EAA4B,qCAG9B,6BACE,yCACA,0BACEO,SAAUjC,UACRlB,EAAEoD,iBACFH,EAAS,IACT,MAAQnC,KAAMuC,SAAuBjC,YAAK,sBAAuB,CAC/DkC,cAAeN,EACfO,WAAYhG,EAAeiD,GAC3BsC,mBAAmB,IAErB9B,EAAO,GAAD,mBAAK4B,GAAL,CAAiBS,OAGzB,2BAAOvD,MAAOkD,EAAOjD,SAAUC,GAAKiD,EAASjD,EAAEC,OAAOH,UAExD,6BACE,kBAAC,IAAD,KACE,0CACE8C,EAAaD,EAAoBC,GAAYY,OAAS,IAExD,kBAAC,IAAD,CACExF,QAASkD,gBAEDuC,YAAI,wCACgClG,EAAeiD,IAGzDQ,EAAO,MAPX,6BAcJ,kBAAC,IAAD,KACG4B,GACCD,EAAoBC,GAAY7D,IAAI8D,GAClC,kBAAC,IAAD,CACEV,MAAOU,EAAUa,KAAKC,YACtBtF,IAAKwE,EAAUrC,GACf8B,QAAS,CACP,kBAAC,IAAD,CACEtE,QAASkD,gBACDuC,YAAI,sBAAsBZ,EAAUrC,GAAM,CAC9C+C,WAAYhG,EAAeiD,KAE7BQ,EAAO4B,EAAWrB,OAAOqC,GAAKA,EAAEpD,KAAOqC,EAAUrC,MAEnDgC,cAAeqB,IACfzF,KAAK,oBACLC,IAAI,kB,sBClCPyF,MAlCM,EAAGlD,cACtB,MAAQE,KAAMiD,EAAR,OAAkB/C,GAAWC,YACjC,IAAML,GAAO,gCAAoCA,EAAQJ,GACzD,CAAE0C,gBAAiB,MAGrB,OACE,6BACE,0CACA,kBAAC,IAAD,KACGa,GACCA,EAAShF,IAAIiF,GACX,kBAAC,IAAD,CACE7B,MAAO6B,EAAEN,KAAKC,YACdvB,SAAU4B,EAAEC,YAAc,SAAW,KACrC5F,IAAK2F,EAAExD,GACP8B,QAAS,CACP,kBAAC,IAAD,CACEtE,QAASkD,gBACDuC,YAAI,oBAAoBO,EAAExD,IAChCQ,EAAO+C,EAASxC,OAAOqC,GAAKA,EAAEpD,KAAOwD,EAAExD,MAEzCgC,cAAeqB,IACfzF,KAAK,0BACLC,IAAI,kB,wBCrBP6F,MATI,EAAG3F,YACpB,kBAAC,IAAD,CACE4F,SAAS,0BAGTC,cAAe7F,I,YCAnB,MAAM8F,EAAqBzB,GACDA,EAAWrB,OACjCsB,IAAcA,EAAUC,mBAiEbwB,MA5DI,EAAG/G,qBACpB,MAAM,EAACyF,EAAD,EAAQC,GAAYrE,mBAAS,KAE3BkC,KAAM8B,EAAR,OAAoB5B,GAAWC,YACnC,sCAAwC1D,EAAeiD,GACvD,CAAE0C,gBAAiB,MAGrB,OAAmB,OAAfN,EAA4B,qCAG9B,6BACE,kDACA,0BACEO,SAAUjC,UACRlB,EAAEoD,iBACFH,EAAS,IACT,MAAQnC,KAAMuC,SAAuBjC,YAAK,sBAAuB,CAC/DkC,cAAeN,EACfO,WAAYhG,EAAeiD,GAC3BsC,mBAAmB,IAErB9B,EAAO,GAAD,mBAAK4B,GAAL,CAAiBS,OAGzB,2BAAOvD,MAAOkD,EAAOjD,SAAUC,GAAKiD,EAASjD,EAAEC,OAAOH,UAExD,6BACE,kBAAC,IAAD,KACE,yDACE8C,EAAayB,EAAmBzB,GAAYY,OAAS,MAI3D,kBAAC,IAAD,KACGZ,GACCyB,EAAmBzB,GAAY7D,IAAI8D,GACjC,kBAAC,IAAD,CACEV,MAAOU,EAAUa,KAAKC,YACtBtF,IAAKwE,EAAUrC,GACf8B,QAAS,CACP,kBAAC,IAAD,CACEtE,QAASkD,gBACDuC,YAAI,sBAAsBZ,EAAUrC,GAAM,CAC9C+C,WAAYhG,EAAeiD,KAE7BQ,EAAO4B,EAAWrB,OAAOqC,GAAKA,EAAEpD,KAAOqC,EAAUrC,MAEnDgC,cAAeqB,IACfzF,KAAK,eACLC,IAAI,kBCoCPkG,UArFS,EAAGC,aAAerC,aACxC,MAAM,EAAC5E,EAAD,EAAiBkH,GAAqB7F,mBAAS,OAC7CkC,KAAM4D,EAAR,OAA2B1D,GAAWC,YAAO,4BAC5CQ,GAAmBC,YAASwC,GAC7BrC,EAAaC,cAkBb6C,EAAWD,EAAoB,YAAIA,GAAmBE,UAAY,KAWxE,OARA3C,oBACE,KACM1E,GACFkH,EAAkBE,EAASE,KAAKC,GAAKA,EAAEtE,KAAOjD,EAAeiD,MAEjE,CAACmE,IAID,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUI,WAAS,GACjB,kBAAC,IAAD,CACE5C,MAAOA,EACP6C,OAAQzH,EACR0H,UAAWR,EACXS,QAASP,EACTQ,MAAM,OACNC,OAAQ,KACN3D,EAAgB,YAAa,CAC3BlD,OAAQ2C,eAvCPA,WACb,MAAQJ,KAAMuE,SAAqBjE,YAAK,0BAA2BN,GACnEE,EAAO,GAAD,mBAAK0D,GAAL,CAAwBW,MAsCV9G,CAAOuC,GACbe,QAINyD,YAAY,YACZC,eAAe,mCAGlBhI,GACC,oCACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CACEA,eAAgBA,EAChBC,YAjDM0D,UAClB,MAAQJ,KAAM0E,SAAyBC,YAAM,0BACjBlI,EAAeiD,GADC,IAE1CM,GAEFE,EAAO,GAAD,mBACD0D,EAAkBnD,OAAOX,GAAWA,EAAQJ,KAAOjD,EAAeiD,KADjE,CAEJgF,SA6CM,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAWjI,eAAgBA,KAE7B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAiBmI,MAAOnI,KAE1B,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAgBA,eAAgBA,KAElC,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAYA,eAAgBA,KAE9B,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAcqD,QAASrD,U,kCC5FrC,wGAQA,MAAMoI,EAAe,EAAGvH,OAAMwH,WAAUC,gBACtC,MAAMC,EAAQhE,cACd,OACE,yBAAKiE,UAAWpI,IAAMqI,cACpB,2BAAI5H,GACJ,kBAAC,IAAD,CACEJ,QAAS,KACP6H,IACAC,MAHJ,OAQA,kBAAC,IAAD,CACE9H,QAAS,KACP4H,IACAE,MAHJ,QAwBS,SAAS9D,IACtB,MAAOiE,EAAWC,GAAUxE,YAASiE,GAMrC,MAAO,CAJM,CAACvH,EAAMwH,EAAUC,KAC5BI,EAAU,GAAI,CAAE7H,OAAMwH,WAAUC,eAGpBK,GAbhBP,EAAaQ,aAAe,CAC1B/H,KAAM,eACNwH,SAAU,OACVC,UAAW,S,uHCoBEO,IAvDS,EAAGV,YACzB,MAAM,EAAC1C,EAAD,EAAQC,GAAYrE,mBAAS,KAE3BkC,KAAMuF,EAAR,OAAqBrF,GAAWC,YAAO,kCACTyE,EAAMlF,IAc1C,OACE,6BACE,0CACA,0BACE2C,SAAUnD,IACRA,EAAEoD,iBACFH,EAAS,IAjBF/B,WACb,MAAQJ,KAAMwF,SAAwBlF,YAAK,wBAAyBN,GACpEE,EAAO,GAAD,mBAAKqF,GAAL,CAAkBC,MAiBlB/H,CAAO,CACL+E,cAAeN,EACfuD,SAAUb,EAAMlF,OAIpB,2BAAOV,MAAOkD,EAAOjD,SAAUC,GAAKiD,EAASjD,EAAEC,OAAOH,UAExD,kBAAC,IAAD,KACGuG,GACCA,EAAYtH,IAAIyH,GACd,kBAAC,IAAD,CACErE,MAAOqE,EAAW9C,KAAKC,YACvBtF,IAAKmI,EAAWhG,GAChB8B,QAAS,CACP,kBAAC,IAAD,CACEtE,QAAS,IA7BTkD,iBACRuC,YAAI,wBAAwBjD,EAAzB,KACTQ,EAAOqF,EAAY9E,OAAOkF,GAAKA,EAAEjG,KAAOA,KA2BXkG,CAAQF,EAAWhG,IAClCgC,cAAeqB,IACfzF,KAAK,mBACLC,IAAI,mB,kCCpDtB,qCAgEeuD,IA7DG,EAAGrE,iBAAgBgF,aACnC,MAAM,KAAEzB,GAASG,YAAO,IAAMsB,GAAM,uBAA2BA,EAA3B,KAE9BoE,GAAW7F,EACbA,EAAKjC,aAAaE,IAAIC,GAAOA,EAAI4H,WACjC,IACFC,OAAO,CAACC,EAAGC,IAAMD,EAAIC,EAAG,GAEpBC,EAAkBlG,EAAOA,EAAKmG,iBAAmB,IAE/CnG,KAAMoG,GAAajG,YAAO,iCACC1D,EAAeiD,IAG5C2G,EAAWD,EAAS3F,OAAOW,GAAQA,EAAK1B,KAAO+B,GAAQ,GACvD6E,EAAgBD,EAAS7H,sCACzB+H,EAAgBF,EAAS1H,sCAE/B,OACE,6BACG4H,EAAgBD,GACf,2BACGC,EADH,IACmBD,EADnB,mCAMDC,IAAkBD,GACjB,2BACGA,EADH,mCAMF,4BACGtG,GACCA,EAAKjC,aAAaE,IAAIC,GACpB,wBAAIX,IAAKW,EAAIZ,MACPY,EAAIZ,KADV,KACmBY,EAAI4H,UACpBD,EAAO,MAEF3H,EAAI4H,UACAU,KAAKC,MAAO,IAAOvI,EAAI4H,UAAaD,GAAW,GAC/C,GAJF,KAMJ,MAIZ,2BACG,yBACAA,GAEH,2BACG,8BACAK,M,qBCzDTQ,EAAOC,QAAU,CAAC,MAAQ,4BAA4B,aAAe,mCAAmC,SAAW,iC,wGC6DpGC,MAzDG,EAChB5H,QACAC,WACAO,OACA6E,QACAwC,WACAC,YACAC,YACAC,aACAC,iBAEA,MAAMC,EAAShI,IACbD,EAASC,EAAEC,OAAOH,QAGdf,EAAM,CACVkJ,SAAU,kBAAC,IAAD,CAAgBnI,MAAOA,EAAOC,SAAUA,IAClDmI,KAAM,2BAAO5H,KAAK,OAAOR,MAAOA,EAAOC,SAAUiI,IACjDG,QACE,2BACE7H,KAAK,WACLC,QAAST,EACTC,SAAUC,IACRD,EAASC,EAAEC,OAAOM,YAIxB6H,QACE,2BACE9H,KAAK,SACLR,MAAOA,EACPC,SAAUiI,EACVK,IAAKR,EACLS,IAAKV,KAKLW,EAAYC,OAAOC,UAAUC,eAAeC,KAAK5J,EAAKuB,GAC1DvB,EAAIuB,GAEJ,2BACER,MAAOA,EACPC,SAAUiI,EACVY,UAAWb,EACXc,UAAWf,IAIf,OACE,2BAAO/B,UAAWpI,IAAMwH,OAAxB,GACMA,EACHwC,GAAY,0BAAM5B,UAAWpI,IAAMgK,UAAvB,KACb,yBAAK5B,UAAWpI,IAAMmL,cAAeP,K,YCpD3C,MAAMQ,EAAW,EAAG5E,WAAU6E,SAAQ5E,gBAAejB,WAAU8F,eAC7D,MAAM,EAACC,EAAD,EAASC,GAAavK,sBACtB,EAACwK,EAAD,EAASC,GAAazK,mBAASqK,IAC/B,EAACK,EAAD,EAASC,GAAa3K,mBAAS,IA4BrC,OAlBAqD,oBAAU,KAERuH,YAAQrF,GACLsF,KAAKC,IACJ,MAAMC,EAAMD,EAAI5I,KAAK8I,QAAQC,KAOvBC,EAJatB,OAAOuB,KAAKJ,GAAK5K,IAAIV,IAAG,CACzCA,SACGsL,EAAItL,MAEmBkD,OAAOyI,IAAMA,EAAEC,WAE3Cd,EAAUW,KAEXI,MAAMC,QACRhG,GAGD,0BACEhB,SAAUnD,IACRA,EAAEoD,iBACFD,IACIiB,EACFA,EAAcgF,GAAQc,MAAMC,IACtBA,EAAIC,UACNb,EAAUY,EAAIC,SAAStJ,QAI3BuJ,YAAQ,CAAElG,WAAU6E,SAAQlI,KAAMsI,MAIrCF,GACCA,EAAOnK,IAAIuL,GACT,kBAAC,IAAMC,SAAP,CAAgBlM,IAAKiM,EAAMjM,KACzB,kBAAC,EAAD,iBACMiM,EADN,CAEEvK,SAAUyK,IA/CL,EAACF,EAAOxK,KACvBuJ,EAAUoB,IAAG,IAAUA,EAAK,CAACH,GAAQxK,MA+CzB4K,CAASJ,EAAMjM,IAAKmM,IAEtB1K,MAAOsJ,EAAOkB,EAAMjM,QAErBmK,OAAOC,UAAUC,eAAeC,KAAKW,EAAQgB,EAAMjM,MAClD,6BAAMiL,EAAOgB,EAAMjM,KAAKsM,KAAK,SAIrC,kBAAC,IAAD,CAAQrK,KAAK,SAAStC,QAAS,QAA/B,YAON+K,EAAS5C,aAAe,CACtB6C,OAAQ,OACR5E,cAAe,KACfjB,SAAU,OACV8F,SAAU,IAWGF","file":"component---src-components-voting-admin-page-js-dcd644f339715966ae45.js","sourcesContent":["import React from 'react'\nimport { ButtonGroup, Button } from '../ui/buttons'\nimport { patch } from '../request'\n\nconst MeetingPanel = ({ currentMeeting, updatePatch }) => (\n  <div>\n    <h2>Mötesinfo</h2>\n    <h3>{currentMeeting.name}</h3>\n    {currentMeeting.description && (\n      <p style={{ whiteSpace: 'pre-line' }}>{currentMeeting.description}</p>\n    )}\n    <h3>Detaljer</h3>\n    <ul>\n      <li>\n        {currentMeeting.enable_speaker_requests\n          ? 'Talarlista aktiverad'\n          : 'Talarlista inaktiverad'}\n      </li>\n      <li>\n        {currentMeeting.open_attendance\n          ? 'Öppen incheckning'\n          : 'Stängd incheckning'}\n      </li>\n      <li>{`Mötesdata rensas: ${currentMeeting.clear_data}`}</li>\n    </ul>\n    <ButtonGroup>\n      <Button\n        onClick={() =>\n          updatePatch({\n            enable_speaker_requests: !currentMeeting.enable_speaker_requests,\n          })\n        }\n      >\n        {currentMeeting.enable_speaker_requests\n          ? 'Inaktivera talarlista'\n          : 'Aktivera talarlista'}\n      </Button>\n      <Button\n        onClick={() =>\n          updatePatch({\n            open_attendance: !currentMeeting.open_attendance,\n          })\n        }\n      >\n        {currentMeeting.open_attendance\n          ? 'Stäng självincheckning'\n          : 'Öppna självincheckning'}\n      </Button>\n    </ButtonGroup>\n  </div>\n)\n\nexport default MeetingPanel\n","import React, { useState, useEffect } from 'react'\n\nlet currentKey = 0\n// creates an alternative with an unique key, do not manually create alternative objects\n// the key does not match the id later given by the server.\nconst createAlternative = (existingData = {}) => {\n  currentKey += 1\n  return { text: '', ...existingData, key: currentKey }\n}\n\nconst AddVote = ({ currentMeeting, create, updateData, update }) => {\n  const [question, setQuestion] = useState(\n    updateData ? updateData.question : ''\n  )\n  const [alternatives, setAlternatives] = useState(\n    updateData\n      ? updateData.alternatives.map(alt => createAlternative(alt))\n      : [createAlternative(), createAlternative()]\n  )\n  const [currentQuestion, setCurrentQuestion] = useState(\n    updateData ? updateData.open : true\n  )\n\n  const [multiChoiceQuestion, setMultiChoiceQuestion] = useState(\n    updateData ? updateData.max_number_of_selectable_alternatives > 1 : false\n  )\n  const [exactAmountOfAlternatives, setExactAmountOfAlternatives] = useState(\n    updateData\n      ? updateData.min_number_of_selectable_alternatives ===\n          updateData.max_number_of_selectable_alternatives\n      : false\n  )\n  const [userOptionMinAmount, setUserOptionMinAmount] = useState(\n    updateData ? updateData.min_number_of_selectable_alternatives : 1\n  )\n  const [userOptionMaxAmount, setUserOptionMaxAmount] = useState(\n    updateData ? updateData.max_number_of_selectable_alternatives : 1\n  )\n\n  return (\n    <div>\n      <label>\n        Fråga\n        <input\n          value={question}\n          onChange={e => {\n            setQuestion(e.target.value)\n          }}\n        />\n      </label>\n      <hr />\n      <ul>\n        {alternatives.map((alt, i) => (\n          <li key={alt.key}>\n            <input\n              value={alt.text}\n              onChange={e => {\n                const newVal = e.target.value\n                setAlternatives(prev => [\n                  ...prev.slice(0, i),\n                  { ...prev[i], text: newVal },\n                  ...prev.slice(i + 1),\n                ])\n              }}\n            />\n            <button\n              type=\"button\"\n              onClick={() => {\n                setAlternatives(prev => [\n                  ...prev.slice(0, i),\n                  ...prev.slice(i + 1),\n                ])\n              }}\n            >\n              X\n            </button>\n          </li>\n        ))}\n      </ul>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setAlternatives(prev => [...prev, createAlternative()])\n        }}\n      >\n        Lägg till alternativ\n      </button>\n      <hr />\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={currentQuestion}\n          onChange={() => setCurrentQuestion(prev => !prev)}\n        />\n        Nuvarande frågan\n      </label>\n      <hr />\n\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={multiChoiceQuestion}\n          onChange={() => {\n            setMultiChoiceQuestion(prev => !prev)\n            setUserOptionMinAmount(1)\n            setUserOptionMaxAmount(1)\n          }}\n        />\n        Flervalsfråga\n      </label>\n\n      <hr />\n\n      {multiChoiceQuestion && (\n        <>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={exactAmountOfAlternatives}\n              onChange={() => {\n                setExactAmountOfAlternatives(prev => !prev)\n                setUserOptionMinAmount(1)\n                setUserOptionMaxAmount(1)\n              }}\n            />\n            Ett exakt antal valbara alternativ\n          </label>\n\n          <hr />\n        </>\n      )}\n\n      {multiChoiceQuestion && exactAmountOfAlternatives && (\n        <>\n          <label>\n            Antal alternativ som\n            <br />\n            ska väljas av deltagarna:\n            <br />\n          </label>\n          <select\n            name=\"min-svar\"\n            id=\"min-svar\"\n            onChange={e => {\n              setUserOptionMinAmount(Number(e.target.value))\n              setUserOptionMaxAmount(Number(e.target.value))\n            }}\n            defaultValue={userOptionMaxAmount}\n          >\n            {alternatives.map((alt, i) => (\n              <option key={i + 1} value={i + 1}>\n                {i + 1}\n              </option>\n            ))}\n          </select>\n\n          <br />\n        </>\n      )}\n\n      {multiChoiceQuestion && !exactAmountOfAlternatives && (\n        <>\n          <label>\n            Minsta antal alternativ som\n            <br />\n            kan väljas av deltagarna:\n            <br />\n          </label>\n          <select\n            name=\"min-svar\"\n            id=\"min-svar\"\n            onChange={e => setUserOptionMinAmount(Number(e.target.value))}\n            defaultValue={userOptionMinAmount}\n          >\n            {alternatives.map((alt, i) => (\n              <option key={i + 1} value={i + 1}>\n                {i + 1}\n              </option>\n            ))}\n          </select>\n\n          <br />\n\n          <label>\n            Högsta antal:\n            <br />\n          </label>\n          <select\n            name=\"max-svar\"\n            id=\"max-svar\"\n            onChange={e => setUserOptionMaxAmount(Number(e.target.value))}\n            defaultValue={userOptionMaxAmount}\n          >\n            {alternatives.map((alt, i) => (\n              <option key={i + 1} value={i + 1}>\n                {i + 1}\n              </option>\n            ))}\n          </select>\n        </>\n      )}\n\n      <br />\n\n      {multiChoiceQuestion &&\n        !exactAmountOfAlternatives &&\n        userOptionMinAmount > userOptionMaxAmount && (\n          <p>\n            Du måste välja ett\n            <br />\n            &#39;högsta antal&#39; större än\n            <br />\n            eller lika med\n            <br />\n            &#39;minsta antal&#39;\n          </p>\n        )}\n\n      <button\n        type=\"button\"\n        disabled={\n          multiChoiceQuestion && userOptionMinAmount > userOptionMaxAmount\n        }\n        onClick={() => {\n          if (updateData) {\n            update(updateData.id, {\n              question,\n              open: currentQuestion,\n              alternatives,\n              meeting: currentMeeting.id,\n              min_number_of_selectable_alternatives: multiChoiceQuestion\n                ? userOptionMinAmount\n                : 1,\n              max_number_of_selectable_alternatives: multiChoiceQuestion\n                ? userOptionMaxAmount\n                : 1,\n            })\n          } else {\n            create({\n              question,\n              open: currentQuestion,\n              alternatives,\n              meeting: currentMeeting.id,\n              min_number_of_selectable_alternatives: multiChoiceQuestion\n                ? userOptionMinAmount\n                : 1,\n              max_number_of_selectable_alternatives: multiChoiceQuestion\n                ? userOptionMaxAmount\n                : 1,\n            })\n          }\n        }}\n      >\n        {updateData ? 'Uppdatera omröstning' : 'Skapa ny omröstning'}\n      </button>\n    </div>\n  )\n}\n\nexport default AddVote\n","import React, { useEffect } from 'react'\nimport useSWR from 'swr'\nimport { FiBarChart2, FiEdit2 } from 'react-icons/fi'\n\nimport useModal, { useCloseModal } from '../modal/useModal'\nimport useConfirmModal from '../modal/useConfirmModal'\nimport AddVote from './addVote'\nimport VoteStats from './voteStats'\nimport { List, ListItem, ListButton } from '../ui/list'\nimport { Button } from '../ui/buttons'\nimport { post, put } from '../request'\n\nconst VotePanel = ({ currentMeeting }) => {\n  const { data: votes, mutate } = useSWR(\n    `/voting/admin-votes/?event_id=${currentMeeting.id}`\n  )\n\n  const create = async data => {\n    const { data: newVote } = await post('/voting/admin-votes/', data)\n    mutate([...votes, newVote])\n    return newVote\n  }\n\n  const update = async (id, data) => {\n    const { data: updatedVote } = await put(`/voting/admin-votes/${id}/`, data)\n    mutate([...votes.filter(v => v.id !== id), updatedVote])\n    return updatedVote\n  }\n\n  const open = async vote => {\n    await closeModal()\n    openChartModal(`Resultat av \"${vote.question}\"`, {\n      currentMeeting,\n      voteId: vote.id,\n    })\n  }\n\n  const [openCreateModal] = useModal(AddVote)\n  const [openChartModal] = useModal(VoteStats)\n  const closeModal = useCloseModal()\n  const [confirmModal] = useConfirmModal()\n\n  // Close modal when a vote is created\n  useEffect(closeModal, [votes])\n\n  // if (votes === null) return <></>\n\n  return (\n    <div>\n      <h2>Omröstningar</h2>\n      <Button\n        onClick={() =>\n          openCreateModal('Ny omröstning', {\n            currentMeeting,\n            create,\n          })\n        }\n      >\n        Ny omröstning\n      </Button>\n      <List>\n        {votes &&\n          votes\n            .filter(vote => vote.meeting === currentMeeting.id)\n            .map(vote => (\n              <ListItem\n                title={vote.question}\n                subtitle={vote.open ? 'Active' : undefined}\n                key={vote.id}\n                buttons={[\n                  <ListButton\n                    onClick={() =>\n                      confirmModal(\n                        `Vill du se resultatet?`,\n                        () => {\n                          open(vote)\n                        },\n                        closeModal\n                      )\n                    }\n                    iconComponent={FiBarChart2}\n                    text=\"Resultat\"\n                    key=\"results\"\n                  />,\n                  <ListButton\n                    onClick={() =>\n                      openCreateModal(`Uppdatera \"${vote.question}\"`, {\n                        currentMeeting,\n                        update,\n                        updateData: vote,\n                      })\n                    }\n                    iconComponent={FiEdit2}\n                    text=\"Uppdatera omröstning\"\n                    key=\"update\"\n                  />,\n                ]}\n              />\n            ))}\n      </List>\n    </div>\n  )\n}\n\nexport default VotePanel\n","import React, { useState, useEffect } from 'react'\nimport { FiTrash2 } from 'react-icons/fi'\n\nimport { List, ListButton, ListItem } from '../ui/list'\nimport { Button, ButtonGroup } from '../ui/buttons'\nimport { del, post } from '../request'\nimport useSWR from 'swr'\n\nconst getMemberAttendants = attendants => {\n  const memberAttendants = attendants.filter(\n    attendant => attendant.has_voting_rights\n  )\n  return memberAttendants\n}\n\nconst AttendantPanel = ({ currentMeeting }) => {\n  const [input, setInput] = useState('')\n\n  const { data: attendants, mutate } = useSWR(\n    () => `/voting/attendants/?meeting_id=${currentMeeting.id}`,\n    { refreshInterval: 4000 }\n  )\n\n  if (attendants === null) return <></>\n\n  return (\n    <div>\n      <h2>Deltagare</h2>\n      <form\n        onSubmit={async e => {\n          e.preventDefault()\n          setInput('')\n          const { data: newAttendant } = await post('/voting/attendants/', {\n            user_username: input,\n            meeting_id: currentMeeting.id,\n            has_voting_rights: true,\n          })\n          mutate([...attendants, newAttendant])\n        }}\n      >\n        <input value={input} onChange={e => setInput(e.target.value)} />\n      </form>\n      <div>\n        <ButtonGroup>\n          <p>{`Röstlängd: ${\n            attendants ? getMemberAttendants(attendants).length : 0\n          }`}</p>\n          <Button\n            onClick={async () => {\n              // TODO: fix this ugly solution\n              await del(\n                `/voting/attendants/clear/?meeting_id=${currentMeeting.id}`\n              )\n\n              mutate([])\n            }}\n          >\n            Återställ deltagarlista\n          </Button>\n        </ButtonGroup>\n      </div>\n      <List>\n        {attendants &&\n          getMemberAttendants(attendants).map(attendant => (\n            <ListItem\n              title={attendant.user.pretty_name}\n              key={attendant.id}\n              buttons={[\n                <ListButton\n                  onClick={async () => {\n                    await del(`/voting/attendants/${attendant.id}`, {\n                      meeting_id: currentMeeting.id,\n                    })\n                    mutate(attendants.filter(x => x.id !== attendant.id))\n                  }}\n                  iconComponent={FiTrash2}\n                  text=\"Ta bort deltagare\"\n                  key=\"remove\"\n                />,\n              ]}\n            />\n          ))}\n      </List>\n    </div>\n  )\n}\n\nexport default AttendantPanel\n","import React, { useState, useEffect, useContext } from 'react'\nimport useSWR from 'swr'\n\nimport { FiTrash2 } from 'react-icons/fi'\nimport { List, ListButton, ListItem } from '../ui/list'\nimport { Button } from '../ui/buttons'\nimport { UserContext } from '../layout/layout'\nimport { post, del } from '../request'\n\nconst SpeakerPanel = ({ meeting }) => {\n  const { data: speakers, mutate } = useSWR(\n    () => meeting && `/voting/speakers/?meeting_id=${meeting.id}`,\n    { refreshInterval: 4000 }\n  )\n\n  return (\n    <div>\n      <h2>Talarlista</h2>\n      <List>\n        {speakers &&\n          speakers.map(s => (\n            <ListItem\n              title={s.user.pretty_name}\n              subtitle={s.prioritized ? 'Replik' : null}\n              key={s.id}\n              buttons={[\n                <ListButton\n                  onClick={async () => {\n                    await del(`/voting/speakers/${s.id}`)\n                    mutate(speakers.filter(x => x.id !== s.id))\n                  }}\n                  iconComponent={FiTrash2}\n                  text=\"Ta bort från talarlista\"\n                  key=\"remove\"\n                />,\n              ]}\n            />\n          ))}\n      </List>\n    </div>\n  )\n}\n\nexport default SpeakerPanel\n","import React from 'react'\nimport AutoForm from '../form/form'\n\nconst AddMeeting = ({ create }) => (\n  <AutoForm\n    endpoint=\"/voting/admin-meetings/\" // onSubmit={() => {\n    //   setNewMeetingName('')\n    // }}\n    customFetcher={create}\n  />\n)\n\nexport default AddMeeting\n","import React, { useState, useEffect } from 'react'\nimport { FiTrash2 } from 'react-icons/fi'\n\nimport { List, ListButton, ListItem } from '../ui/list'\nimport { Button, ButtonGroup } from '../ui/buttons'\nimport { del, post } from '../request'\nimport useSWR from 'swr'\n\nconst getGuestAttendants = attendants => {\n  const guestAttendants = attendants.filter(\n    attendant => !attendant.has_voting_rights\n  )\n  return guestAttendants\n}\n\nconst GuestPanel = ({ currentMeeting }) => {\n  const [input, setInput] = useState('')\n\n  const { data: attendants, mutate } = useSWR(\n    () => `/voting/attendants/?meeting_id=${currentMeeting.id}`,\n    { refreshInterval: 4000 }\n  )\n\n  if (attendants === null) return <></>\n\n  return (\n    <div>\n      <h2>Gäster/adjungerade</h2>\n      <form\n        onSubmit={async e => {\n          e.preventDefault()\n          setInput('')\n          const { data: newAttendant } = await post('/voting/attendants/', {\n            user_username: input,\n            meeting_id: currentMeeting.id,\n            has_voting_rights: false,\n          })\n          mutate([...attendants, newAttendant])\n        }}\n      >\n        <input value={input} onChange={e => setInput(e.target.value)} />\n      </form>\n      <div>\n        <ButtonGroup>\n          <p>{`Antal gäster/adjungerade: ${\n            attendants ? getGuestAttendants(attendants).length : 0\n          }`}</p>\n        </ButtonGroup>\n      </div>\n      <List>\n        {attendants &&\n          getGuestAttendants(attendants).map(attendant => (\n            <ListItem\n              title={attendant.user.pretty_name}\n              key={attendant.id}\n              buttons={[\n                <ListButton\n                  onClick={async () => {\n                    await del(`/voting/attendants/${attendant.id}`, {\n                      meeting_id: currentMeeting.id,\n                    })\n                    mutate(attendants.filter(x => x.id !== attendant.id))\n                  }}\n                  iconComponent={FiTrash2}\n                  text=\"Ta bort gäst\"\n                  key=\"remove\"\n                />,\n              ]}\n            />\n          ))}\n      </List>\n    </div>\n  )\n}\n\nexport default GuestPanel\n","import React, { useState, useEffect } from 'react'\nimport useSWR from 'swr'\n\nimport MeetingPanel from './meetingPanel'\nimport DoorkeeperPanel from '../checkin/doorkeeperPanel'\nimport VotePanel from './votePanel'\nimport AttendantPanel from './attendantPanel'\nimport { GridContainer, GridItem } from '../ui/grid'\nimport SpeakerPanel from './speakerPanel'\nimport TitleChooser from '../ui/titleChooser'\nimport AddMeeting from './addMeeting'\nimport useModal, { useCloseModal } from '../modal/useModal'\nimport { post, patch } from '../request'\nimport BigPixels from '../layout/bigPixels'\nimport GuestPanel from './guestPanel'\n\nconst VotingAdminPage = ({ pageContext: { title } }) => {\n  const [currentMeeting, setCurrentMeeting] = useState(null)\n  const { data: unorderedMeetings, mutate } = useSWR('/voting/admin-meetings/')\n  const [openCreateModal] = useModal(AddMeeting)\n  const closeModal = useCloseModal()\n\n  const create = async data => {\n    const { data: newMeeting } = await post('/voting/admin-meetings/', data)\n    mutate([...unorderedMeetings, newMeeting])\n  }\n\n  const updatePatch = async data => {\n    const { data: updatedMeeting } = await patch(\n      `/voting/admin-meetings/${currentMeeting.id}/`,\n      data\n    )\n    mutate([\n      ...unorderedMeetings.filter(meeting => meeting.id !== currentMeeting.id),\n      updatedMeeting,\n    ])\n  }\n\n  const meetings = unorderedMeetings ? [...unorderedMeetings].reverse() : null\n\n  // sync currentMeeting with updated meetings\n  useEffect(\n    () => {\n      if (currentMeeting)\n        setCurrentMeeting(meetings.find(m => m.id === currentMeeting.id))\n    },\n    [meetings]\n  )\n\n  return (\n    <BigPixels>\n      <GridContainer>\n        <GridItem fullWidth>\n          <TitleChooser\n            title={title}\n            choice={currentMeeting}\n            setChoice={setCurrentMeeting}\n            choices={meetings}\n            label=\"name\"\n            action={() => {\n              openCreateModal('Nytt möte', {\n                create: async data => {\n                  await create(data)\n                  closeModal()\n                },\n              })\n            }}\n            actionLabel=\"Nytt möte\"\n            noChoicesLabel=\"Det finns inga möten just nu.\"\n          />\n        </GridItem>\n        {currentMeeting && (\n          <>\n            <GridItem>\n              <MeetingPanel\n                currentMeeting={currentMeeting}\n                updatePatch={updatePatch}\n              />\n            </GridItem>\n            <GridItem>\n              <VotePanel currentMeeting={currentMeeting} />\n            </GridItem>\n            <GridItem>\n              <DoorkeeperPanel event={currentMeeting} />\n            </GridItem>\n            <GridItem>\n              <AttendantPanel currentMeeting={currentMeeting} />\n            </GridItem>\n            <GridItem>\n              <GuestPanel currentMeeting={currentMeeting} />\n            </GridItem>\n            <GridItem>\n              <SpeakerPanel meeting={currentMeeting} />\n            </GridItem>\n          </>\n        )}\n      </GridContainer>\n    </BigPixels>\n  )\n}\n\nexport default VotingAdminPage\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport useModal, { useCloseModal } from './useModal'\nimport { Button } from '../ui/buttons'\n\nimport style from '../../scss/modal.module.scss'\n\nconst Confirmation = ({ text, onAccept, onDecline }) => {\n  const close = useCloseModal()\n  return (\n    <div className={style.confirmation}>\n      <p>{text}</p>\n      <Button\n        onClick={() => {\n          onDecline()\n          close()\n        }}\n      >\n        Nej\n      </Button>\n      <Button\n        onClick={() => {\n          onAccept()\n          close()\n        }}\n      >\n        Ja\n      </Button>\n    </div>\n  )\n}\n\nConfirmation.propTypes = {\n  text: PropTypes.string,\n  onAccept: PropTypes.func,\n  onDecline: PropTypes.func,\n}\n\nConfirmation.defaultProps = {\n  text: 'Är du säker?',\n  onAccept: () => {},\n  onDecline: () => {},\n}\n\nexport default function useConfirmModal() {\n  const [openModal, isOpen] = useModal(Confirmation)\n\n  const open = (text, onAccept, onDecline) => {\n    openModal('', { text, onAccept, onDecline })\n  }\n\n  return [open, isOpen]\n}\n","import React, { useState, useEffect } from 'react'\n\nimport { FiTrash2 } from 'react-icons/fi'\nimport { List, ListItem, ListButton } from '../ui/list'\nimport useSWR from 'swr'\nimport { post, del } from '../request'\n\nconst DoorkeeperPanel = ({ event }) => {\n  const [input, setInput] = useState('')\n\n  const { data: doorkeepers, mutate } = useSWR(\n    `/checkin/doorkeepers/?event_id=${event.id}`\n  )\n\n  const create = async data => {\n    const { data: newDoorkeeper } = await post('/checkin/doorkeepers/', data)\n    mutate([...doorkeepers, newDoorkeeper])\n    return newDoorkeeper\n  }\n\n  const destroy = async id => {\n    await del(`/checkin/doorkeepers/${id}/`)\n    mutate(doorkeepers.filter(d => d.id !== id))\n  }\n\n  return (\n    <div>\n      <h2>Dörrvakter</h2>\n      <form\n        onSubmit={e => {\n          e.preventDefault()\n          setInput('')\n\n          create({\n            user_username: input,\n            event_id: event.id,\n          })\n        }}\n      >\n        <input value={input} onChange={e => setInput(e.target.value)} />\n      </form>\n      <List>\n        {doorkeepers &&\n          doorkeepers.map(doorkeeper => (\n            <ListItem\n              title={doorkeeper.user.pretty_name}\n              key={doorkeeper.id}\n              buttons={[\n                <ListButton\n                  onClick={() => destroy(doorkeeper.id)}\n                  iconComponent={FiTrash2}\n                  text=\"Ta bort dörrvakt\"\n                  key=\"remove\"\n                />,\n              ]}\n            />\n          ))}\n      </List>\n    </div>\n  )\n}\n\nexport default DoorkeeperPanel\n","import React, { useRef, useEffect } from 'react'\nimport useSWR from 'swr'\n\nconst VoteStats = ({ currentMeeting, voteId }) => {\n  const { data } = useSWR(() => voteId && `/voting/admin-votes/${voteId}/`)\n\n  const voteSum = (data\n    ? data.alternatives.map(alt => alt.num_votes)\n    : []\n  ).reduce((a, b) => a + b, 0)\n\n  const attendantsVoted = data ? data.attendants_voted : ''\n\n  const { data: allVotes } = useSWR(\n    `/voting/admin-votes/?event_id=${currentMeeting.id}`\n  )\n\n  const thisVote = allVotes.filter(vote => vote.id === voteId)[0]\n  const maxSelectable = thisVote.max_number_of_selectable_alternatives\n  const minSelectable = thisVote.min_number_of_selectable_alternatives\n\n  return (\n    <div>\n      {minSelectable < maxSelectable && (\n        <p>\n          {minSelectable}-{maxSelectable}\n          &nbsp;alternativ väljs av deltagarna\n        </p>\n      )}\n\n      {minSelectable === maxSelectable && (\n        <p>\n          {maxSelectable}\n          &nbsp;alternativ väljs av deltagarna\n        </p>\n      )}\n\n      <ul>\n        {data &&\n          data.alternatives.map(alt => (\n            <li key={alt.text}>\n              {`${alt.text}: ${alt.num_votes}`}\n              {voteSum\n                ? ` (${\n                    alt.num_votes\n                      ? Math.round((1000 * alt.num_votes) / voteSum) / 10\n                      : 0\n                  }%)`\n                : ''}\n            </li>\n          ))}\n      </ul>\n      <p>\n        {'Summa av alla röster: '}\n        {voteSum}\n      </p>\n      <p>\n        {'Antal personer som röstat: '}\n        {attendantsVoted}\n      </p>\n    </div>\n  )\n}\n\nexport default VoteStats\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"form-module--label--1j4rO\",\"inputWrapper\":\"form-module--inputWrapper--tEZjQ\",\"required\":\"form-module--required--1ei65\"};","import React, { useState, useEffect } from 'react'\nimport DateTimePicker from './dateTimePicker'\n\nimport style from '../../scss/form.module.scss'\n\nconst AutoInput = ({\n  value,\n  onChange,\n  type,\n  label,\n  required,\n  min_value,\n  max_value,\n  min_length,\n  max_length,\n}) => {\n  const change = e => {\n    onChange(e.target.value)\n  }\n\n  const map = {\n    datetime: <DateTimePicker value={value} onChange={onChange} />,\n    date: <input type=\"date\" value={value} onChange={change} />,\n    boolean: (\n      <input\n        type=\"checkbox\"\n        checked={value}\n        onChange={e => {\n          onChange(e.target.checked)\n        }}\n      />\n    ),\n    integer: (\n      <input\n        type=\"number\"\n        value={value}\n        onChange={change}\n        max={max_value}\n        min={min_value}\n      />\n    ),\n  }\n\n  const component = Object.prototype.hasOwnProperty.call(map, type) ? (\n    map[type]\n  ) : (\n    <input\n      value={value}\n      onChange={change}\n      maxLength={max_length}\n      minLength={min_length}\n    />\n  )\n\n  return (\n    <label className={style.label}>\n      {`${label}`}\n      {required && <span className={style.required}>*</span>}\n      <div className={style.inputWrapper}>{component}</div>\n    </label>\n  )\n}\nexport default AutoInput\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport request, { options } from '../request'\nimport AutoInput from './input'\nimport { Button } from '../ui/buttons'\n\nconst AutoForm = ({ endpoint, method, customFetcher, onSubmit, defaults }) => {\n  const [fields, setFields] = useState()\n  const [values, setValues] = useState(defaults)\n  const [errors, setErrors] = useState({})\n\n  const setValue = (field, value) => {\n    setValues(old => ({ ...old, [field]: value }))\n  }\n\n  const setError = (field, error) => {\n    setErrors(old => ({ ...old, [field]: error }))\n  }\n\n  useEffect(() => {\n    // request endpoint info from server\n    options(endpoint)\n      .then(res => {\n        const raw = res.data.actions.POST\n\n        // object to array\n        const arrayified = Object.keys(raw).map(key => ({\n          key,\n          ...raw[key],\n        }))\n        const editable = arrayified.filter(f => !f.read_only)\n\n        setFields(editable)\n      })\n      .catch(err => {})\n  }, endpoint)\n\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault()\n        onSubmit()\n        if (customFetcher) {\n          customFetcher(values).catch(err => {\n            if (err.response) {\n              setErrors(err.response.data)\n            }\n          })\n        } else {\n          request({ endpoint, method, data: values })\n        }\n      }}\n    >\n      {fields &&\n        fields.map(field => (\n          <React.Fragment key={field.key}>\n            <AutoInput\n              {...field}\n              onChange={newValue => {\n                setValue(field.key, newValue)\n              }}\n              value={values[field.key]}\n            />\n            {Object.prototype.hasOwnProperty.call(errors, field.key) && (\n              <div>{errors[field.key].join(', ')}</div>\n            )}\n          </React.Fragment>\n        ))}\n      <Button type=\"submit\" onClick={() => {}}>\n        Submit\n      </Button>\n    </form>\n  )\n}\n\nAutoForm.defaultProps = {\n  method: 'POST',\n  customFetcher: null,\n  onSubmit: () => {},\n  defaults: {},\n}\n\nAutoForm.propTypes = {\n  method: PropTypes.string,\n  endpoint: PropTypes.string.isRequired,\n  customFetcher: PropTypes.func,\n  onSubmit: PropTypes.func,\n  defaults: PropTypes.object,\n}\n\nexport default AutoForm\n"],"sourceRoot":""}