{"version":3,"sources":["webpack:///./src/components/ui/titleChooser.js","webpack:///./src/components/ui/list.js","webpack:///./src/components/votingGuest/speakerPanel.js","webpack:///./src/components/votingGuest/meetingInfoPanel.js","webpack:///./src/components/votingGuest/page.js"],"names":["TitleChooser","title","choices","categorizedChoices","choice","setChoice","label","action","actionLabel","noChoicesLabel","allChoices","Object","keys","reduce","accumulator","category","className","style","titleChooser","actions","length","selectContainer","onChange","e","selectedValue","target","value","c","filter","i","id","sort","map","key","hint","onClick","defaultProps","List","children","list","ListItem","subtitle","buttons","color","listItemColor","borderColor","listText","listButtons","ListButton","href","iconComponent","Icon","text","shown","listButton","type","SpeakerPanel","meeting","data","speakers","mutate","useSWR","user","useContext","UserContext","errorMessage","attending","enable_speaker_requests","async","newSpeaker","post","meeting_id","prioritized","s","pretty_name","prioQS","del","x","FiTrash2","MeetingInfoPanel","currentMeeting","revalidate","name","description","whiteSpace","open_attendance","VotePage","pageContext","setCurrentMeeting","useState","meetings","useEffect","find","m","fullWidth"],"mappings":"kKAKA,MAAMA,EAAe,EACnBC,QACAC,UACAC,qBACAC,SACAC,YACAC,QACAC,SACAC,cACAC,qBAEA,MAAMC,EAAU,sBACVR,GAAW,IADD,YAGXS,OAAOC,KAAKT,GAAoBU,OACjC,CAACC,EAAaC,IAAd,sBACKD,GADL,YAEKX,EAAmBY,KAExB,MAGJ,OACE,yBAAKC,UAAWC,IAAMC,cACpB,4BAAKjB,GACL,yBAAKe,UAAWC,IAAME,SACnBT,EAAWU,OACV,yBAAKJ,UAAWC,IAAMI,iBACpB,4BACEC,SAAUC,IACR,MAAMC,EAAgBD,EAAEE,OAAOC,MACzBC,EACc,KAAlBH,EACI,KACAd,EAAWkB,OAAOC,GAAK,GAAGA,EAAEC,KAASN,GAAe,GAC1DnB,EAAUsB,IAEZD,MAAOtB,EAASA,EAAO0B,GAAK,IAE5B,4BAAQJ,MAAM,KACbxB,EAAQ6B,OAAOC,IAAIL,GAClB,4BAAQD,MAAOC,EAAEG,GAAIG,IAAKN,EAAEG,IACzBH,EAAErB,KAGNK,OAAOC,KAAKT,GACV4B,OACAC,IAAIC,GACH,8BAAU3B,MAAO2B,EAAKA,IAAKA,GACxB9B,EAAmB8B,GAAKF,OAAOC,IAAIL,GAClC,4BAAQD,MAAOC,EAAEG,GAAIG,IAAKN,EAAEG,IACzBH,EAAErB,QAMH,OAAXF,GACC,yBAAKY,UAAWC,IAAMiB,MAAtB,oBAIJ,8BAAOzB,GAGRF,GAAU,kBAAC,IAAD,CAAQ4B,QAAS5B,GAASC,MAK7CR,EAAaoC,aAAe,CAC1BjC,mBAAoB,GACpBD,QAAS,GACTK,OAAQ,KACRC,YAAa,GACbJ,OAAQ,KACRK,eAAgB,GAChBJ,UAAW,OACXC,MAAO,IAeMN,O,kCClGf,oJAIA,MAAMqC,EAAO,EAAGC,cAAe,wBAAItB,UAAWC,IAAMsB,MAAOD,GAErDE,EAAW,EAAGvC,QAAOwC,WAAUC,UAASC,WAC5C,wBACE3B,UAAW2B,EAAQ1B,IAAM2B,cAAgB,GACzC3B,MAAO,CAAE4B,YAAaF,IAEtB,yBAAK3B,UAAWC,IAAM6B,UACpB,4BAAK7C,GACL,2BAAIwC,IAEN,yBAAKzB,UAAWC,IAAM8B,aAAcL,IAIxCF,EAASJ,aAAe,CACtBO,MAAO,MAGT,MAAMK,EAAa,EAAGC,OAAMd,UAASe,cAAeC,EAAMC,OAAMC,WAC9DA,EACE,oCACGJ,EACC,uBACEjC,UAAWC,IAAMqC,WACjBL,KAAMA,EACNd,QAASA,EACTlC,MAAOmD,GAEP,kBAACD,EAAD,OAGF,4BACEnC,UAAWC,IAAMqC,WACjBC,KAAK,SACLpB,QAASA,EACTlC,MAAOmD,GAEP,kBAACD,EAAD,QAKN,qCAGJH,EAAWZ,aAAe,CACxBiB,OAAO,I,4LC4BMG,MAtEM,EAAGC,cACtB,MAAQC,KAAMC,EAAR,OAAkBC,GAAWC,YACjC,IAAMJ,GAAO,gCAAoCA,EAAQ3B,KAGrD,EAACgC,GAAQC,qBAAWC,KAEpBC,EAAeR,EAAQS,UACzB,uCACA,kFAEJ,OACE,6BACE,0CACCT,EAAQS,WAAaT,EAAQU,wBAC5B,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEhC,QAASiC,UACP,MAAQV,KAAMW,SAAqBC,YAAK,oBAAqB,CAC3DC,WAAYd,EAAQ3B,KAEtB8B,EAAO,GAAD,mBAAKD,GAAL,CAAeU,OALzB,kBAUA,kBAAC,IAAD,CACElC,QAASiC,UACP,MAAQV,KAAMW,SAAqBC,YAAK,oBAAqB,CAC3DC,WAAYd,EAAQ3B,GACpB0C,aAAa,IAEfZ,EAAO,GAAD,mBAAKD,GAAL,CAAeU,OANzB,YAaF,2BAAIJ,GAEN,kBAAC,IAAD,KACGN,GACCA,EAAS3B,IAAIyC,GACX,kBAAC,IAAD,CACExE,MAAOwE,EAAEX,KAAKY,YACdjC,SAAUgC,EAAED,YAAc,SAAW,KACrCvC,IAAKwC,EAAE3C,GACPY,QAAS,CACP,kBAAC,IAAD,CACEW,MAAOS,EAAKhC,KAAO2C,EAAEX,KAAKhC,GAC1BK,QAASiC,UACP,MAAMO,EAASF,EAAED,YAAc,eAAiB,SAC1CI,YAAI,gCACwBnB,EAAQ3B,GAAK6C,GAE/Cf,EAAOD,EAAS/B,OAAOiD,GAAKA,EAAE/C,KAAO2C,EAAE3C,MAEzCoB,cAAe4B,IACf1B,KAAK,mBACLnB,IAAI,kBCzBP8C,MAxCU,EAAGC,iBAAgBC,gBAC1C,6BACE,yCACA,4BAAKD,EAAeE,MACpB,2BACE,gCACGF,EAAed,UACZ,sBACA,qCAGPc,EAAeG,aACd,uBAAGlE,MAAO,CAAEmE,WAAY,aAAeJ,EAAeG,aAEvDH,EAAeK,iBACd,2BACGL,EAAed,UACd,kBAAC,IAAD,CACE/B,QAASiC,gBACDQ,YAAI,8BAA8BI,EAAelD,IACvDmD,MAHJ,qBASA,kBAAC,IAAD,CACE9C,QAASiC,gBACDE,YAAK,kBAAmB,CAAEC,WAAYS,EAAelD,KAC3DmD,MAHJ,0BCgEKK,UAlFE,EAAGC,aAAetF,aACjC,MAAM,EAAC+E,EAAD,EAAiBQ,GAAqBC,mBAAS,OAC7C/B,KAAMgC,EAAR,WAAkBT,GAAepB,YAAO,qBA+C9C,OA5CA8B,oBACE,KACMX,GACFQ,EAAkBE,EAASE,KAAKC,GAAKA,EAAE/D,KAAOkD,EAAelD,MAEjE,CAAC4D,IAwCD,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUI,WAAS,GACjB,kBAAC,IAAD,CACE7F,MAAOA,EACPG,OAAQ4E,EACR3E,UAAWmF,EACXtF,QAASwF,EACTpF,MAAM,OACNG,eAAe,mCAGlBuE,GACC,oCACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CACEA,eAAgBA,EAChBC,WAAYA,KAKhB,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAcxB,QAASuB","file":"component---src-components-voting-guest-page-js-f21be97d05181661baee.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport style from '../../scss/ui.module.scss'\nimport { Button } from './buttons'\n\nconst TitleChooser = ({\n  title,\n  choices,\n  categorizedChoices,\n  choice,\n  setChoice,\n  label,\n  action,\n  actionLabel,\n  noChoicesLabel,\n}) => {\n  const allChoices = [\n    ...(choices || []),\n    // merge all categorized choices to single array.\n    ...Object.keys(categorizedChoices).reduce(\n      (accumulator, category) => [\n        ...accumulator,\n        ...categorizedChoices[category],\n      ],\n      []\n    ),\n  ]\n  return (\n    <div className={style.titleChooser}>\n      <h1>{title}</h1>\n      <div className={style.actions}>\n        {allChoices.length ? (\n          <div className={style.selectContainer}>\n            <select\n              onChange={e => {\n                const selectedValue = e.target.value\n                const c =\n                  selectedValue === ''\n                    ? null\n                    : allChoices.filter(i => `${i.id}` === selectedValue)[0]\n                setChoice(c)\n              }}\n              value={choice ? choice.id : ''}\n            >\n              <option value=\"\" />\n              {choices.sort().map(c => (\n                <option value={c.id} key={c.id}>\n                  {c[label]}\n                </option>\n              ))}\n              {Object.keys(categorizedChoices)\n                .sort()\n                .map(key => (\n                  <optgroup label={key} key={key}>\n                    {categorizedChoices[key].sort().map(c => (\n                      <option value={c.id} key={c.id}>\n                        {c[label]}\n                      </option>\n                    ))}\n                  </optgroup>\n                ))}\n            </select>\n            {choice === null && (\n              <div className={style.hint}>Välj ett objekt</div>\n            )}\n          </div>\n        ) : (\n          <span>{noChoicesLabel}</span>\n        )}\n\n        {action && <Button onClick={action}>{actionLabel}</Button>}\n      </div>\n    </div>\n  )\n}\nTitleChooser.defaultProps = {\n  categorizedChoices: {},\n  choices: [],\n  action: null,\n  actionLabel: '',\n  choice: null,\n  noChoicesLabel: '',\n  setChoice: () => {},\n  label: '',\n}\n\nTitleChooser.propTypes = {\n  title: PropTypes.string.isRequired,\n  choices: PropTypes.array,\n  categorizedChoices: PropTypes.object,\n  choice: PropTypes.object,\n  setChoice: PropTypes.func,\n  label: PropTypes.string,\n  action: PropTypes.func,\n  actionLabel: PropTypes.string,\n  noChoicesLabel: PropTypes.string,\n}\n\nexport default TitleChooser\n","import React from 'react'\n\nimport style from '../../scss/ui.module.scss'\n\nconst List = ({ children }) => <ul className={style.list}>{children}</ul>\n\nconst ListItem = ({ title, subtitle, buttons, color }) => (\n  <li\n    className={color ? style.listItemColor : ''}\n    style={{ borderColor: color }}\n  >\n    <div className={style.listText}>\n      <h3>{title}</h3>\n      <p>{subtitle}</p>\n    </div>\n    <div className={style.listButtons}>{buttons}</div>\n  </li>\n)\n\nListItem.defaultProps = {\n  color: null,\n}\n\nconst ListButton = ({ href, onClick, iconComponent: Icon, text, shown }) =>\n  shown ? (\n    <>\n      {href ? (\n        <a\n          className={style.listButton}\n          href={href}\n          onClick={onClick}\n          title={text}\n        >\n          <Icon />\n        </a>\n      ) : (\n        <button\n          className={style.listButton}\n          type=\"button\"\n          onClick={onClick}\n          title={text}\n        >\n          <Icon />\n        </button>\n      )}\n    </>\n  ) : (\n    <></>\n  )\n\nListButton.defaultProps = {\n  shown: true,\n}\n\nexport { List, ListItem, ListButton }\n","import React, { useState, useEffect, useContext } from 'react'\nimport useSWR from 'swr'\n\nimport { FiTrash2 } from 'react-icons/fi'\nimport { List, ListButton, ListItem } from '../ui/list'\nimport { Button, ButtonGroup } from '../ui/buttons'\nimport { UserContext } from '../layout/layout'\nimport { post, del } from '../request'\n\nconst SpeakerPanel = ({ meeting }) => {\n  const { data: speakers, mutate } = useSWR(\n    () => meeting && `/voting/speakers/?meeting_id=${meeting.id}`\n  )\n\n  const [user] = useContext(UserContext)\n\n  const errorMessage = meeting.attending\n    ? 'Talarlista är inaktiverad för mötet.'\n    : 'Du måste vara registrerad på mötet för att kunna skriva upp dig på talarlistan.'\n\n  return (\n    <div>\n      <h2>Talarlista</h2>\n      {meeting.attending && meeting.enable_speaker_requests ? (\n        <ButtonGroup>\n          <Button\n            onClick={async () => {\n              const { data: newSpeaker } = await post('/voting/speakers/', {\n                meeting_id: meeting.id,\n              })\n              mutate([...speakers, newSpeaker])\n            }}\n          >\n            Jag vill tala!\n          </Button>\n          <Button\n            onClick={async () => {\n              const { data: newSpeaker } = await post('/voting/speakers/', {\n                meeting_id: meeting.id,\n                prioritized: true,\n              })\n              mutate([...speakers, newSpeaker])\n            }}\n          >\n            Replik!\n          </Button>\n        </ButtonGroup>\n      ) : (\n        <p>{errorMessage}</p>\n      )}\n      <List>\n        {speakers &&\n          speakers.map(s => (\n            <ListItem\n              title={s.user.pretty_name}\n              subtitle={s.prioritized ? 'Replik' : null}\n              key={s.id}\n              buttons={[\n                <ListButton\n                  shown={user.id === s.user.id}\n                  onClick={async () => {\n                    const prioQS = s.prioritized ? '&prioritized' : ''\n                    await del(\n                      `/voting/speakers/?meeting_id=${meeting.id}${prioQS}`\n                    )\n                    mutate(speakers.filter(x => x.id !== s.id))\n                  }}\n                  iconComponent={FiTrash2}\n                  text=\"Lämna talarlista\"\n                  key=\"remove\"\n                />,\n              ]}\n            />\n          ))}\n      </List>\n    </div>\n  )\n}\n\nexport default SpeakerPanel\n","import React from 'react'\nimport { Button } from '../ui/buttons'\nimport { post, del } from '../request'\n\nconst MeetingInfoPanel = ({ currentMeeting, revalidate }) => (\n  <div>\n    <h2>Mötesinfo</h2>\n    <h3>{currentMeeting.name}</h3>\n    <p>\n      <strong>\n        {currentMeeting.attending\n          ? 'Du deltar på mötet.'\n          : 'Du är inte registrerad på mötet.'}\n      </strong>\n    </p>\n    {currentMeeting.description && (\n      <p style={{ whiteSpace: 'pre-line' }}>{currentMeeting.description}</p>\n    )}\n    {currentMeeting.open_attendance && (\n      <p>\n        {currentMeeting.attending ? (\n          <Button\n            onClick={async () => {\n              await del(`/voting/attend/?meeting_id=${currentMeeting.id}`)\n              revalidate()\n            }}\n          >\n            Lämna röstlängden\n          </Button>\n        ) : (\n          <Button\n            onClick={async () => {\n              await post('/voting/attend/', { meeting_id: currentMeeting.id })\n              revalidate()\n            }}\n          >\n            Gå med i röstlängden\n          </Button>\n        )}\n      </p>\n    )}\n  </div>\n)\n\nexport default MeetingInfoPanel\n","import React, { useContext, useState, useEffect } from 'react'\nimport useSWR from 'swr'\n\nimport BigPixels from '../layout/bigPixels'\nimport { GridContainer, GridItem } from '../ui/grid'\nimport TitleChooser from '../ui/titleChooser'\nimport SpeakerPanel from './speakerPanel'\nimport MeetingInfoPanel from './meetingInfoPanel'\nimport VotePanel from './votePanel'\n\n//import { get } from '../request'\n\nconst VotePage = ({ pageContext: { title } }) => {\n  const [currentMeeting, setCurrentMeeting] = useState(null)\n  const { data: meetings, revalidate } = useSWR('/voting/meetings/')\n\n  // sync currentMeeting with updated meetings\n  useEffect(\n    () => {\n      if (currentMeeting)\n        setCurrentMeeting(meetings.find(m => m.id === currentMeeting.id))\n    },\n    [meetings]\n  )\n\n  /*\n  const checkMembership = () => {\n    ;(async () => {\n      try {\n        const { data } = await get('/account/me/');\n        const user = data;\n        console.log(\"SUCCESS\");\n        console.log(user.privileges.member);\n        console.log(user.privileges.voting_guest);\n\n      } catch (err) {\n        console.log(\"FAIL\")\n        \n        if (!err.response)\n        {\n          //setError(\n          //  <>\n          //    <p>Kommunikation med servern kunde inte etableras.</p>\n          //    <Button onClick={() => window.location.reload()}>\n          //      Ladda om sidan\n          //    </Button>\n          //  </>\n          //)\n        }\n        else if (err.response.status === 401) {\n          window.localStorage.removeItem('token')\n        }\n        \n      }\n    })()\n  }\n\n  checkMembership();\n\n  */\n\n  return (\n    <BigPixels>\n      <GridContainer>\n        <GridItem fullWidth>\n          <TitleChooser\n            title={title}\n            choice={currentMeeting}\n            setChoice={setCurrentMeeting}\n            choices={meetings}\n            label=\"name\"\n            noChoicesLabel=\"Det finns inga möten just nu.\"\n          />\n        </GridItem>\n        {currentMeeting && (\n          <>\n            <GridItem>\n              <MeetingInfoPanel\n                currentMeeting={currentMeeting}\n                revalidate={revalidate}\n              />\n            </GridItem>\n\n            {/* {currentMeeting.enable_speaker_requests && ( */}\n            <GridItem>\n              <SpeakerPanel meeting={currentMeeting} />\n            </GridItem>\n            {/* )} */}\n          </>\n        )}\n      </GridContainer>\n    </BigPixels>\n  )\n}\nexport default VotePage\n"],"sourceRoot":""}