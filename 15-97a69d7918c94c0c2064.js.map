{"version":3,"sources":["webpack:///./node_modules/frappe-charts/dist/frappe-charts.esm.js"],"names":["$","expr","con","document","querySelector","getOffset","element","rect","getBoundingClientRect","top","documentElement","scrollTop","body","left","scrollLeft","__webpack_require__","d","__webpack_exports__","Chart","create","tag","o","createElement","i","val","appendChild","ref","parentNode","insertBefore","Object","keys","map","prop","style","setAttribute","BASE_MEASURES","margins","bottom","right","paddings","baseHeight","titleHeight","legendHeight","titleFontSize","getTopOffset","m","getLeftOffset","getExtraHeight","getExtraWidth","INIT_CHART_UPDATE_TIMEOUT","CHART_POST_ANIMATE_TIMEOUT","AXIS_DATASET_CHART_TYPES","AXIS_LEGEND_BAR_SIZE","BAR_CHART_SPACE_RATIO","MIN_BAR_PERCENT_HEIGHT","LINE_CHART_DOT_SIZE","PERCENTAGE_BAR_DEFAULT_HEIGHT","PERCENTAGE_BAR_DEFAULT_DEPTH","HEATMAP_DISTRIBUTION_SIZE","HEATMAP_SQUARE_SIZE","DEFAULT_CHAR_WIDTH","TOOLTIP_POINTER_TRIANGLE_HEIGHT","DEFAULT_CHART_COLORS","DEFAULT_COLORS","bar","line","pie","percentage","heatmap","donut","ANGLE_RATIO","Math","PI","FULL_ANGLE","SvgTip","[object Object]","parent","colors","this","titleName","titleValue","listValues","titleValueFirst","x","y","setup","makeTooltip","fill","calcPosition","container","inside","className","innerHTML","hideTip","title","dataPointList","addEventListener","index","set","color","value","formatted","li","styles","border-top","width","offsetWidth","offsetHeight","maxLeft","pointer","pointerOffset","name","valueFirst","refresh","opacity","floatTwo","parseFloat","toFixed","fillArray","array","count","start","length","fillerArray","Array","abs","concat","getStringWidth","string","charWidth","getPositionByAngle","angle","radius","sin","cos","getBarHeightAndYAttr","yTop","zeroLine","height","equilizeNoOfElements","array1","array2","extraCount","PRESET_COLOR_MAP","light-blue","blue","violet","red","orange","yellow","green","light-green","purple","magenta","black","grey","light-grey","dark-grey","limitColor","r","lightenDarkenColor","amt","col","getColor","usePound","slice","num","parseInt","b","toString","AXIS_TICK_LENGTH","LABEL_MARGIN","LABEL_MAX_CHARS","FONT_SIZE","BASE_LINE_COLOR","FONT_FILL","$$1","createSVG","createElementNS","setGradientStop","gradElem","offset","stop-opacity","makeSVGGroup","transform","args","makePath","pathStr","stroke","strokeWidth","stroke-width","makeGradient","svgDefElem","lighter","gradientId","gradientDef","id","x1","x2","y1","y2","renderVerticalGradient","opacities","heatSquare","size","data","key","makeText","content","options","fontSize","dy","undefined","font-size","text-anchor","textAnchor","makeHoriLine","label","lineType","shortenNumbers","number","Number","isNaN","p","floor","log10","l","shortened","pow","round","shortenLargeNumber","text","stroke-opacity","xLine","pos","mode","makeVertLine","makeOverlay","unit","transformValue","nodeName","getAttribute","childNodes","overlay","cloneNode","dot","heat_square","updateOverlay","attributes","values","filter","attr","includes","specified","nodeValue","UNIT_ANIM_DUR","PATH_ANIM_DUR","MARKER_LINE_ANIM_DUR","REPLACE_ALL_NEW_DUR","STD_EASING","translate","oldCoord","newCoord","duration","old","join","translateHoriLine","yLine","newY","oldY","animatePathStr","oldPath","EASING","ease","linear","easein","easeout","easeinout","webkitTransform","msTransform","mozTransform","oTransform","animateSVG","svgContainer","elements","newElements","animElements","animElement","newElement","props","dur","easingType","type","oldValues","attributeName","animateElement","currentValue","animAttr","from","to","begin","keySplines","keyTimes","calcMode","animateSVGElement","push","replaceChild","animSvg","CSSTEXT","BOUND_DRAW_FN","BaseChart","HTMLElement","Error","rawChartArgs","realData","prepareData","prepareFirstData","validateColors","config","showTooltip","showLegend","isNavigable","animate","truncateLegends","measures","JSON","parse","stringify","setMeasures","argHeight","state","initTimeout","overlays","configure","validColors","forEach","test","isValidColor","console","warn","boundDrawFn","bind","window","draw","removeEventListener","makeContainer","updateWidth","independentWidth","tip","bindTooltip","onlyWidthChange","init","calc","makeChartArea","setupComponents","components","c","drawArea","render","setTimeout","update","renderLegend","setupNavigation","padding","baseWidth","getComputedStyle","paddingLeft","paddingRight","clientWidth","svg","removeChild","svgDefs","titleEL","legendArea","updateTipOffset","Map","error","elementsToAnimate","svgElement","animSvgElement","runSMILAnimation","make","updateNav","bindUnits","bindOverlay","keyActions","13","onEnterKey","37","onLeftArrow","38","onUpArrow","39","onRightArrow","40","onDownArrow","e","el","innerHeight","clientHeight","innerWidth","isElementInViewport","event","keyCode","chartSvg","clone","classList","add","styleEl","firstChild","prepareForExport","filename","a","blob","Blob","url","URL","createObjectURL","href","download","click","revokeObjectURL","downloadFile","AggregationChart","super","maxSlices","maxLegendPoints","s","sliceTotals","allTotals","labels","total","datasets","totals","sort","remaining","sumOfRemaining","grandTotal","reduce","center","textContent","legendTotals","barWidth","divisor","cx","cy","dx","group","legendDot","NO_OF_YEAR_MONTHS","NO_OF_DAYS_IN_WEEK","NO_OF_MILLIS","SEC_IN_DAY","MONTH_NAMES","DAY_NAMES_SHORT","treatAsUtc","date","result","Date","setMinutes","getMinutes","getTimezoneOffset","getYyyyMmDd","dd","getDate","mm","getMonth","getFullYear","getTime","getWeeksBetween","startDate","endDate","weekStartDate","setDayToSunday","ceil","millisecondsPerDay","getDaysBetween","areInSameMonth","getMonthName","short","monthName","getLastDateInMonth","month","year","newDate","day","getDay","addDays","numberOfDays","setDate","ChartComponent","layerClass","layerTransform","constants","getData","makeElements","animateElements","store","layer","oldData","componentConfigs","donutSlices","sliceStrings","transition","newData","pieSlices","percentageBars","xPositions","depth","stroke-dasharray","percentageBar","widths","barHeight","barDepth","yAxis","positions","position","newPos","newLabels","oldPos","oldLabels","xAxis","calcLabels","newX","oldX","translateVertLine","yMarkers","labelPos","labelSvg","yMarker","newOptions","yRegions","region","yRegion","startPos","endPos","newStarts","oldStarts","rectGroup","newY1","newY2","oldY2","newHeight","animateRegion","heatDomain","colWidth","rowHeight","squareSize","xTranslate","serializedSubDomains","cols","week","weekNo","toUpperCase","data-date","yyyyMmDd","data-value","dataValue","data-day","square","barGraph","unitType","units","yPositions","j","meta","minHeight","data-point-index","datasetBar","offsets","barsWidth","newXPos","newYPos","newOffsets","oldXPos","oldYPos","oldOffsets","rectAnim","oldCoordStr","split","animateBar","lineGraph","paths","hideLine","xList","yList","pointsStr","path","heatline","gradient_id","regionFill","gradient_id_region","getPaths","hideDots","datasetDot","valuesOverPoints","newValues","newXList","newYList","pathComponents","animPath","regStartPt","regEndPt","animRegion","animatePath","animateDot","getComponent","k","assign","normalize","mantissa","exponent","sig","isFinite","exp","getChartIntervals","maxValue","minValue","normalMaxValue","normalMinValue","intervals","max","min","upperBound","lowerBound","range","noOfParts","partSize","getChartRangeIntervals","getIntervalSize","orderedArray","scale","scaleMultiplier","COL_WIDTH","ROW_HEIGHT","AxisChart","barOptions","lineOptions","axisOptions","tooltipOptions","xAxisMode","yAxisMode","xIsSeries","shortenYAxisNumbers","formatTooltipX","formatTooltipY","datasetLength","zeroArray","vals","chartType","end","dataPrep","zeroData","zeroDataPrep","calcXPositions","calcYAxisParameters","getAllYValues","makeDataByIndex","unitWidth","xOffset","dataValues","withMinimum","yPts","getPositiveFirstIntervals","absMinValue","intervalSize","unshift","pseudoMaxValue","pseudoMinValue","reverse","calcChartIntervals","intervalHeight","zeroIndex","interval","indexOf","getZeroIndex","calcDatasetPoints","calcYExtremes","calcYRegions","scaleAll","cumulativeYs","cumulativeYPos","stacked","yExtremes","cumulative","allValueLists","chartWidth","isSeries","allowedSpace","allowedLetters","getShortenedLabels","barDatasets","lineDatasets","barsConfigs","spaceRatio","lineConfigs","minLine","dotSize","markerConfigs","optionals","dataUnitComponents","component","dataByIndex","formatX","formatY","yPos","formattedLabel","xPos","yExtreme","relX","pageX","relY","pageY","mapTooltipXPosition","goal","arr","closest","prev","curr","getClosestInArray","dbi","setValues","showTip","truncate","txt","len","truncateString","legendBar","overlayGuides","g","currentIndex","currentUnit","setCurrentDataPoint","target","properties","evt","createEvent","initEvent","dispatchEvent","fire","getDataPoint","datasetValues","addDataPoint","splice","removeDataPoint","chartTypes","bars","get","gOff","pOff","formattedLabels","fraction","countLabel","validStarts","startSubDomain","startSubDomainIndex","discreteDomains","spacing","noOfWeeks","setFullYear","dataPoints","points","timestampSec$$1","firstWeekStart","distribution","distributionSize","dataMaxValue","distributionStep","checkpoint","calcDistribution","domainConfigs","getDomains","lessCol","dayName","dayText","comp","daySquares","daySquare","dateParts","lessText","moreText","startMonth","startYear","endMonth","endYear","noOfMonths","startOfMonth","getDomainConfig","startOfWeek","domainConfig","noOfMonthWeeks","getCol","empty","currentDate","currentDateWithinData","getSubDomainConfig","mouseMove","mouseLeave","hoverRadio","startAngle","clockWise","prevSlicesProperties","slicesProperties","curAngle","originDiffAngle","largeArc","diffAngle","endAngle","startPosition","endPosition","prevProperty","curStart","curEnd","curPath","arcStartX","arcStartY","arcEndX","midArc","arcEndY","makeCircleStr","makeArcPathStr","property","flag","calTranslateByAngle","g_off","formatted_labels","percent","slices","prevIndex","curActiveSliceIndex","prevAcitve","curActiveSlice","hoverSlice","makeStrokeCircleStr","makeArcStrokePathStr","getChartByType"],"mappings":"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","file":"15-97a69d7918c94c0c2064.js","sourcesContent":["function $(expr, con) {\n\treturn typeof expr === \"string\"? (con || document).querySelector(expr) : expr || null;\n}\n\n\n\n$.create = (tag, o) => {\n\tvar element = document.createElement(tag);\n\n\tfor (var i in o) {\n\t\tvar val = o[i];\n\n\t\tif (i === \"inside\") {\n\t\t\t$(val).appendChild(element);\n\t\t}\n\t\telse if (i === \"around\") {\n\t\t\tvar ref = $(val);\n\t\t\tref.parentNode.insertBefore(element, ref);\n\t\t\telement.appendChild(ref);\n\n\t\t} else if (i === \"styles\") {\n\t\t\tif(typeof val === \"object\") {\n\t\t\t\tObject.keys(val).map(prop => {\n\t\t\t\t\telement.style[prop] = val[prop];\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (i in element ) {\n\t\t\telement[i] = val;\n\t\t}\n\t\telse {\n\t\t\telement.setAttribute(i, val);\n\t\t}\n\t}\n\n\treturn element;\n};\n\nfunction getOffset(element) {\n\tlet rect = element.getBoundingClientRect();\n\treturn {\n\t\t// https://stackoverflow.com/a/7436602/6495043\n\t\t// rect.top varies with scroll, so we add whatever has been\n\t\t// scrolled to it to get absolute distance from actual page top\n\t\ttop: rect.top + (document.documentElement.scrollTop || document.body.scrollTop),\n\t\tleft: rect.left + (document.documentElement.scrollLeft || document.body.scrollLeft)\n\t};\n}\n\nfunction isElementInViewport(el) {\n\t// Although straightforward: https://stackoverflow.com/a/7557433/6495043\n\tvar rect = el.getBoundingClientRect();\n\n\treturn (\n\t\trect.top >= 0 &&\n        rect.left >= 0 &&\n        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && /*or $(window).height() */\n        rect.right <= (window.innerWidth || document.documentElement.clientWidth) /*or $(window).width() */\n\t);\n}\n\nfunction getElementContentWidth(element) {\n\tvar styles = window.getComputedStyle(element);\n\tvar padding = parseFloat(styles.paddingLeft) +\n\t\tparseFloat(styles.paddingRight);\n\n\treturn element.clientWidth - padding;\n}\n\n\n\n\n\nfunction fire(target, type, properties) {\n\tvar evt = document.createEvent(\"HTMLEvents\");\n\n\tevt.initEvent(type, true, true );\n\n\tfor (var j in properties) {\n\t\tevt[j] = properties[j];\n\t}\n\n\treturn target.dispatchEvent(evt);\n}\n\n// https://css-tricks.com/snippets/javascript/loop-queryselectorall-matches/\n\nconst BASE_MEASURES = {\n\tmargins: {\n\t\ttop: 10,\n\t\tbottom: 10,\n\t\tleft: 20,\n\t\tright: 20\n\t},\n\tpaddings: {\n\t\ttop: 20,\n\t\tbottom: 40,\n\t\tleft: 30,\n\t\tright: 10\n\t},\n\n\tbaseHeight: 240,\n\ttitleHeight: 20,\n\tlegendHeight: 30,\n\n\ttitleFontSize: 12,\n};\n\nfunction getTopOffset(m) {\n\treturn m.titleHeight + m.margins.top + m.paddings.top;\n}\n\nfunction getLeftOffset(m) {\n\treturn m.margins.left + m.paddings.left;\n}\n\nfunction getExtraHeight(m) {\n\tlet totalExtraHeight = m.margins.top + m.margins.bottom\n\t\t+ m.paddings.top + m.paddings.bottom\n\t\t+ m.titleHeight + m.legendHeight;\n\treturn totalExtraHeight;\n}\n\nfunction getExtraWidth(m) {\n\tlet totalExtraWidth = m.margins.left + m.margins.right\n\t\t+ m.paddings.left + m.paddings.right;\n\n\treturn totalExtraWidth;\n}\n\nconst INIT_CHART_UPDATE_TIMEOUT = 700;\nconst CHART_POST_ANIMATE_TIMEOUT = 400;\n\nconst DEFAULT_AXIS_CHART_TYPE = 'line';\nconst AXIS_DATASET_CHART_TYPES = ['line', 'bar'];\n\nconst AXIS_LEGEND_BAR_SIZE = 100;\n\nconst BAR_CHART_SPACE_RATIO = 0.5;\nconst MIN_BAR_PERCENT_HEIGHT = 0.00;\n\nconst LINE_CHART_DOT_SIZE = 4;\nconst DOT_OVERLAY_SIZE_INCR = 4;\n\nconst PERCENTAGE_BAR_DEFAULT_HEIGHT = 20;\nconst PERCENTAGE_BAR_DEFAULT_DEPTH = 2;\n\n// Fixed 5-color theme,\n// More colors are difficult to parse visually\nconst HEATMAP_DISTRIBUTION_SIZE = 5;\n\nconst HEATMAP_SQUARE_SIZE = 10;\nconst HEATMAP_GUTTER_SIZE = 2;\n\nconst DEFAULT_CHAR_WIDTH = 7;\n\nconst TOOLTIP_POINTER_TRIANGLE_HEIGHT = 5;\n\nconst DEFAULT_CHART_COLORS = ['light-blue', 'blue', 'violet', 'red', 'orange',\n\t'yellow', 'green', 'light-green', 'purple', 'magenta', 'light-grey', 'dark-grey'];\nconst HEATMAP_COLORS_GREEN = ['#ebedf0', '#c6e48b', '#7bc96f', '#239a3b', '#196127'];\n\n\n\nconst DEFAULT_COLORS = {\n\tbar: DEFAULT_CHART_COLORS,\n\tline: DEFAULT_CHART_COLORS,\n\tpie: DEFAULT_CHART_COLORS,\n\tpercentage: DEFAULT_CHART_COLORS,\n\theatmap: HEATMAP_COLORS_GREEN,\n\tdonut: DEFAULT_CHART_COLORS\n};\n\n// Universal constants\nconst ANGLE_RATIO = Math.PI / 180;\nconst FULL_ANGLE = 360;\n\nclass SvgTip {\n\tconstructor({\n\t\tparent = null,\n\t\tcolors = []\n\t}) {\n\t\tthis.parent = parent;\n\t\tthis.colors = colors;\n\t\tthis.titleName = '';\n\t\tthis.titleValue = '';\n\t\tthis.listValues = [];\n\t\tthis.titleValueFirst = 0;\n\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\n\t\tthis.top = 0;\n\t\tthis.left = 0;\n\n\t\tthis.setup();\n\t}\n\n\tsetup() {\n\t\tthis.makeTooltip();\n\t}\n\n\trefresh() {\n\t\tthis.fill();\n\t\tthis.calcPosition();\n\t}\n\n\tmakeTooltip() {\n\t\tthis.container = $.create('div', {\n\t\t\tinside: this.parent,\n\t\t\tclassName: 'graph-svg-tip comparison',\n\t\t\tinnerHTML: `<span class=\"title\"></span>\n\t\t\t\t<ul class=\"data-point-list\"></ul>\n\t\t\t\t<div class=\"svg-pointer\"></div>`\n\t\t});\n\t\tthis.hideTip();\n\n\t\tthis.title = this.container.querySelector('.title');\n\t\tthis.dataPointList = this.container.querySelector('.data-point-list');\n\n\t\tthis.parent.addEventListener('mouseleave', () => {\n\t\t\tthis.hideTip();\n\t\t});\n\t}\n\n\tfill() {\n\t\tlet title;\n\t\tif(this.index) {\n\t\t\tthis.container.setAttribute('data-point-index', this.index);\n\t\t}\n\t\tif(this.titleValueFirst) {\n\t\t\ttitle = `<strong>${this.titleValue}</strong>${this.titleName}`;\n\t\t} else {\n\t\t\ttitle = `${this.titleName}<strong>${this.titleValue}</strong>`;\n\t\t}\n\t\tthis.title.innerHTML = title;\n\t\tthis.dataPointList.innerHTML = '';\n\n\t\tthis.listValues.map((set, i) => {\n\t\t\tconst color = this.colors[i] || 'black';\n\t\t\tlet value = set.formatted === 0 || set.formatted ? set.formatted : set.value;\n\n\t\t\tlet li = $.create('li', {\n\t\t\t\tstyles: {\n\t\t\t\t\t'border-top': `3px solid ${color}`\n\t\t\t\t},\n\t\t\t\tinnerHTML: `<strong style=\"display: block;\">${ value === 0 || value ? value : '' }</strong>\n\t\t\t\t\t${set.title ? set.title : '' }`\n\t\t\t});\n\n\t\t\tthis.dataPointList.appendChild(li);\n\t\t});\n\t}\n\n\tcalcPosition() {\n\t\tlet width = this.container.offsetWidth;\n\n\t\tthis.top = this.y - this.container.offsetHeight\n\t\t\t- TOOLTIP_POINTER_TRIANGLE_HEIGHT;\n\t\tthis.left = this.x - width/2;\n\t\tlet maxLeft = this.parent.offsetWidth - width;\n\n\t\tlet pointer = this.container.querySelector('.svg-pointer');\n\n\t\tif(this.left < 0) {\n\t\t\tpointer.style.left = `calc(50% - ${-1 * this.left}px)`;\n\t\t\tthis.left = 0;\n\t\t} else if(this.left > maxLeft) {\n\t\t\tlet delta = this.left - maxLeft;\n\t\t\tlet pointerOffset = `calc(50% + ${delta}px)`;\n\t\t\tpointer.style.left = pointerOffset;\n\n\t\t\tthis.left = maxLeft;\n\t\t} else {\n\t\t\tpointer.style.left = `50%`;\n\t\t}\n\t}\n\n\tsetValues(x, y, title = {}, listValues = [], index = -1) {\n\t\tthis.titleName = title.name;\n\t\tthis.titleValue = title.value;\n\t\tthis.listValues = listValues;\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.titleValueFirst = title.valueFirst || 0;\n\t\tthis.index = index;\n\t\tthis.refresh();\n\t}\n\n\thideTip() {\n\t\tthis.container.style.top = '0px';\n\t\tthis.container.style.left = '0px';\n\t\tthis.container.style.opacity = '0';\n\t}\n\n\tshowTip() {\n\t\tthis.container.style.top = this.top + 'px';\n\t\tthis.container.style.left = this.left + 'px';\n\t\tthis.container.style.opacity = '1';\n\t}\n}\n\n/**\n * Returns the value of a number upto 2 decimal places.\n * @param {Number} d Any number\n */\nfunction floatTwo(d) {\n\treturn parseFloat(d.toFixed(2));\n}\n\n/**\n * Returns whether or not two given arrays are equal.\n * @param {Array} arr1 First array\n * @param {Array} arr2 Second array\n */\n\n\n/**\n * Shuffles array in place. ES6 version\n * @param {Array} array An array containing the items.\n */\n\n\n/**\n * Fill an array with extra points\n * @param {Array} array Array\n * @param {Number} count number of filler elements\n * @param {Object} element element to fill with\n * @param {Boolean} start fill at start?\n */\nfunction fillArray(array, count, element, start=false) {\n\tif(!element) {\n\t\telement = start ? array[0] : array[array.length - 1];\n\t}\n\tlet fillerArray = new Array(Math.abs(count)).fill(element);\n\tarray = start ? fillerArray.concat(array) : array.concat(fillerArray);\n\treturn array;\n}\n\n/**\n * Returns pixel width of string.\n * @param {String} string\n * @param {Number} charWidth Width of single char in pixels\n */\nfunction getStringWidth(string, charWidth) {\n\treturn (string+\"\").length * charWidth;\n}\n\n\n\n// https://stackoverflow.com/a/29325222\n\n\nfunction getPositionByAngle(angle, radius) {\n\treturn {\n\t\tx: Math.sin(angle * ANGLE_RATIO) * radius,\n\t\ty: Math.cos(angle * ANGLE_RATIO) * radius,\n\t};\n}\n\nfunction getBarHeightAndYAttr(yTop, zeroLine) {\n\tlet height, y;\n\tif (yTop <= zeroLine) {\n\t\theight = zeroLine - yTop;\n\t\ty = yTop;\n\t} else {\n\t\theight = yTop - zeroLine;\n\t\ty = zeroLine;\n\t}\n\n\treturn [height, y];\n}\n\nfunction equilizeNoOfElements(array1, array2,\n\textraCount = array2.length - array1.length) {\n\n\t// Doesn't work if either has zero elements.\n\tif(extraCount > 0) {\n\t\tarray1 = fillArray(array1, extraCount);\n\t} else {\n\t\tarray2 = fillArray(array2, extraCount);\n\t}\n\treturn [array1, array2];\n}\n\nfunction truncateString(txt, len) {\n\tif (!txt) {\n\t\treturn;\n\t}\n\tif (txt.length > len) {\n\t\treturn txt.slice(0, len-3) + '...';\n\t} else {\n\t\treturn txt;\n\t}\n}\n\nfunction shortenLargeNumber(label) {\n\tlet number;\n\tif (typeof label === 'number') number = label;\n\telse if (typeof label === 'string') {\n\t\tnumber = Number(label);\n\t\tif (Number.isNaN(number)) return label;\n\t}\n\n\t// Using absolute since log wont work for negative numbers\n\tlet p = Math.floor(Math.log10(Math.abs(number)));\n\tif (p <= 2) return number; // Return as is for a 3 digit number of less\n\tlet\tl = Math.floor(p / 3);\n\tlet shortened = (Math.pow(10, p - l * 3) * +(number / Math.pow(10, p)).toFixed(1));\n\n\t// Correct for floating point error upto 2 decimal places\n\treturn Math.round(shortened*100)/100 + ' ' + ['', 'K', 'M', 'B', 'T'][l];\n}\n\nconst PRESET_COLOR_MAP = {\n\t'light-blue': '#7cd6fd',\n\t'blue': '#5e64ff',\n\t'violet': '#743ee2',\n\t'red': '#ff5858',\n\t'orange': '#ffa00a',\n\t'yellow': '#feef72',\n\t'green': '#28a745',\n\t'light-green': '#98d85b',\n\t'purple': '#b554ff',\n\t'magenta': '#ffa3ef',\n\t'black': '#36114C',\n\t'grey': '#bdd3e6',\n\t'light-grey': '#f0f4f7',\n\t'dark-grey': '#b8c2cc'\n};\n\nfunction limitColor(r){\n\tif (r > 255) return 255;\n\telse if (r < 0) return 0;\n\treturn r;\n}\n\nfunction lightenDarkenColor(color, amt) {\n\tlet col = getColor(color);\n\tlet usePound = false;\n\tif (col[0] == \"#\") {\n\t\tcol = col.slice(1);\n\t\tusePound = true;\n\t}\n\tlet num = parseInt(col,16);\n\tlet r = limitColor((num >> 16) + amt);\n\tlet b = limitColor(((num >> 8) & 0x00FF) + amt);\n\tlet g = limitColor((num & 0x0000FF) + amt);\n\treturn (usePound?\"#\":\"\") + (g | (b << 8) | (r << 16)).toString(16);\n}\n\nfunction isValidColor(string) {\n\t// https://stackoverflow.com/a/8027444/6495043\n\treturn /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(string);\n}\n\nconst getColor = (color) => {\n\treturn PRESET_COLOR_MAP[color] || color;\n};\n\nconst AXIS_TICK_LENGTH = 6;\nconst LABEL_MARGIN = 4;\nconst LABEL_MAX_CHARS = 15;\nconst FONT_SIZE = 10;\nconst BASE_LINE_COLOR = '#dadada';\nconst FONT_FILL = '#555b51';\n\nfunction $$1(expr, con) {\n\treturn typeof expr === \"string\"? (con || document).querySelector(expr) : expr || null;\n}\n\nfunction createSVG(tag, o) {\n\tvar element = document.createElementNS(\"http://www.w3.org/2000/svg\", tag);\n\n\tfor (var i in o) {\n\t\tvar val = o[i];\n\n\t\tif (i === \"inside\") {\n\t\t\t$$1(val).appendChild(element);\n\t\t}\n\t\telse if (i === \"around\") {\n\t\t\tvar ref = $$1(val);\n\t\t\tref.parentNode.insertBefore(element, ref);\n\t\t\telement.appendChild(ref);\n\n\t\t} else if (i === \"styles\") {\n\t\t\tif(typeof val === \"object\") {\n\t\t\t\tObject.keys(val).map(prop => {\n\t\t\t\t\telement.style[prop] = val[prop];\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tif(i === \"className\") { i = \"class\"; }\n\t\t\tif(i === \"innerHTML\") {\n\t\t\t\telement['textContent'] = val;\n\t\t\t} else {\n\t\t\t\telement.setAttribute(i, val);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn element;\n}\n\nfunction renderVerticalGradient(svgDefElem, gradientId) {\n\treturn createSVG('linearGradient', {\n\t\tinside: svgDefElem,\n\t\tid: gradientId,\n\t\tx1: 0,\n\t\tx2: 0,\n\t\ty1: 0,\n\t\ty2: 1\n\t});\n}\n\nfunction setGradientStop(gradElem, offset, color, opacity) {\n\treturn createSVG('stop', {\n\t\t'inside': gradElem,\n\t\t'style': `stop-color: ${color}`,\n\t\t'offset': offset,\n\t\t'stop-opacity': opacity\n\t});\n}\n\nfunction makeSVGContainer(parent, className, width, height) {\n\treturn createSVG('svg', {\n\t\tclassName: className,\n\t\tinside: parent,\n\t\twidth: width,\n\t\theight: height\n\t});\n}\n\nfunction makeSVGDefs(svgContainer) {\n\treturn createSVG('defs', {\n\t\tinside: svgContainer,\n\t});\n}\n\nfunction makeSVGGroup(className, transform='', parent=undefined) {\n\tlet args = {\n\t\tclassName: className,\n\t\ttransform: transform\n\t};\n\tif(parent) args.inside = parent;\n\treturn createSVG('g', args);\n}\n\n\n\nfunction makePath(pathStr, className='', stroke='none', fill='none', strokeWidth=2) {\n\treturn createSVG('path', {\n\t\tclassName: className,\n\t\td: pathStr,\n\t\tstyles: {\n\t\t\tstroke: stroke,\n\t\t\tfill: fill,\n\t\t\t'stroke-width': strokeWidth\n\t\t}\n\t});\n}\n\nfunction makeArcPathStr(startPosition, endPosition, center, radius, clockWise=1, largeArc=0){\n\tlet [arcStartX, arcStartY] = [center.x + startPosition.x, center.y + startPosition.y];\n\tlet [arcEndX, arcEndY] = [center.x + endPosition.x, center.y + endPosition.y];\n\treturn `M${center.x} ${center.y}\n\t\tL${arcStartX} ${arcStartY}\n\t\tA ${radius} ${radius} 0 ${largeArc} ${clockWise ? 1 : 0}\n\t\t${arcEndX} ${arcEndY} z`;\n}\n\nfunction makeCircleStr(startPosition, endPosition, center, radius, clockWise=1, largeArc=0){\n\tlet [arcStartX, arcStartY] = [center.x + startPosition.x, center.y + startPosition.y];\n\tlet [arcEndX, midArc, arcEndY] = [center.x + endPosition.x, center.y * 2, center.y + endPosition.y];\n\treturn `M${center.x} ${center.y}\n\t\tL${arcStartX} ${arcStartY}\n\t\tA ${radius} ${radius} 0 ${largeArc} ${clockWise ? 1 : 0}\n\t\t${arcEndX} ${midArc} z\n\t\tL${arcStartX} ${midArc}\n\t\tA ${radius} ${radius} 0 ${largeArc} ${clockWise ? 1 : 0}\n\t\t${arcEndX} ${arcEndY} z`;\n}\n\nfunction makeArcStrokePathStr(startPosition, endPosition, center, radius, clockWise=1, largeArc=0){\n\tlet [arcStartX, arcStartY] = [center.x + startPosition.x, center.y + startPosition.y];\n\tlet [arcEndX, arcEndY] = [center.x + endPosition.x, center.y + endPosition.y];\n\n\treturn `M${arcStartX} ${arcStartY}\n\t\tA ${radius} ${radius} 0 ${largeArc} ${clockWise ? 1 : 0}\n\t\t${arcEndX} ${arcEndY}`;\n}\n\nfunction makeStrokeCircleStr(startPosition, endPosition, center, radius, clockWise=1, largeArc=0){\n\tlet [arcStartX, arcStartY] = [center.x + startPosition.x, center.y + startPosition.y];\n\tlet [arcEndX, midArc, arcEndY] = [center.x + endPosition.x, radius * 2 + arcStartY, center.y + startPosition.y];\n\n\treturn `M${arcStartX} ${arcStartY}\n\t\tA ${radius} ${radius} 0 ${largeArc} ${clockWise ? 1 : 0}\n\t\t${arcEndX} ${midArc}\n\t\tM${arcStartX} ${midArc}\n\t\tA ${radius} ${radius} 0 ${largeArc} ${clockWise ? 1 : 0}\n\t\t${arcEndX} ${arcEndY}`;\n}\n\nfunction makeGradient(svgDefElem, color, lighter = false) {\n\tlet gradientId ='path-fill-gradient' + '-' + color + '-' +(lighter ? 'lighter' : 'default');\n\tlet gradientDef = renderVerticalGradient(svgDefElem, gradientId);\n\tlet opacities = [1, 0.6, 0.2];\n\tif(lighter) {\n\t\topacities = [0.4, 0.2, 0];\n\t}\n\n\tsetGradientStop(gradientDef, \"0%\", color, opacities[0]);\n\tsetGradientStop(gradientDef, \"50%\", color, opacities[1]);\n\tsetGradientStop(gradientDef, \"100%\", color, opacities[2]);\n\n\treturn gradientId;\n}\n\nfunction percentageBar(x, y, width, height,\n\tdepth=PERCENTAGE_BAR_DEFAULT_DEPTH, fill='none') {\n\n\tlet args = {\n\t\tclassName: 'percentage-bar',\n\t\tx: x,\n\t\ty: y,\n\t\twidth: width,\n\t\theight: height,\n\t\tfill: fill,\n\t\tstyles: {\n\t\t\t'stroke': lightenDarkenColor(fill, -25),\n\t\t\t// Diabolically good: https://stackoverflow.com/a/9000859\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray\n\t\t\t'stroke-dasharray': `0, ${height + width}, ${width}, ${height}`,\n\t\t\t'stroke-width': depth\n\t\t},\n\t};\n\n\treturn createSVG(\"rect\", args);\n}\n\nfunction heatSquare(className, x, y, size, fill='none', data={}) {\n\tlet args = {\n\t\tclassName: className,\n\t\tx: x,\n\t\ty: y,\n\t\twidth: size,\n\t\theight: size,\n\t\tfill: fill\n\t};\n\n\tObject.keys(data).map(key => {\n\t\targs[key] = data[key];\n\t});\n\n\treturn createSVG(\"rect\", args);\n}\n\nfunction legendBar(x, y, size, fill='none', label, truncate=false) {\n\tlabel = truncate ? truncateString(label, LABEL_MAX_CHARS) : label;\n\n\tlet args = {\n\t\tclassName: 'legend-bar',\n\t\tx: 0,\n\t\ty: 0,\n\t\twidth: size,\n\t\theight: '2px',\n\t\tfill: fill\n\t};\n\tlet text = createSVG('text', {\n\t\tclassName: 'legend-dataset-text',\n\t\tx: 0,\n\t\ty: 0,\n\t\tdy: (FONT_SIZE * 2) + 'px',\n\t\t'font-size': (FONT_SIZE * 1.2) + 'px',\n\t\t'text-anchor': 'start',\n\t\tfill: FONT_FILL,\n\t\tinnerHTML: label\n\t});\n\n\tlet group = createSVG('g', {\n\t\ttransform: `translate(${x}, ${y})`\n\t});\n\tgroup.appendChild(createSVG(\"rect\", args));\n\tgroup.appendChild(text);\n\n\treturn group;\n}\n\nfunction legendDot(x, y, size, fill='none', label) {\n\tlet args = {\n\t\tclassName: 'legend-dot',\n\t\tcx: 0,\n\t\tcy: 0,\n\t\tr: size,\n\t\tfill: fill\n\t};\n\tlet text = createSVG('text', {\n\t\tclassName: 'legend-dataset-text',\n\t\tx: 0,\n\t\ty: 0,\n\t\tdx: (FONT_SIZE) + 'px',\n\t\tdy: (FONT_SIZE/3) + 'px',\n\t\t'font-size': (FONT_SIZE * 1.2) + 'px',\n\t\t'text-anchor': 'start',\n\t\tfill: FONT_FILL,\n\t\tinnerHTML: label\n\t});\n\n\tlet group = createSVG('g', {\n\t\ttransform: `translate(${x}, ${y})`\n\t});\n\tgroup.appendChild(createSVG(\"circle\", args));\n\tgroup.appendChild(text);\n\n\treturn group;\n}\n\nfunction makeText(className, x, y, content, options = {}) {\n\tlet fontSize = options.fontSize || FONT_SIZE;\n\tlet dy = options.dy !== undefined ? options.dy : (fontSize / 2);\n\tlet fill = options.fill || FONT_FILL;\n\tlet textAnchor = options.textAnchor || 'start';\n\treturn createSVG('text', {\n\t\tclassName: className,\n\t\tx: x,\n\t\ty: y,\n\t\tdy: dy + 'px',\n\t\t'font-size': fontSize + 'px',\n\t\tfill: fill,\n\t\t'text-anchor': textAnchor,\n\t\tinnerHTML: content\n\t});\n}\n\nfunction makeVertLine(x, label, y1, y2, options={}) {\n\tif(!options.stroke) options.stroke = BASE_LINE_COLOR;\n\tlet l = createSVG('line', {\n\t\tclassName: 'line-vertical ' + options.className,\n\t\tx1: 0,\n\t\tx2: 0,\n\t\ty1: y1,\n\t\ty2: y2,\n\t\tstyles: {\n\t\t\tstroke: options.stroke\n\t\t}\n\t});\n\n\tlet text = createSVG('text', {\n\t\tx: 0,\n\t\ty: y1 > y2 ? y1 + LABEL_MARGIN : y1 - LABEL_MARGIN - FONT_SIZE,\n\t\tdy: FONT_SIZE + 'px',\n\t\t'font-size': FONT_SIZE + 'px',\n\t\t'text-anchor': 'middle',\n\t\tinnerHTML: label + \"\"\n\t});\n\n\tlet line = createSVG('g', {\n\t\ttransform: `translate(${ x }, 0)`\n\t});\n\n\tline.appendChild(l);\n\tline.appendChild(text);\n\n\treturn line;\n}\n\nfunction makeHoriLine(y, label, x1, x2, options={}) {\n\tif(!options.stroke) options.stroke = BASE_LINE_COLOR;\n\tif(!options.lineType) options.lineType = '';\n\tif (options.shortenNumbers) label = shortenLargeNumber(label);\n\t\n\tlet className = 'line-horizontal ' + options.className +\n\t\t(options.lineType === \"dashed\" ? \"dashed\": \"\");\n\n\tlet l = createSVG('line', {\n\t\tclassName: className,\n\t\tx1: x1,\n\t\tx2: x2,\n\t\ty1: 0,\n\t\ty2: 0,\n\t\tstyles: {\n\t\t\tstroke: options.stroke\n\t\t}\n\t});\n\n\tlet text = createSVG('text', {\n\t\tx: x1 < x2 ? x1 - LABEL_MARGIN : x1 + LABEL_MARGIN,\n\t\ty: 0,\n\t\tdy: (FONT_SIZE / 2 - 2) + 'px',\n\t\t'font-size': FONT_SIZE + 'px',\n\t\t'text-anchor': x1 < x2 ? 'end' : 'start',\n\t\tinnerHTML: label+\"\"\n\t});\n\n\tlet line = createSVG('g', {\n\t\ttransform: `translate(0, ${y})`,\n\t\t'stroke-opacity': 1\n\t});\n\n\tif(text === 0 || text === '0') {\n\t\tline.style.stroke = \"rgba(27, 31, 35, 0.6)\";\n\t}\n\n\tline.appendChild(l);\n\tline.appendChild(text);\n\n\treturn line;\n}\n\nfunction yLine(y, label, width, options={}) {\n\tif(!options.pos) options.pos = 'left';\n\tif(!options.offset) options.offset = 0;\n\tif(!options.mode) options.mode = 'span';\n\tif(!options.stroke) options.stroke = BASE_LINE_COLOR;\n\tif(!options.className) options.className = '';\n\n\tlet x1 = -1 * AXIS_TICK_LENGTH;\n\tlet x2 = options.mode === 'span' ? width + AXIS_TICK_LENGTH : 0;\n\n\tif(options.mode === 'tick' && options.pos === 'right') {\n\t\tx1 = width + AXIS_TICK_LENGTH;\n\t\tx2 = width;\n\t}\n\n\t// let offset = options.pos === 'left' ? -1 * options.offset : options.offset;\n\n\tx1 += options.offset;\n\tx2 += options.offset;\n\n\treturn makeHoriLine(y, label, x1, x2, {\n\t\tstroke: options.stroke,\n\t\tclassName: options.className,\n\t\tlineType: options.lineType,\n\t\tshortenNumbers: options.shortenNumbers\n\t});\n}\n\nfunction xLine(x, label, height, options={}) {\n\tif(!options.pos) options.pos = 'bottom';\n\tif(!options.offset) options.offset = 0;\n\tif(!options.mode) options.mode = 'span';\n\tif(!options.stroke) options.stroke = BASE_LINE_COLOR;\n\tif(!options.className) options.className = '';\n\n\t// Draw X axis line in span/tick mode with optional label\n\t//                        \ty2(span)\n\t// \t\t\t\t\t\t|\n\t// \t\t\t\t\t\t|\n\t//\t\t\t\tx line\t|\n\t//\t\t\t\t\t\t|\n\t// \t\t\t\t\t   \t|\n\t// ---------------------+-- y2(tick)\n\t//\t\t\t\t\t\t|\n\t//\t\t\t\t\t\t\ty1\n\n\tlet y1 = height + AXIS_TICK_LENGTH;\n\tlet y2 = options.mode === 'span' ? -1 * AXIS_TICK_LENGTH : height;\n\n\tif(options.mode === 'tick' && options.pos === 'top') {\n\t\t// top axis ticks\n\t\ty1 = -1 * AXIS_TICK_LENGTH;\n\t\ty2 = 0;\n\t}\n\n\treturn makeVertLine(x, label, y1, y2, {\n\t\tstroke: options.stroke,\n\t\tclassName: options.className,\n\t\tlineType: options.lineType\n\t});\n}\n\nfunction yMarker(y, label, width, options={}) {\n\tif(!options.labelPos) options.labelPos = 'right';\n\tlet x = options.labelPos === 'left' ? LABEL_MARGIN\n\t\t: width - getStringWidth(label, 5) - LABEL_MARGIN;\n\n\tlet labelSvg = createSVG('text', {\n\t\tclassName: 'chart-label',\n\t\tx: x,\n\t\ty: 0,\n\t\tdy: (FONT_SIZE / -2) + 'px',\n\t\t'font-size': FONT_SIZE + 'px',\n\t\t'text-anchor': 'start',\n\t\tinnerHTML: label+\"\"\n\t});\n\n\tlet line = makeHoriLine(y, '', 0, width, {\n\t\tstroke: options.stroke || BASE_LINE_COLOR,\n\t\tclassName: options.className || '',\n\t\tlineType: options.lineType\n\t});\n\n\tline.appendChild(labelSvg);\n\n\treturn line;\n}\n\nfunction yRegion(y1, y2, width, label, options={}) {\n\t// return a group\n\tlet height = y1 - y2;\n\n\tlet rect = createSVG('rect', {\n\t\tclassName: `bar mini`, // remove class\n\t\tstyles: {\n\t\t\tfill: `rgba(228, 234, 239, 0.49)`,\n\t\t\tstroke: BASE_LINE_COLOR,\n\t\t\t'stroke-dasharray': `${width}, ${height}`\n\t\t},\n\t\t// 'data-point-index': index,\n\t\tx: 0,\n\t\ty: 0,\n\t\twidth: width,\n\t\theight: height\n\t});\n\n\tif(!options.labelPos) options.labelPos = 'right';\n\tlet x = options.labelPos === 'left' ? LABEL_MARGIN\n\t\t: width - getStringWidth(label+\"\", 4.5) - LABEL_MARGIN;\n\n\tlet labelSvg = createSVG('text', {\n\t\tclassName: 'chart-label',\n\t\tx: x,\n\t\ty: 0,\n\t\tdy: (FONT_SIZE / -2) + 'px',\n\t\t'font-size': FONT_SIZE + 'px',\n\t\t'text-anchor': 'start',\n\t\tinnerHTML: label+\"\"\n\t});\n\n\tlet region = createSVG('g', {\n\t\ttransform: `translate(0, ${y2})`\n\t});\n\n\tregion.appendChild(rect);\n\tregion.appendChild(labelSvg);\n\n\treturn region;\n}\n\nfunction datasetBar(x, yTop, width, color, label='', index=0, offset=0, meta={}) {\n\tlet [height, y] = getBarHeightAndYAttr(yTop, meta.zeroLine);\n\ty -= offset;\n\n\tif(height === 0) {\n\t\theight = meta.minHeight;\n\t\ty -= meta.minHeight;\n\t}\n\n\tlet rect = createSVG('rect', {\n\t\tclassName: `bar mini`,\n\t\tstyle: `fill: ${color}`,\n\t\t'data-point-index': index,\n\t\tx: x,\n\t\ty: y,\n\t\twidth: width,\n\t\theight: height\n\t});\n\n\tlabel += \"\";\n\n\tif(!label && !label.length) {\n\t\treturn rect;\n\t} else {\n\t\trect.setAttribute('y', 0);\n\t\trect.setAttribute('x', 0);\n\t\tlet text = createSVG('text', {\n\t\t\tclassName: 'data-point-value',\n\t\t\tx: width/2,\n\t\t\ty: 0,\n\t\t\tdy: (FONT_SIZE / 2 * -1) + 'px',\n\t\t\t'font-size': FONT_SIZE + 'px',\n\t\t\t'text-anchor': 'middle',\n\t\t\tinnerHTML: label\n\t\t});\n\n\t\tlet group = createSVG('g', {\n\t\t\t'data-point-index': index,\n\t\t\ttransform: `translate(${x}, ${y})`\n\t\t});\n\t\tgroup.appendChild(rect);\n\t\tgroup.appendChild(text);\n\n\t\treturn group;\n\t}\n}\n\nfunction datasetDot(x, y, radius, color, label='', index=0) {\n\tlet dot = createSVG('circle', {\n\t\tstyle: `fill: ${color}`,\n\t\t'data-point-index': index,\n\t\tcx: x,\n\t\tcy: y,\n\t\tr: radius\n\t});\n\n\tlabel += \"\";\n\n\tif(!label && !label.length) {\n\t\treturn dot;\n\t} else {\n\t\tdot.setAttribute('cy', 0);\n\t\tdot.setAttribute('cx', 0);\n\n\t\tlet text = createSVG('text', {\n\t\t\tclassName: 'data-point-value',\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\tdy: (FONT_SIZE / 2 * -1 - radius) + 'px',\n\t\t\t'font-size': FONT_SIZE + 'px',\n\t\t\t'text-anchor': 'middle',\n\t\t\tinnerHTML: label\n\t\t});\n\n\t\tlet group = createSVG('g', {\n\t\t\t'data-point-index': index,\n\t\t\ttransform: `translate(${x}, ${y})`\n\t\t});\n\t\tgroup.appendChild(dot);\n\t\tgroup.appendChild(text);\n\n\t\treturn group;\n\t}\n}\n\nfunction getPaths(xList, yList, color, options={}, meta={}) {\n\tlet pointsList = yList.map((y, i) => (xList[i] + ',' + y));\n\tlet pointsStr = pointsList.join(\"L\");\n\tlet path = makePath(\"M\"+pointsStr, 'line-graph-path', color);\n\n\t// HeatLine\n\tif(options.heatline) {\n\t\tlet gradient_id = makeGradient(meta.svgDefs, color);\n\t\tpath.style.stroke = `url(#${gradient_id})`;\n\t}\n\n\tlet paths = {\n\t\tpath: path\n\t};\n\n\t// Region\n\tif(options.regionFill) {\n\t\tlet gradient_id_region = makeGradient(meta.svgDefs, color, true);\n\n\t\tlet pathStr = \"M\" + `${xList[0]},${meta.zeroLine}L` + pointsStr + `L${xList.slice(-1)[0]},${meta.zeroLine}`;\n\t\tpaths.region = makePath(pathStr, `region-fill`, 'none', `url(#${gradient_id_region})`);\n\t}\n\n\treturn paths;\n}\n\nlet makeOverlay = {\n\t'bar': (unit) => {\n\t\tlet transformValue;\n\t\tif(unit.nodeName !== 'rect') {\n\t\t\ttransformValue = unit.getAttribute('transform');\n\t\t\tunit = unit.childNodes[0];\n\t\t}\n\t\tlet overlay = unit.cloneNode();\n\t\toverlay.style.fill = '#000000';\n\t\toverlay.style.opacity = '0.4';\n\n\t\tif(transformValue) {\n\t\t\toverlay.setAttribute('transform', transformValue);\n\t\t}\n\t\treturn overlay;\n\t},\n\n\t'dot': (unit) => {\n\t\tlet transformValue;\n\t\tif(unit.nodeName !== 'circle') {\n\t\t\ttransformValue = unit.getAttribute('transform');\n\t\t\tunit = unit.childNodes[0];\n\t\t}\n\t\tlet overlay = unit.cloneNode();\n\t\tlet radius = unit.getAttribute('r');\n\t\tlet fill = unit.getAttribute('fill');\n\t\toverlay.setAttribute('r', parseInt(radius) + DOT_OVERLAY_SIZE_INCR);\n\t\toverlay.setAttribute('fill', fill);\n\t\toverlay.style.opacity = '0.6';\n\n\t\tif(transformValue) {\n\t\t\toverlay.setAttribute('transform', transformValue);\n\t\t}\n\t\treturn overlay;\n\t},\n\n\t'heat_square': (unit) => {\n\t\tlet transformValue;\n\t\tif(unit.nodeName !== 'circle') {\n\t\t\ttransformValue = unit.getAttribute('transform');\n\t\t\tunit = unit.childNodes[0];\n\t\t}\n\t\tlet overlay = unit.cloneNode();\n\t\tlet radius = unit.getAttribute('r');\n\t\tlet fill = unit.getAttribute('fill');\n\t\toverlay.setAttribute('r', parseInt(radius) + DOT_OVERLAY_SIZE_INCR);\n\t\toverlay.setAttribute('fill', fill);\n\t\toverlay.style.opacity = '0.6';\n\n\t\tif(transformValue) {\n\t\t\toverlay.setAttribute('transform', transformValue);\n\t\t}\n\t\treturn overlay;\n\t}\n};\n\nlet updateOverlay = {\n\t'bar': (unit, overlay) => {\n\t\tlet transformValue;\n\t\tif(unit.nodeName !== 'rect') {\n\t\t\ttransformValue = unit.getAttribute('transform');\n\t\t\tunit = unit.childNodes[0];\n\t\t}\n\t\tlet attributes = ['x', 'y', 'width', 'height'];\n\t\tObject.values(unit.attributes)\n\t\t\t.filter(attr => attributes.includes(attr.name) && attr.specified)\n\t\t\t.map(attr => {\n\t\t\t\toverlay.setAttribute(attr.name, attr.nodeValue);\n\t\t\t});\n\n\t\tif(transformValue) {\n\t\t\toverlay.setAttribute('transform', transformValue);\n\t\t}\n\t},\n\n\t'dot': (unit, overlay) => {\n\t\tlet transformValue;\n\t\tif(unit.nodeName !== 'circle') {\n\t\t\ttransformValue = unit.getAttribute('transform');\n\t\t\tunit = unit.childNodes[0];\n\t\t}\n\t\tlet attributes = ['cx', 'cy'];\n\t\tObject.values(unit.attributes)\n\t\t\t.filter(attr => attributes.includes(attr.name) && attr.specified)\n\t\t\t.map(attr => {\n\t\t\t\toverlay.setAttribute(attr.name, attr.nodeValue);\n\t\t\t});\n\n\t\tif(transformValue) {\n\t\t\toverlay.setAttribute('transform', transformValue);\n\t\t}\n\t},\n\n\t'heat_square': (unit, overlay) => {\n\t\tlet transformValue;\n\t\tif(unit.nodeName !== 'circle') {\n\t\t\ttransformValue = unit.getAttribute('transform');\n\t\t\tunit = unit.childNodes[0];\n\t\t}\n\t\tlet attributes = ['cx', 'cy'];\n\t\tObject.values(unit.attributes)\n\t\t\t.filter(attr => attributes.includes(attr.name) && attr.specified)\n\t\t\t.map(attr => {\n\t\t\t\toverlay.setAttribute(attr.name, attr.nodeValue);\n\t\t\t});\n\n\t\tif(transformValue) {\n\t\t\toverlay.setAttribute('transform', transformValue);\n\t\t}\n\t},\n};\n\nconst UNIT_ANIM_DUR = 350;\nconst PATH_ANIM_DUR = 350;\nconst MARKER_LINE_ANIM_DUR = UNIT_ANIM_DUR;\nconst REPLACE_ALL_NEW_DUR = 250;\n\nconst STD_EASING = 'easein';\n\nfunction translate(unit, oldCoord, newCoord, duration) {\n\tlet old = typeof oldCoord === 'string' ? oldCoord : oldCoord.join(', ');\n\treturn [\n\t\tunit,\n\t\t{transform: newCoord.join(', ')},\n\t\tduration,\n\t\tSTD_EASING,\n\t\t\"translate\",\n\t\t{transform: old}\n\t];\n}\n\nfunction translateVertLine(xLine, newX, oldX) {\n\treturn translate(xLine, [oldX, 0], [newX, 0], MARKER_LINE_ANIM_DUR);\n}\n\nfunction translateHoriLine(yLine, newY, oldY) {\n\treturn translate(yLine, [0, oldY], [0, newY], MARKER_LINE_ANIM_DUR);\n}\n\nfunction animateRegion(rectGroup, newY1, newY2, oldY2) {\n\tlet newHeight = newY1 - newY2;\n\tlet rect = rectGroup.childNodes[0];\n\tlet width = rect.getAttribute(\"width\");\n\tlet rectAnim = [\n\t\trect,\n\t\t{ height: newHeight, 'stroke-dasharray': `${width}, ${newHeight}` },\n\t\tMARKER_LINE_ANIM_DUR,\n\t\tSTD_EASING\n\t];\n\n\tlet groupAnim = translate(rectGroup, [0, oldY2], [0, newY2], MARKER_LINE_ANIM_DUR);\n\treturn [rectAnim, groupAnim];\n}\n\nfunction animateBar(bar, x, yTop, width, offset=0, meta={}) {\n\tlet [height, y] = getBarHeightAndYAttr(yTop, meta.zeroLine);\n\ty -= offset;\n\tif(bar.nodeName !== 'rect') {\n\t\tlet rect = bar.childNodes[0];\n\t\tlet rectAnim = [\n\t\t\trect,\n\t\t\t{width: width, height: height},\n\t\t\tUNIT_ANIM_DUR,\n\t\t\tSTD_EASING\n\t\t];\n\n\t\tlet oldCoordStr = bar.getAttribute(\"transform\").split(\"(\")[1].slice(0, -1);\n\t\tlet groupAnim = translate(bar, oldCoordStr, [x, y], MARKER_LINE_ANIM_DUR);\n\t\treturn [rectAnim, groupAnim];\n\t} else {\n\t\treturn [[bar, {width: width, height: height, x: x, y: y}, UNIT_ANIM_DUR, STD_EASING]];\n\t}\n\t// bar.animate({height: args.newHeight, y: yTop}, UNIT_ANIM_DUR, mina.easein);\n}\n\nfunction animateDot(dot, x, y) {\n\tif(dot.nodeName !== 'circle') {\n\t\tlet oldCoordStr = dot.getAttribute(\"transform\").split(\"(\")[1].slice(0, -1);\n\t\tlet groupAnim = translate(dot, oldCoordStr, [x, y], MARKER_LINE_ANIM_DUR);\n\t\treturn [groupAnim];\n\t} else {\n\t\treturn [[dot, {cx: x, cy: y}, UNIT_ANIM_DUR, STD_EASING]];\n\t}\n\t// dot.animate({cy: yTop}, UNIT_ANIM_DUR, mina.easein);\n}\n\nfunction animatePath(paths, newXList, newYList, zeroLine) {\n\tlet pathComponents = [];\n\n\tlet pointsStr = newYList.map((y, i) => (newXList[i] + ',' + y));\n\tlet pathStr = pointsStr.join(\"L\");\n\n\tconst animPath = [paths.path, {d:\"M\"+pathStr}, PATH_ANIM_DUR, STD_EASING];\n\tpathComponents.push(animPath);\n\n\tif(paths.region) {\n\t\tlet regStartPt = `${newXList[0]},${zeroLine}L`;\n\t\tlet regEndPt = `L${newXList.slice(-1)[0]}, ${zeroLine}`;\n\n\t\tconst animRegion = [\n\t\t\tpaths.region,\n\t\t\t{d:\"M\" + regStartPt + pathStr + regEndPt},\n\t\t\tPATH_ANIM_DUR,\n\t\t\tSTD_EASING\n\t\t];\n\t\tpathComponents.push(animRegion);\n\t}\n\n\treturn pathComponents;\n}\n\nfunction animatePathStr(oldPath, pathStr) {\n\treturn [oldPath, {d: pathStr}, UNIT_ANIM_DUR, STD_EASING];\n}\n\n// Leveraging SMIL Animations\n\nconst EASING = {\n\tease: \"0.25 0.1 0.25 1\",\n\tlinear: \"0 0 1 1\",\n\t// easein: \"0.42 0 1 1\",\n\teasein: \"0.1 0.8 0.2 1\",\n\teaseout: \"0 0 0.58 1\",\n\teaseinout: \"0.42 0 0.58 1\"\n};\n\nfunction animateSVGElement(element, props, dur, easingType=\"linear\", type=undefined, oldValues={}) {\n\n\tlet animElement = element.cloneNode(true);\n\tlet newElement = element.cloneNode(true);\n\n\tfor(var attributeName in props) {\n\t\tlet animateElement;\n\t\tif(attributeName === 'transform') {\n\t\t\tanimateElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"animateTransform\");\n\t\t} else {\n\t\t\tanimateElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"animate\");\n\t\t}\n\t\tlet currentValue = oldValues[attributeName] || element.getAttribute(attributeName);\n\t\tlet value = props[attributeName];\n\n\t\tlet animAttr = {\n\t\t\tattributeName: attributeName,\n\t\t\tfrom: currentValue,\n\t\t\tto: value,\n\t\t\tbegin: \"0s\",\n\t\t\tdur: dur/1000 + \"s\",\n\t\t\tvalues: currentValue + \";\" + value,\n\t\t\tkeySplines: EASING[easingType],\n\t\t\tkeyTimes: \"0;1\",\n\t\t\tcalcMode: \"spline\",\n\t\t\tfill: 'freeze'\n\t\t};\n\n\t\tif(type) {\n\t\t\tanimAttr[\"type\"] = type;\n\t\t}\n\n\t\tfor (var i in animAttr) {\n\t\t\tanimateElement.setAttribute(i, animAttr[i]);\n\t\t}\n\n\t\tanimElement.appendChild(animateElement);\n\n\t\tif(type) {\n\t\t\tnewElement.setAttribute(attributeName, `translate(${value})`);\n\t\t} else {\n\t\t\tnewElement.setAttribute(attributeName, value);\n\t\t}\n\t}\n\n\treturn [animElement, newElement];\n}\n\nfunction transform(element, style) { // eslint-disable-line no-unused-vars\n\telement.style.transform = style;\n\telement.style.webkitTransform = style;\n\telement.style.msTransform = style;\n\telement.style.mozTransform = style;\n\telement.style.oTransform = style;\n}\n\nfunction animateSVG(svgContainer, elements) {\n\tlet newElements = [];\n\tlet animElements = [];\n\n\telements.map(element => {\n\t\tlet unit = element[0];\n\t\tlet parent = unit.parentNode;\n\n\t\tlet animElement, newElement;\n\n\t\telement[0] = unit;\n\t\t[animElement, newElement] = animateSVGElement(...element);\n\n\t\tnewElements.push(newElement);\n\t\tanimElements.push([animElement, parent]);\n\n\t\tparent.replaceChild(animElement, unit);\n\t});\n\n\tlet animSvg = svgContainer.cloneNode(true);\n\n\tanimElements.map((animElement, i) => {\n\t\tanimElement[1].replaceChild(newElements[i], animElement[0]);\n\t\telements[i][0] = newElements[i];\n\t});\n\n\treturn animSvg;\n}\n\nfunction runSMILAnimation(parent, svgElement, elementsToAnimate) {\n\tif(elementsToAnimate.length === 0) return;\n\n\tlet animSvgElement = animateSVG(svgElement, elementsToAnimate);\n\tif(svgElement.parentNode == parent) {\n\t\tparent.removeChild(svgElement);\n\t\tparent.appendChild(animSvgElement);\n\n\t}\n\n\t// Replace the new svgElement (data has already been replaced)\n\tsetTimeout(() => {\n\t\tif(animSvgElement.parentNode == parent) {\n\t\t\tparent.removeChild(animSvgElement);\n\t\t\tparent.appendChild(svgElement);\n\t\t}\n\t}, REPLACE_ALL_NEW_DUR);\n}\n\nconst CSSTEXT = \".chart-container{position:relative;font-family:-apple-system,BlinkMacSystemFont,'Segoe UI','Roboto','Oxygen','Ubuntu','Cantarell','Fira Sans','Droid Sans','Helvetica Neue',sans-serif}.chart-container .axis,.chart-container .chart-label{fill:#555b51}.chart-container .axis line,.chart-container .chart-label line{stroke:#dadada}.chart-container .dataset-units circle{stroke:#fff;stroke-width:2}.chart-container .dataset-units path{fill:none;stroke-opacity:1;stroke-width:2px}.chart-container .dataset-path{stroke-width:2px}.chart-container .path-group path{fill:none;stroke-opacity:1;stroke-width:2px}.chart-container line.dashed{stroke-dasharray:5,3}.chart-container .axis-line .specific-value{text-anchor:start}.chart-container .axis-line .y-line{text-anchor:end}.chart-container .axis-line .x-line{text-anchor:middle}.chart-container .legend-dataset-text{fill:#6c7680;font-weight:600}.graph-svg-tip{position:absolute;z-index:99999;padding:10px;font-size:12px;color:#959da5;text-align:center;background:rgba(0,0,0,.8);border-radius:3px}.graph-svg-tip ul{padding-left:0;display:flex}.graph-svg-tip ol{padding-left:0;display:flex}.graph-svg-tip ul.data-point-list li{min-width:90px;flex:1;font-weight:600}.graph-svg-tip strong{color:#dfe2e5;font-weight:600}.graph-svg-tip .svg-pointer{position:absolute;height:5px;margin:0 0 0 -5px;content:' ';border:5px solid transparent;border-top-color:rgba(0,0,0,.8)}.graph-svg-tip.comparison{padding:0;text-align:left;pointer-events:none}.graph-svg-tip.comparison .title{display:block;padding:10px;margin:0;font-weight:600;line-height:1;pointer-events:none}.graph-svg-tip.comparison ul{margin:0;white-space:nowrap;list-style:none}.graph-svg-tip.comparison li{display:inline-block;padding:5px 10px}\";\n\nfunction downloadFile(filename, data) {\n\tvar a = document.createElement('a');\n\ta.style = \"display: none\";\n\tvar blob = new Blob(data, {type: \"image/svg+xml; charset=utf-8\"});\n\tvar url = window.URL.createObjectURL(blob);\n\ta.href = url;\n\ta.download = filename;\n\tdocument.body.appendChild(a);\n\ta.click();\n\tsetTimeout(function(){\n\t\tdocument.body.removeChild(a);\n\t\twindow.URL.revokeObjectURL(url);\n\t}, 300);\n}\n\nfunction prepareForExport(svg) {\n\tlet clone = svg.cloneNode(true);\n\tclone.classList.add('chart-container');\n\tclone.setAttribute('xmlns', \"http://www.w3.org/2000/svg\");\n\tclone.setAttribute('xmlns:xlink', \"http://www.w3.org/1999/xlink\");\n\tlet styleEl = $.create('style', {\n\t\t'innerHTML': CSSTEXT\n\t});\n\tclone.insertBefore(styleEl, clone.firstChild);\n\n\tlet container = $.create('div');\n\tcontainer.appendChild(clone);\n\n\treturn container.innerHTML;\n}\n\nlet BOUND_DRAW_FN;\n\nclass BaseChart {\n\tconstructor(parent, options) {\n\n\t\tthis.parent = typeof parent === 'string'\n\t\t\t? document.querySelector(parent)\n\t\t\t: parent;\n\n\t\tif (!(this.parent instanceof HTMLElement)) {\n\t\t\tthrow new Error('No `parent` element to render on was provided.');\n\t\t}\n\n\t\tthis.rawChartArgs = options;\n\n\t\tthis.title = options.title || '';\n\t\tthis.type = options.type || '';\n\n\t\tthis.realData = this.prepareData(options.data);\n\t\tthis.data = this.prepareFirstData(this.realData);\n\n\t\tthis.colors = this.validateColors(options.colors, this.type);\n\n\t\tthis.config = {\n\t\t\tshowTooltip: 1, // calculate\n\t\t\tshowLegend: 1, // calculate\n\t\t\tisNavigable: options.isNavigable || 0,\n\t\t\tanimate: 1,\n\t\t\ttruncateLegends: options.truncateLegends || 0\n\t\t};\n\n\t\tthis.measures = JSON.parse(JSON.stringify(BASE_MEASURES));\n\t\tlet m = this.measures;\n\t\tthis.setMeasures(options);\n\t\tif(!this.title.length) { m.titleHeight = 0; }\n\t\tif(!this.config.showLegend) m.legendHeight = 0;\n\t\tthis.argHeight = options.height || m.baseHeight;\n\n\t\tthis.state = {};\n\t\tthis.options = {};\n\n\t\tthis.initTimeout = INIT_CHART_UPDATE_TIMEOUT;\n\n\t\tif(this.config.isNavigable) {\n\t\t\tthis.overlays = [];\n\t\t}\n\n\t\tthis.configure(options);\n\t}\n\n\tprepareData(data) {\n\t\treturn data;\n\t}\n\n\tprepareFirstData(data) {\n\t\treturn data;\n\t}\n\n\tvalidateColors(colors, type) {\n\t\tconst validColors = [];\n\t\tcolors = (colors || []).concat(DEFAULT_COLORS[type]);\n\t\tcolors.forEach((string) => {\n\t\t\tconst color = getColor(string);\n\t\t\tif(!isValidColor(color)) {\n\t\t\t\tconsole.warn('\"' + string + '\" is not a valid color.');\n\t\t\t} else {\n\t\t\t\tvalidColors.push(color);\n\t\t\t}\n\t\t});\n\t\treturn validColors;\n\t}\n\n\tsetMeasures() {\n\t\t// Override measures, including those for title and legend\n\t\t// set config for legend and title\n\t}\n\n\tconfigure() {\n\t\tlet height = this.argHeight;\n\t\tthis.baseHeight = height;\n\t\tthis.height = height - getExtraHeight(this.measures);\n\n\t\t// Bind window events\n\t\tBOUND_DRAW_FN = this.boundDrawFn.bind(this);\n\t\twindow.addEventListener('resize', BOUND_DRAW_FN);\n\t\twindow.addEventListener('orientationchange', this.boundDrawFn.bind(this));\n\t}\n\n\tboundDrawFn() {\n\t\tthis.draw(true);\n\t}\n\n\tunbindWindowEvents() {\n\t\twindow.removeEventListener('resize', BOUND_DRAW_FN);\n\t\twindow.removeEventListener('orientationchange', this.boundDrawFn.bind(this));\n\t}\n\n\t// Has to be called manually\n\tsetup() {\n\t\tthis.makeContainer();\n\t\tthis.updateWidth();\n\t\tthis.makeTooltip();\n\n\t\tthis.draw(false, true);\n\t}\n\n\tmakeContainer() {\n\t\t// Chart needs a dedicated parent element\n\t\tthis.parent.innerHTML = '';\n\n\t\tlet args = {\n\t\t\tinside: this.parent,\n\t\t\tclassName: 'chart-container'\n\t\t};\n\n\t\tif(this.independentWidth) {\n\t\t\targs.styles = { width: this.independentWidth + 'px' };\n\t\t}\n\n\t\tthis.container = $.create('div', args);\n\t}\n\n\tmakeTooltip() {\n\t\tthis.tip = new SvgTip({\n\t\t\tparent: this.container,\n\t\t\tcolors: this.colors\n\t\t});\n\t\tthis.bindTooltip();\n\t}\n\n\tbindTooltip() {}\n\n\tdraw(onlyWidthChange=false, init=false) {\n\t\tthis.updateWidth();\n\n\t\tthis.calc(onlyWidthChange);\n\t\tthis.makeChartArea();\n\t\tthis.setupComponents();\n\n\t\tthis.components.forEach(c => c.setup(this.drawArea));\n\t\t// this.components.forEach(c => c.make());\n\t\tthis.render(this.components, false);\n\n\t\tif(init) {\n\t\t\tthis.data = this.realData;\n\t\t\tsetTimeout(() => {this.update(this.data);}, this.initTimeout);\n\t\t}\n\n\t\tthis.renderLegend();\n\n\t\tthis.setupNavigation(init);\n\t}\n\n\tcalc() {} // builds state\n\n\tupdateWidth() {\n\t\tthis.baseWidth = getElementContentWidth(this.parent);\n\t\tthis.width = this.baseWidth - getExtraWidth(this.measures);\n\t}\n\n\tmakeChartArea() {\n\t\tif(this.svg) {\n\t\t\tthis.container.removeChild(this.svg);\n\t\t}\n\t\tlet m = this.measures;\n\n\t\tthis.svg = makeSVGContainer(\n\t\t\tthis.container,\n\t\t\t'frappe-chart chart',\n\t\t\tthis.baseWidth,\n\t\t\tthis.baseHeight\n\t\t);\n\t\tthis.svgDefs = makeSVGDefs(this.svg);\n\n\t\tif(this.title.length) {\n\t\t\tthis.titleEL = makeText(\n\t\t\t\t'title',\n\t\t\t\tm.margins.left,\n\t\t\t\tm.margins.top,\n\t\t\t\tthis.title,\n\t\t\t\t{\n\t\t\t\t\tfontSize: m.titleFontSize,\n\t\t\t\t\tfill: '#666666',\n\t\t\t\t\tdy: m.titleFontSize\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\tlet top = getTopOffset(m);\n\t\tthis.drawArea = makeSVGGroup(\n\t\t\tthis.type + '-chart chart-draw-area',\n\t\t\t`translate(${getLeftOffset(m)}, ${top})`\n\t\t);\n\n\t\tif(this.config.showLegend) {\n\t\t\ttop += this.height + m.paddings.bottom;\n\t\t\tthis.legendArea = makeSVGGroup(\n\t\t\t\t'chart-legend',\n\t\t\t\t`translate(${getLeftOffset(m)}, ${top})`\n\t\t\t);\n\t\t}\n\n\t\tif(this.title.length) { this.svg.appendChild(this.titleEL); }\n\t\tthis.svg.appendChild(this.drawArea);\n\t\tif(this.config.showLegend) { this.svg.appendChild(this.legendArea); }\n\n\t\tthis.updateTipOffset(getLeftOffset(m), getTopOffset(m));\n\t}\n\n\tupdateTipOffset(x, y) {\n\t\tthis.tip.offset = {\n\t\t\tx: x,\n\t\t\ty: y\n\t\t};\n\t}\n\n\tsetupComponents() { this.components = new Map(); }\n\n\tupdate(data) {\n\t\tif(!data) {\n\t\t\tconsole.error('No data to update.');\n\t\t}\n\t\tthis.data = this.prepareData(data);\n\t\tthis.calc(); // builds state\n\t\tthis.render();\n\t}\n\n\trender(components=this.components, animate=true) {\n\t\tif(this.config.isNavigable) {\n\t\t\t// Remove all existing overlays\n\t\t\tthis.overlays.map(o => o.parentNode.removeChild(o));\n\t\t\t// ref.parentNode.insertBefore(element, ref);\n\t\t}\n\t\tlet elementsToAnimate = [];\n\t\t// Can decouple to this.refreshComponents() first to save animation timeout\n\t\tcomponents.forEach(c => {\n\t\t\telementsToAnimate = elementsToAnimate.concat(c.update(animate));\n\t\t});\n\t\tif(elementsToAnimate.length > 0) {\n\t\t\trunSMILAnimation(this.container, this.svg, elementsToAnimate);\n\t\t\tsetTimeout(() => {\n\t\t\t\tcomponents.forEach(c => c.make());\n\t\t\t\tthis.updateNav();\n\t\t\t}, CHART_POST_ANIMATE_TIMEOUT);\n\t\t} else {\n\t\t\tcomponents.forEach(c => c.make());\n\t\t\tthis.updateNav();\n\t\t}\n\t}\n\n\tupdateNav() {\n\t\tif(this.config.isNavigable) {\n\t\t\tthis.makeOverlay();\n\t\t\tthis.bindUnits();\n\t\t}\n\t}\n\n\trenderLegend() {}\n\n\tsetupNavigation(init=false) {\n\t\tif(!this.config.isNavigable) return;\n\n\t\tif(init) {\n\t\t\tthis.bindOverlay();\n\n\t\t\tthis.keyActions = {\n\t\t\t\t'13': this.onEnterKey.bind(this),\n\t\t\t\t'37': this.onLeftArrow.bind(this),\n\t\t\t\t'38': this.onUpArrow.bind(this),\n\t\t\t\t'39': this.onRightArrow.bind(this),\n\t\t\t\t'40': this.onDownArrow.bind(this),\n\t\t\t};\n\n\t\t\tdocument.addEventListener('keydown', (e) => {\n\t\t\t\tif(isElementInViewport(this.container)) {\n\t\t\t\t\te = e || window.event;\n\t\t\t\t\tif(this.keyActions[e.keyCode]) {\n\t\t\t\t\t\tthis.keyActions[e.keyCode]();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tmakeOverlay() {}\n\tupdateOverlay() {}\n\tbindOverlay() {}\n\tbindUnits() {}\n\n\tonLeftArrow() {}\n\tonRightArrow() {}\n\tonUpArrow() {}\n\tonDownArrow() {}\n\tonEnterKey() {}\n\n\taddDataPoint() {}\n\tremoveDataPoint() {}\n\n\tgetDataPoint() {}\n\tsetCurrentDataPoint() {}\n\n\tupdateDataset() {}\n\n\texport() {\n\t\tlet chartSvg = prepareForExport(this.svg);\n\t\tdownloadFile(this.title || 'Chart', [chartSvg]);\n\t}\n}\n\nclass AggregationChart extends BaseChart {\n\tconstructor(parent, args) {\n\t\tsuper(parent, args);\n\t}\n\n\tconfigure(args) {\n\t\tsuper.configure(args);\n\n\t\tthis.config.maxSlices = args.maxSlices || 20;\n\t\tthis.config.maxLegendPoints = args.maxLegendPoints || 20;\n\t}\n\n\tcalc() {\n\t\tlet s = this.state;\n\t\tlet maxSlices = this.config.maxSlices;\n\t\ts.sliceTotals = [];\n\n\t\tlet allTotals = this.data.labels.map((label, i) => {\n\t\t\tlet total = 0;\n\t\t\tthis.data.datasets.map(e => {\n\t\t\t\ttotal += e.values[i];\n\t\t\t});\n\t\t\treturn [total, label];\n\t\t}).filter(d => { return d[0] >= 0; }); // keep only positive results\n\n\t\tlet totals = allTotals;\n\t\tif(allTotals.length > maxSlices) {\n\t\t\t// Prune and keep a grey area for rest as per maxSlices\n\t\t\tallTotals.sort((a, b) => { return b[0] - a[0]; });\n\n\t\t\ttotals = allTotals.slice(0, maxSlices-1);\n\t\t\tlet remaining = allTotals.slice(maxSlices-1);\n\n\t\t\tlet sumOfRemaining = 0;\n\t\t\tremaining.map(d => {sumOfRemaining += d[0];});\n\t\t\ttotals.push([sumOfRemaining, 'Rest']);\n\t\t\tthis.colors[maxSlices-1] = 'grey';\n\t\t}\n\n\t\ts.labels = [];\n\t\ttotals.map(d => {\n\t\t\ts.sliceTotals.push(d[0]);\n\t\t\ts.labels.push(d[1]);\n\t\t});\n\n\t\ts.grandTotal = s.sliceTotals.reduce((a, b) => a + b, 0);\n\n\t\tthis.center = {\n\t\t\tx: this.width / 2,\n\t\t\ty: this.height / 2\n\t\t};\n\t}\n\n\trenderLegend() {\n\t\tlet s = this.state;\n\t\tthis.legendArea.textContent = '';\n\t\tthis.legendTotals = s.sliceTotals.slice(0, this.config.maxLegendPoints);\n\n\t\tlet count = 0;\n\t\tlet y = 0;\n\t\tthis.legendTotals.map((d, i) => {\n\t\t\tlet barWidth = 110;\n\t\t\tlet divisor = Math.floor(\n\t\t\t\t(this.width - getExtraWidth(this.measures))/barWidth\n\t\t\t);\n\t\t\tif (this.legendTotals.length < divisor) {\n\t\t\t\tbarWidth = this.width/this.legendTotals.length;\n\t\t\t}\n\t\t\tif(count > divisor) {\n\t\t\t\tcount = 0;\n\t\t\t\ty += 20;\n\t\t\t}\n\t\t\tlet x = barWidth * count + 5;\n\t\t\tlet dot = legendDot(\n\t\t\t\tx,\n\t\t\t\ty,\n\t\t\t\t5,\n\t\t\t\tthis.colors[i],\n\t\t\t\t`${s.labels[i]}: ${d}`\n\t\t\t);\n\t\t\tthis.legendArea.appendChild(dot);\n\t\t\tcount++;\n\t\t});\n\t}\n}\n\n// Playing around with dates\n\nconst NO_OF_YEAR_MONTHS = 12;\nconst NO_OF_DAYS_IN_WEEK = 7;\n\nconst NO_OF_MILLIS = 1000;\nconst SEC_IN_DAY = 86400;\n\nconst MONTH_NAMES = [\"January\", \"February\", \"March\", \"April\", \"May\",\n\t\"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n\nconst DAY_NAMES_SHORT = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\n\n// https://stackoverflow.com/a/11252167/6495043\nfunction treatAsUtc(date) {\n\tlet result = new Date(date);\n\tresult.setMinutes(result.getMinutes() - result.getTimezoneOffset());\n\treturn result;\n}\n\nfunction getYyyyMmDd(date) {\n\tlet dd = date.getDate();\n\tlet mm = date.getMonth() + 1; // getMonth() is zero-based\n\treturn [\n\t\tdate.getFullYear(),\n\t\t(mm>9 ? '' : '0') + mm,\n\t\t(dd>9 ? '' : '0') + dd\n\t].join('-');\n}\n\nfunction clone(date) {\n\treturn new Date(date.getTime());\n}\n\n\n\n\n\n// export function getMonthsBetween(startDate, endDate) {}\n\nfunction getWeeksBetween(startDate, endDate) {\n\tlet weekStartDate = setDayToSunday(startDate);\n\treturn Math.ceil(getDaysBetween(weekStartDate, endDate) / NO_OF_DAYS_IN_WEEK);\n}\n\nfunction getDaysBetween(startDate, endDate) {\n\tlet millisecondsPerDay = SEC_IN_DAY * NO_OF_MILLIS;\n\treturn (treatAsUtc(endDate) - treatAsUtc(startDate)) / millisecondsPerDay;\n}\n\nfunction areInSameMonth(startDate, endDate) {\n\treturn startDate.getMonth() === endDate.getMonth()\n\t\t&& startDate.getFullYear() === endDate.getFullYear();\n}\n\nfunction getMonthName(i, short=false) {\n\tlet monthName = MONTH_NAMES[i];\n\treturn short ? monthName.slice(0, 3) : monthName;\n}\n\nfunction getLastDateInMonth (month, year) {\n\treturn new Date(year, month + 1, 0); // 0: last day in previous month\n}\n\n// mutates\nfunction setDayToSunday(date) {\n\tlet newDate = clone(date);\n\tconst day = newDate.getDay();\n\tif(day !== 0) {\n\t\taddDays(newDate, (-1) * day);\n\t}\n\treturn newDate;\n}\n\n// mutates\nfunction addDays(date, numberOfDays) {\n\tdate.setDate(date.getDate() + numberOfDays);\n}\n\nclass ChartComponent {\n\tconstructor({\n\t\tlayerClass = '',\n\t\tlayerTransform = '',\n\t\tconstants,\n\n\t\tgetData,\n\t\tmakeElements,\n\t\tanimateElements\n\t}) {\n\t\tthis.layerTransform = layerTransform;\n\t\tthis.constants = constants;\n\n\t\tthis.makeElements = makeElements;\n\t\tthis.getData = getData;\n\n\t\tthis.animateElements = animateElements;\n\n\t\tthis.store = [];\n\t\tthis.labels = [];\n\n\t\tthis.layerClass = layerClass;\n\t\tthis.layerClass = typeof(this.layerClass) === 'function'\n\t\t\t? this.layerClass() : this.layerClass;\n\n\t\tthis.refresh();\n\t}\n\n\trefresh(data) {\n\t\tthis.data = data || this.getData();\n\t}\n\n\tsetup(parent) {\n\t\tthis.layer = makeSVGGroup(this.layerClass, this.layerTransform, parent);\n\t}\n\n\tmake() {\n\t\tthis.render(this.data);\n\t\tthis.oldData = this.data;\n\t}\n\n\trender(data) {\n\t\tthis.store = this.makeElements(data);\n\n\t\tthis.layer.textContent = '';\n\t\tthis.store.forEach(element => {\n\t\t\tthis.layer.appendChild(element);\n\t\t});\n\t\tthis.labels.forEach(element => {\n\t\t\tthis.layer.appendChild(element);\n\t\t});\n\t}\n\n\tupdate(animate = true) {\n\t\tthis.refresh();\n\t\tlet animateElements = [];\n\t\tif(animate) {\n\t\t\tanimateElements = this.animateElements(this.data) || [];\n\t\t}\n\t\treturn animateElements;\n\t}\n}\n\nlet componentConfigs = {\n\tdonutSlices: {\n\t\tlayerClass: 'donut-slices',\n\t\tmakeElements(data) {\n\t\t\treturn data.sliceStrings.map((s, i) => {\n\t\t\t\tlet slice = makePath(s, 'donut-path', data.colors[i], 'none', data.strokeWidth);\n\t\t\t\tslice.style.transition = 'transform .3s;';\n\t\t\t\treturn slice;\n\t\t\t});\n\t\t},\n\n\t\tanimateElements(newData) {\n\t\t\treturn this.store.map((slice, i) => animatePathStr(slice, newData.sliceStrings[i]));\n\t\t},\n\t},\n\tpieSlices: {\n\t\tlayerClass: 'pie-slices',\n\t\tmakeElements(data) {\n\t\t\treturn data.sliceStrings.map((s, i) =>{\n\t\t\t\tlet slice = makePath(s, 'pie-path', 'none', data.colors[i]);\n\t\t\t\tslice.style.transition = 'transform .3s;';\n\t\t\t\treturn slice;\n\t\t\t});\n\t\t},\n\n\t\tanimateElements(newData) {\n\t\t\treturn this.store.map((slice, i) =>\n\t\t\t\tanimatePathStr(slice, newData.sliceStrings[i])\n\t\t\t);\n\t\t}\n\t},\n\tpercentageBars: {\n\t\tlayerClass: 'percentage-bars',\n\t\tmakeElements(data) {\n\t\t\treturn data.xPositions.map((x, i) =>{\n\t\t\t\tlet y = 0;\n\t\t\t\tlet bar = percentageBar(x, y, data.widths[i],\n\t\t\t\t\tthis.constants.barHeight, this.constants.barDepth, data.colors[i]);\n\t\t\t\treturn bar;\n\t\t\t});\n\t\t},\n\n\t\tanimateElements(newData) {\n\t\t\tif(newData) return [];\n\t\t}\n\t},\n\tyAxis: {\n\t\tlayerClass: 'y axis',\n\t\tmakeElements(data) {\n\t\t\treturn data.positions.map((position, i) =>\n\t\t\t\tyLine(position, data.labels[i], this.constants.width,\n\t\t\t\t\t{mode: this.constants.mode, pos: this.constants.pos, shortenNumbers: this.constants.shortenNumbers})\n\t\t\t);\n\t\t},\n\n\t\tanimateElements(newData) {\n\t\t\tlet newPos = newData.positions;\n\t\t\tlet newLabels = newData.labels;\n\t\t\tlet oldPos = this.oldData.positions;\n\t\t\tlet oldLabels = this.oldData.labels;\n\n\t\t\t[oldPos, newPos] = equilizeNoOfElements(oldPos, newPos);\n\t\t\t[oldLabels, newLabels] = equilizeNoOfElements(oldLabels, newLabels);\n\n\t\t\tthis.render({\n\t\t\t\tpositions: oldPos,\n\t\t\t\tlabels: newLabels\n\t\t\t});\n\n\t\t\treturn this.store.map((line, i) => {\n\t\t\t\treturn translateHoriLine(\n\t\t\t\t\tline, newPos[i], oldPos[i]\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t},\n\n\txAxis: {\n\t\tlayerClass: 'x axis',\n\t\tmakeElements(data) {\n\t\t\treturn data.positions.map((position, i) =>\n\t\t\t\txLine(position, data.calcLabels[i], this.constants.height,\n\t\t\t\t\t{mode: this.constants.mode, pos: this.constants.pos})\n\t\t\t);\n\t\t},\n\n\t\tanimateElements(newData) {\n\t\t\tlet newPos = newData.positions;\n\t\t\tlet newLabels = newData.calcLabels;\n\t\t\tlet oldPos = this.oldData.positions;\n\t\t\tlet oldLabels = this.oldData.calcLabels;\n\n\t\t\t[oldPos, newPos] = equilizeNoOfElements(oldPos, newPos);\n\t\t\t[oldLabels, newLabels] = equilizeNoOfElements(oldLabels, newLabels);\n\n\t\t\tthis.render({\n\t\t\t\tpositions: oldPos,\n\t\t\t\tcalcLabels: newLabels\n\t\t\t});\n\n\t\t\treturn this.store.map((line, i) => {\n\t\t\t\treturn translateVertLine(\n\t\t\t\t\tline, newPos[i], oldPos[i]\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t},\n\n\tyMarkers: {\n\t\tlayerClass: 'y-markers',\n\t\tmakeElements(data) {\n\t\t\treturn data.map(m =>\n\t\t\t\tyMarker(m.position, m.label, this.constants.width,\n\t\t\t\t\t{labelPos: m.options.labelPos, mode: 'span', lineType: 'dashed'})\n\t\t\t);\n\t\t},\n\t\tanimateElements(newData) {\n\t\t\t[this.oldData, newData] = equilizeNoOfElements(this.oldData, newData);\n\n\t\t\tlet newPos = newData.map(d => d.position);\n\t\t\tlet newLabels = newData.map(d => d.label);\n\t\t\tlet newOptions = newData.map(d => d.options);\n\n\t\t\tlet oldPos = this.oldData.map(d => d.position);\n\n\t\t\tthis.render(oldPos.map((pos, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tposition: oldPos[i],\n\t\t\t\t\tlabel: newLabels[i],\n\t\t\t\t\toptions: newOptions[i]\n\t\t\t\t};\n\t\t\t}));\n\n\t\t\treturn this.store.map((line, i) => {\n\t\t\t\treturn translateHoriLine(\n\t\t\t\t\tline, newPos[i], oldPos[i]\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t},\n\n\tyRegions: {\n\t\tlayerClass: 'y-regions',\n\t\tmakeElements(data) {\n\t\t\treturn data.map(r =>\n\t\t\t\tyRegion(r.startPos, r.endPos, this.constants.width,\n\t\t\t\t\tr.label, {labelPos: r.options.labelPos})\n\t\t\t);\n\t\t},\n\t\tanimateElements(newData) {\n\t\t\t[this.oldData, newData] = equilizeNoOfElements(this.oldData, newData);\n\n\t\t\tlet newPos = newData.map(d => d.endPos);\n\t\t\tlet newLabels = newData.map(d => d.label);\n\t\t\tlet newStarts = newData.map(d => d.startPos);\n\t\t\tlet newOptions = newData.map(d => d.options);\n\n\t\t\tlet oldPos = this.oldData.map(d => d.endPos);\n\t\t\tlet oldStarts = this.oldData.map(d => d.startPos);\n\n\t\t\tthis.render(oldPos.map((pos, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tstartPos: oldStarts[i],\n\t\t\t\t\tendPos: oldPos[i],\n\t\t\t\t\tlabel: newLabels[i],\n\t\t\t\t\toptions: newOptions[i]\n\t\t\t\t};\n\t\t\t}));\n\n\t\t\tlet animateElements = [];\n\n\t\t\tthis.store.map((rectGroup, i) => {\n\t\t\t\tanimateElements = animateElements.concat(animateRegion(\n\t\t\t\t\trectGroup, newStarts[i], newPos[i], oldPos[i]\n\t\t\t\t));\n\t\t\t});\n\n\t\t\treturn animateElements;\n\t\t}\n\t},\n\n\theatDomain: {\n\t\tlayerClass: function() { return 'heat-domain domain-' + this.constants.index; },\n\t\tmakeElements(data) {\n\t\t\tlet {index, colWidth, rowHeight, squareSize, xTranslate} = this.constants;\n\t\t\tlet monthNameHeight = -12;\n\t\t\tlet x = xTranslate, y = 0;\n\n\t\t\tthis.serializedSubDomains = [];\n\n\t\t\tdata.cols.map((week, weekNo) => {\n\t\t\t\tif(weekNo === 1) {\n\t\t\t\t\tthis.labels.push(\n\t\t\t\t\t\tmakeText('domain-name', x, monthNameHeight, getMonthName(index, true).toUpperCase(),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfontSize: 9\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tweek.map((day, i) => {\n\t\t\t\t\tif(day.fill) {\n\t\t\t\t\t\tlet data = {\n\t\t\t\t\t\t\t'data-date': day.yyyyMmDd,\n\t\t\t\t\t\t\t'data-value': day.dataValue,\n\t\t\t\t\t\t\t'data-day': i\n\t\t\t\t\t\t};\n\t\t\t\t\t\tlet square = heatSquare('day', x, y, squareSize, day.fill, data);\n\t\t\t\t\t\tthis.serializedSubDomains.push(square);\n\t\t\t\t\t}\n\t\t\t\t\ty += rowHeight;\n\t\t\t\t});\n\t\t\t\ty = 0;\n\t\t\t\tx += colWidth;\n\t\t\t});\n\n\t\t\treturn this.serializedSubDomains;\n\t\t},\n\n\t\tanimateElements(newData) {\n\t\t\tif(newData) return [];\n\t\t}\n\t},\n\n\tbarGraph: {\n\t\tlayerClass: function() { return 'dataset-units dataset-bars dataset-' + this.constants.index; },\n\t\tmakeElements(data) {\n\t\t\tlet c = this.constants;\n\t\t\tthis.unitType = 'bar';\n\t\t\tthis.units = data.yPositions.map((y, j) => {\n\t\t\t\treturn datasetBar(\n\t\t\t\t\tdata.xPositions[j],\n\t\t\t\t\ty,\n\t\t\t\t\tdata.barWidth,\n\t\t\t\t\tc.color,\n\t\t\t\t\tdata.labels[j],\n\t\t\t\t\tj,\n\t\t\t\t\tdata.offsets[j],\n\t\t\t\t\t{\n\t\t\t\t\t\tzeroLine: data.zeroLine,\n\t\t\t\t\t\tbarsWidth: data.barsWidth,\n\t\t\t\t\t\tminHeight: c.minHeight\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t\t\treturn this.units;\n\t\t},\n\t\tanimateElements(newData) {\n\t\t\tlet newXPos = newData.xPositions;\n\t\t\tlet newYPos = newData.yPositions;\n\t\t\tlet newOffsets = newData.offsets;\n\t\t\tlet newLabels = newData.labels;\n\n\t\t\tlet oldXPos = this.oldData.xPositions;\n\t\t\tlet oldYPos = this.oldData.yPositions;\n\t\t\tlet oldOffsets = this.oldData.offsets;\n\t\t\tlet oldLabels = this.oldData.labels;\n\n\t\t\t[oldXPos, newXPos] = equilizeNoOfElements(oldXPos, newXPos);\n\t\t\t[oldYPos, newYPos] = equilizeNoOfElements(oldYPos, newYPos);\n\t\t\t[oldOffsets, newOffsets] = equilizeNoOfElements(oldOffsets, newOffsets);\n\t\t\t[oldLabels, newLabels] = equilizeNoOfElements(oldLabels, newLabels);\n\n\t\t\tthis.render({\n\t\t\t\txPositions: oldXPos,\n\t\t\t\tyPositions: oldYPos,\n\t\t\t\toffsets: oldOffsets,\n\t\t\t\tlabels: newLabels,\n\n\t\t\t\tzeroLine: this.oldData.zeroLine,\n\t\t\t\tbarsWidth: this.oldData.barsWidth,\n\t\t\t\tbarWidth: this.oldData.barWidth,\n\t\t\t});\n\n\t\t\tlet animateElements = [];\n\n\t\t\tthis.store.map((bar, i) => {\n\t\t\t\tanimateElements = animateElements.concat(animateBar(\n\t\t\t\t\tbar, newXPos[i], newYPos[i], newData.barWidth, newOffsets[i],\n\t\t\t\t\t{zeroLine: newData.zeroLine}\n\t\t\t\t));\n\t\t\t});\n\n\t\t\treturn animateElements;\n\t\t}\n\t},\n\n\tlineGraph: {\n\t\tlayerClass: function() { return 'dataset-units dataset-line dataset-' + this.constants.index; },\n\t\tmakeElements(data) {\n\t\t\tlet c = this.constants;\n\t\t\tthis.unitType = 'dot';\n\t\t\tthis.paths = {};\n\t\t\tif(!c.hideLine) {\n\t\t\t\tthis.paths = getPaths(\n\t\t\t\t\tdata.xPositions,\n\t\t\t\t\tdata.yPositions,\n\t\t\t\t\tc.color,\n\t\t\t\t\t{\n\t\t\t\t\t\theatline: c.heatline,\n\t\t\t\t\t\tregionFill: c.regionFill\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tsvgDefs: c.svgDefs,\n\t\t\t\t\t\tzeroLine: data.zeroLine\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.units = [];\n\t\t\tif(!c.hideDots) {\n\t\t\t\tthis.units = data.yPositions.map((y, j) => {\n\t\t\t\t\treturn datasetDot(\n\t\t\t\t\t\tdata.xPositions[j],\n\t\t\t\t\t\ty,\n\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\tc.color,\n\t\t\t\t\t\t(c.valuesOverPoints ? data.values[j] : ''),\n\t\t\t\t\t\tj\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn Object.values(this.paths).concat(this.units);\n\t\t},\n\t\tanimateElements(newData) {\n\t\t\tlet newXPos = newData.xPositions;\n\t\t\tlet newYPos = newData.yPositions;\n\t\t\tlet newValues = newData.values;\n\n\t\t\tlet oldXPos = this.oldData.xPositions;\n\t\t\tlet oldYPos = this.oldData.yPositions;\n\t\t\tlet oldValues = this.oldData.values;\n\n\t\t\t[oldXPos, newXPos] = equilizeNoOfElements(oldXPos, newXPos);\n\t\t\t[oldYPos, newYPos] = equilizeNoOfElements(oldYPos, newYPos);\n\t\t\t[oldValues, newValues] = equilizeNoOfElements(oldValues, newValues);\n\n\t\t\tthis.render({\n\t\t\t\txPositions: oldXPos,\n\t\t\t\tyPositions: oldYPos,\n\t\t\t\tvalues: newValues,\n\n\t\t\t\tzeroLine: this.oldData.zeroLine,\n\t\t\t\tradius: this.oldData.radius,\n\t\t\t});\n\n\t\t\tlet animateElements = [];\n\n\t\t\tif(Object.keys(this.paths).length) {\n\t\t\t\tanimateElements = animateElements.concat(animatePath(\n\t\t\t\t\tthis.paths, newXPos, newYPos, newData.zeroLine));\n\t\t\t}\n\n\t\t\tif(this.units.length) {\n\t\t\t\tthis.units.map((dot, i) => {\n\t\t\t\t\tanimateElements = animateElements.concat(animateDot(\n\t\t\t\t\t\tdot, newXPos[i], newYPos[i]));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn animateElements;\n\t\t}\n\t}\n};\n\nfunction getComponent(name, constants, getData) {\n\tlet keys = Object.keys(componentConfigs).filter(k => name.includes(k));\n\tlet config = componentConfigs[keys[0]];\n\tObject.assign(config, {\n\t\tconstants: constants,\n\t\tgetData: getData\n\t});\n\treturn new ChartComponent(config);\n}\n\nclass PercentageChart extends AggregationChart {\n\tconstructor(parent, args) {\n\t\tsuper(parent, args);\n\t\tthis.type = 'percentage';\n\t\tthis.setup();\n\t}\n\n\tsetMeasures(options) {\n\t\tlet m = this.measures;\n\t\tthis.barOptions = options.barOptions || {};\n\n\t\tlet b = this.barOptions;\n\t\tb.height = b.height || PERCENTAGE_BAR_DEFAULT_HEIGHT;\n\t\tb.depth = b.depth || PERCENTAGE_BAR_DEFAULT_DEPTH;\n\n\t\tm.paddings.right = 30;\n\t\tm.legendHeight = 60;\n\t\tm.baseHeight = (b.height + b.depth * 0.5) * 8;\n\t}\n\n\tsetupComponents() {\n\t\tlet s = this.state;\n\n\t\tlet componentConfigs = [\n\t\t\t[\n\t\t\t\t'percentageBars',\n\t\t\t\t{\n\t\t\t\t\tbarHeight: this.barOptions.height,\n\t\t\t\t\tbarDepth: this.barOptions.depth,\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\txPositions: s.xPositions,\n\t\t\t\t\t\twidths: s.widths,\n\t\t\t\t\t\tcolors: this.colors\n\t\t\t\t\t};\n\t\t\t\t}.bind(this)\n\t\t\t]\n\t\t];\n\n\t\tthis.components = new Map(componentConfigs\n\t\t\t.map(args => {\n\t\t\t\tlet component = getComponent(...args);\n\t\t\t\treturn [args[0], component];\n\t\t\t}));\n\t}\n\n\tcalc() {\n\t\tsuper.calc();\n\t\tlet s = this.state;\n\n\t\ts.xPositions = [];\n\t\ts.widths = [];\n\n\t\tlet xPos = 0;\n\t\ts.sliceTotals.map((value) => {\n\t\t\tlet width = this.width * value / s.grandTotal;\n\t\t\ts.widths.push(width);\n\t\t\ts.xPositions.push(xPos);\n\t\t\txPos += width;\n\t\t});\n\t}\n\n\tmakeDataByIndex() { }\n\n\tbindTooltip() {\n\t\tlet s = this.state;\n\t\tthis.container.addEventListener('mousemove', (e) => {\n\t\t\tlet bars = this.components.get('percentageBars').store;\n\t\t\tlet bar = e.target;\n\t\t\tif(bars.includes(bar)) {\n\n\t\t\t\tlet i = bars.indexOf(bar);\n\t\t\t\tlet gOff = getOffset(this.container), pOff = getOffset(bar);\n\n\t\t\t\tlet x = pOff.left - gOff.left + parseInt(bar.getAttribute('width'))/2;\n\t\t\t\tlet y = pOff.top - gOff.top;\n\t\t\t\tlet title = (this.formattedLabels && this.formattedLabels.length>0\n\t\t\t\t\t? this.formattedLabels[i] : this.state.labels[i]) + ': ';\n\t\t\t\tlet fraction = s.sliceTotals[i]/s.grandTotal;\n\n\t\t\t\tthis.tip.setValues(x, y, {name: title, value: (fraction*100).toFixed(1) + \"%\"});\n\t\t\t\tthis.tip.showTip();\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass PieChart extends AggregationChart {\n\tconstructor(parent, args) {\n\t\tsuper(parent, args);\n\t\tthis.type = 'pie';\n\t\tthis.initTimeout = 0;\n\t\tthis.init = 1;\n\n\t\tthis.setup();\n\t}\n\n\tconfigure(args) {\n\t\tsuper.configure(args);\n\t\tthis.mouseMove = this.mouseMove.bind(this);\n\t\tthis.mouseLeave = this.mouseLeave.bind(this);\n\n\t\tthis.hoverRadio = args.hoverRadio || 0.1;\n\t\tthis.config.startAngle = args.startAngle || 0;\n\n\t\tthis.clockWise = args.clockWise || false;\n\t}\n\n\tcalc() {\n\t\tsuper.calc();\n\t\tlet s = this.state;\n\t\tthis.radius = (this.height > this.width ? this.center.x : this.center.y);\n\n\t\tconst { radius, clockWise } = this;\n\n\t\tconst prevSlicesProperties = s.slicesProperties || [];\n\t\ts.sliceStrings = [];\n\t\ts.slicesProperties = [];\n\t\tlet curAngle = 180 - this.config.startAngle;\n\t\ts.sliceTotals.map((total, i) => {\n\t\t\tconst startAngle = curAngle;\n\t\t\tconst originDiffAngle = (total / s.grandTotal) * FULL_ANGLE;\n\t\t\tconst largeArc = originDiffAngle > 180 ? 1: 0;\n\t\t\tconst diffAngle = clockWise ? -originDiffAngle : originDiffAngle;\n\t\t\tconst endAngle = curAngle = curAngle + diffAngle;\n\t\t\tconst startPosition = getPositionByAngle(startAngle, radius);\n\t\t\tconst endPosition = getPositionByAngle(endAngle, radius);\n\n\t\t\tconst prevProperty = this.init && prevSlicesProperties[i];\n\n\t\t\tlet curStart,curEnd;\n\t\t\tif(this.init) {\n\t\t\t\tcurStart = prevProperty ? prevProperty.startPosition : startPosition;\n\t\t\t\tcurEnd = prevProperty ? prevProperty.endPosition : startPosition;\n\t\t\t} else {\n\t\t\t\tcurStart = startPosition;\n\t\t\t\tcurEnd = endPosition;\n\t\t\t}\n\t\t\tconst curPath =\n\t\t\t\toriginDiffAngle === 360\n\t\t\t\t\t? makeCircleStr(curStart, curEnd, this.center, this.radius, clockWise, largeArc)\n\t\t\t\t\t: makeArcPathStr(curStart, curEnd, this.center, this.radius, clockWise, largeArc);\n\n\t\t\ts.sliceStrings.push(curPath);\n\t\t\ts.slicesProperties.push({\n\t\t\t\tstartPosition,\n\t\t\t\tendPosition,\n\t\t\t\tvalue: total,\n\t\t\t\ttotal: s.grandTotal,\n\t\t\t\tstartAngle,\n\t\t\t\tendAngle,\n\t\t\t\tangle: diffAngle\n\t\t\t});\n\n\t\t});\n\t\tthis.init = 0;\n\t}\n\n\tsetupComponents() {\n\t\tlet s = this.state;\n\n\t\tlet componentConfigs = [\n\t\t\t[\n\t\t\t\t'pieSlices',\n\t\t\t\t{ },\n\t\t\t\tfunction() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tsliceStrings: s.sliceStrings,\n\t\t\t\t\t\tcolors: this.colors\n\t\t\t\t\t};\n\t\t\t\t}.bind(this)\n\t\t\t]\n\t\t];\n\n\t\tthis.components = new Map(componentConfigs\n\t\t\t.map(args => {\n\t\t\t\tlet component = getComponent(...args);\n\t\t\t\treturn [args[0], component];\n\t\t\t}));\n\t}\n\n\tcalTranslateByAngle(property){\n\t\tconst{radius,hoverRadio} = this;\n\t\tconst position = getPositionByAngle(property.startAngle+(property.angle / 2),radius);\n\t\treturn `translate3d(${(position.x) * hoverRadio}px,${(position.y) * hoverRadio}px,0)`;\n\t}\n\n\thoverSlice(path,i,flag,e){\n\t\tif(!path) return;\n\t\tconst color = this.colors[i];\n\t\tif(flag) {\n\t\t\ttransform(path, this.calTranslateByAngle(this.state.slicesProperties[i]));\n\t\t\tpath.style.fill = lightenDarkenColor(color, 50);\n\t\t\tlet g_off = getOffset(this.svg);\n\t\t\tlet x = e.pageX - g_off.left + 10;\n\t\t\tlet y = e.pageY - g_off.top - 10;\n\t\t\tlet title = (this.formatted_labels && this.formatted_labels.length > 0\n\t\t\t\t? this.formatted_labels[i] : this.state.labels[i]) + ': ';\n\t\t\tlet percent = (this.state.sliceTotals[i] * 100 / this.state.grandTotal).toFixed(1);\n\t\t\tthis.tip.setValues(x, y, {name: title, value: percent + \"%\"});\n\t\t\tthis.tip.showTip();\n\t\t} else {\n\t\t\ttransform(path,'translate3d(0,0,0)');\n\t\t\tthis.tip.hideTip();\n\t\t\tpath.style.fill = color;\n\t\t}\n\t}\n\n\tbindTooltip() {\n\t\tthis.container.addEventListener('mousemove', this.mouseMove);\n\t\tthis.container.addEventListener('mouseleave', this.mouseLeave);\n\t}\n\n\tmouseMove(e){\n\t\tconst target = e.target;\n\t\tlet slices = this.components.get('pieSlices').store;\n\t\tlet prevIndex = this.curActiveSliceIndex;\n\t\tlet prevAcitve = this.curActiveSlice;\n\t\tif(slices.includes(target)) {\n\t\t\tlet i = slices.indexOf(target);\n\t\t\tthis.hoverSlice(prevAcitve, prevIndex,false);\n\t\t\tthis.curActiveSlice = target;\n\t\t\tthis.curActiveSliceIndex = i;\n\t\t\tthis.hoverSlice(target, i, true, e);\n\t\t} else {\n\t\t\tthis.mouseLeave();\n\t\t}\n\t}\n\n\tmouseLeave(){\n\t\tthis.hoverSlice(this.curActiveSlice,this.curActiveSliceIndex,false);\n\t}\n}\n\nfunction normalize(x) {\n\t// Calculates mantissa and exponent of a number\n\t// Returns normalized number and exponent\n\t// https://stackoverflow.com/q/9383593/6495043\n\n\tif(x===0) {\n\t\treturn [0, 0];\n\t}\n\tif(isNaN(x)) {\n\t\treturn {mantissa: -6755399441055744, exponent: 972};\n\t}\n\tvar sig = x > 0 ? 1 : -1;\n\tif(!isFinite(x)) {\n\t\treturn {mantissa: sig * 4503599627370496, exponent: 972};\n\t}\n\n\tx = Math.abs(x);\n\tvar exp = Math.floor(Math.log10(x));\n\tvar man = x/Math.pow(10, exp);\n\n\treturn [sig * man, exp];\n}\n\nfunction getChartRangeIntervals(max, min=0) {\n\tlet upperBound = Math.ceil(max);\n\tlet lowerBound = Math.floor(min);\n\tlet range = upperBound - lowerBound;\n\n\tlet noOfParts = range;\n\tlet partSize = 1;\n\n\t// To avoid too many partitions\n\tif(range > 5) {\n\t\tif(range % 2 !== 0) {\n\t\t\tupperBound++;\n\t\t\t// Recalc range\n\t\t\trange = upperBound - lowerBound;\n\t\t}\n\t\tnoOfParts = range/2;\n\t\tpartSize = 2;\n\t}\n\n\t// Special case: 1 and 2\n\tif(range <= 2) {\n\t\tnoOfParts = 4;\n\t\tpartSize = range/noOfParts;\n\t}\n\n\t// Special case: 0\n\tif(range === 0) {\n\t\tnoOfParts = 5;\n\t\tpartSize = 1;\n\t}\n\n\tlet intervals = [];\n\tfor(var i = 0; i <= noOfParts; i++){\n\t\tintervals.push(lowerBound + partSize * i);\n\t}\n\treturn intervals;\n}\n\nfunction getChartIntervals(maxValue, minValue=0) {\n\tlet [normalMaxValue, exponent] = normalize(maxValue);\n\tlet normalMinValue = minValue ? minValue/Math.pow(10, exponent): 0;\n\n\t// Allow only 7 significant digits\n\tnormalMaxValue = normalMaxValue.toFixed(6);\n\n\tlet intervals = getChartRangeIntervals(normalMaxValue, normalMinValue);\n\tintervals = intervals.map(value => value * Math.pow(10, exponent));\n\treturn intervals;\n}\n\nfunction calcChartIntervals(values, withMinimum=false) {\n\t//*** Where the magic happens ***\n\n\t// Calculates best-fit y intervals from given values\n\t// and returns the interval array\n\n\tlet maxValue = Math.max(...values);\n\tlet minValue = Math.min(...values);\n\n\t// Exponent to be used for pretty print\n\tlet exponent = 0, intervals = []; // eslint-disable-line no-unused-vars\n\n\tfunction getPositiveFirstIntervals(maxValue, absMinValue) {\n\t\tlet intervals = getChartIntervals(maxValue);\n\n\t\tlet intervalSize = intervals[1] - intervals[0];\n\n\t\t// Then unshift the negative values\n\t\tlet value = 0;\n\t\tfor(var i = 1; value < absMinValue; i++) {\n\t\t\tvalue += intervalSize;\n\t\t\tintervals.unshift((-1) * value);\n\t\t}\n\t\treturn intervals;\n\t}\n\n\t// CASE I: Both non-negative\n\n\tif(maxValue >= 0 && minValue >= 0) {\n\t\texponent = normalize(maxValue)[1];\n\t\tif(!withMinimum) {\n\t\t\tintervals = getChartIntervals(maxValue);\n\t\t} else {\n\t\t\tintervals = getChartIntervals(maxValue, minValue);\n\t\t}\n\t}\n\n\t// CASE II: Only minValue negative\n\n\telse if(maxValue > 0 && minValue < 0) {\n\t\t// `withMinimum` irrelevant in this case,\n\t\t// We'll be handling both sides of zero separately\n\t\t// (both starting from zero)\n\t\t// Because ceil() and floor() behave differently\n\t\t// in those two regions\n\n\t\tlet absMinValue = Math.abs(minValue);\n\n\t\tif(maxValue >= absMinValue) {\n\t\t\texponent = normalize(maxValue)[1];\n\t\t\tintervals = getPositiveFirstIntervals(maxValue, absMinValue);\n\t\t} else {\n\t\t\t// Mirror: maxValue => absMinValue, then change sign\n\t\t\texponent = normalize(absMinValue)[1];\n\t\t\tlet posIntervals = getPositiveFirstIntervals(absMinValue, maxValue);\n\t\t\tintervals = posIntervals.map(d => d * (-1));\n\t\t}\n\n\t}\n\n\t// CASE III: Both non-positive\n\n\telse if(maxValue <= 0 && minValue <= 0) {\n\t\t// Mirrored Case I:\n\t\t// Work with positives, then reverse the sign and array\n\n\t\tlet pseudoMaxValue = Math.abs(minValue);\n\t\tlet pseudoMinValue = Math.abs(maxValue);\n\n\t\texponent = normalize(pseudoMaxValue)[1];\n\t\tif(!withMinimum) {\n\t\t\tintervals = getChartIntervals(pseudoMaxValue);\n\t\t} else {\n\t\t\tintervals = getChartIntervals(pseudoMaxValue, pseudoMinValue);\n\t\t}\n\n\t\tintervals = intervals.reverse().map(d => d * (-1));\n\t}\n\n\treturn intervals;\n}\n\nfunction getZeroIndex(yPts) {\n\tlet zeroIndex;\n\tlet interval = getIntervalSize(yPts);\n\tif(yPts.indexOf(0) >= 0) {\n\t\t// the range has a given zero\n\t\t// zero-line on the chart\n\t\tzeroIndex = yPts.indexOf(0);\n\t} else if(yPts[0] > 0) {\n\t\t// Minimum value is positive\n\t\t// zero-line is off the chart: below\n\t\tlet min = yPts[0];\n\t\tzeroIndex = (-1) * min / interval;\n\t} else {\n\t\t// Maximum value is negative\n\t\t// zero-line is off the chart: above\n\t\tlet max = yPts[yPts.length - 1];\n\t\tzeroIndex = (-1) * max / interval + (yPts.length - 1);\n\t}\n\treturn zeroIndex;\n}\n\n\n\nfunction getIntervalSize(orderedArray) {\n\treturn orderedArray[1] - orderedArray[0];\n}\n\nfunction getValueRange(orderedArray) {\n\treturn orderedArray[orderedArray.length-1] - orderedArray[0];\n}\n\nfunction scale(val, yAxis) {\n\treturn floatTwo(yAxis.zeroLine - val * yAxis.scaleMultiplier);\n}\n\n\n\n\n\nfunction getClosestInArray(goal, arr, index = false) {\n\tlet closest = arr.reduce(function(prev, curr) {\n\t\treturn (Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev);\n\t});\n\n\treturn index ? arr.indexOf(closest) : closest;\n}\n\nfunction calcDistribution(values, distributionSize) {\n\t// Assume non-negative values,\n\t// implying distribution minimum at zero\n\n\tlet dataMaxValue = Math.max(...values);\n\n\tlet distributionStep = 1 / (distributionSize - 1);\n\tlet distribution = [];\n\n\tfor(var i = 0; i < distributionSize; i++) {\n\t\tlet checkpoint = dataMaxValue * (distributionStep * i);\n\t\tdistribution.push(checkpoint);\n\t}\n\n\treturn distribution;\n}\n\nfunction getMaxCheckpoint(value, distribution) {\n\treturn distribution.filter(d => d < value).length;\n}\n\nconst COL_WIDTH = HEATMAP_SQUARE_SIZE + HEATMAP_GUTTER_SIZE;\nconst ROW_HEIGHT = COL_WIDTH;\n// const DAY_INCR = 1;\n\nclass Heatmap extends BaseChart {\n\tconstructor(parent, options) {\n\t\tsuper(parent, options);\n\t\tthis.type = 'heatmap';\n\n\t\tthis.countLabel = options.countLabel || '';\n\n\t\tlet validStarts = ['Sunday', 'Monday'];\n\t\tlet startSubDomain = validStarts.includes(options.startSubDomain)\n\t\t\t? options.startSubDomain : 'Sunday';\n\t\tthis.startSubDomainIndex = validStarts.indexOf(startSubDomain);\n\n\t\tthis.setup();\n\t}\n\n\tsetMeasures(options) {\n\t\tlet m = this.measures;\n\t\tthis.discreteDomains = options.discreteDomains === 0 ? 0 : 1;\n\n\t\tm.paddings.top = ROW_HEIGHT * 3;\n\t\tm.paddings.bottom = 0;\n\t\tm.legendHeight = ROW_HEIGHT * 2;\n\t\tm.baseHeight = ROW_HEIGHT * NO_OF_DAYS_IN_WEEK\n\t\t\t+ getExtraHeight(m);\n\n\t\tlet d = this.data;\n\t\tlet spacing = this.discreteDomains ? NO_OF_YEAR_MONTHS : 0;\n\t\tthis.independentWidth = (getWeeksBetween(d.start, d.end)\n\t\t\t+ spacing) * COL_WIDTH + getExtraWidth(m);\n\t}\n\n\tupdateWidth() {\n\t\tlet spacing = this.discreteDomains ? NO_OF_YEAR_MONTHS : 0;\n\t\tlet noOfWeeks = this.state.noOfWeeks ? this.state.noOfWeeks : 52;\n\t\tthis.baseWidth = (noOfWeeks + spacing) * COL_WIDTH\n\t\t\t+ getExtraWidth(this.measures);\n\t}\n\n\tprepareData(data=this.data) {\n\t\tif(data.start && data.end && data.start > data.end) {\n\t\t\tthrow new Error('Start date cannot be greater than end date.');\n\t\t}\n\n\t\tif(!data.start) {\n\t\t\tdata.start = new Date();\n\t\t\tdata.start.setFullYear( data.start.getFullYear() - 1 );\n\t\t}\n\t\tif(!data.end) { data.end = new Date(); }\n\t\tdata.dataPoints = data.dataPoints || {};\n\n\t\tif(parseInt(Object.keys(data.dataPoints)[0]) > 100000) {\n\t\t\tlet points = {};\n\t\t\tObject.keys(data.dataPoints).forEach(timestampSec$$1 => {\n\t\t\t\tlet date = new Date(timestampSec$$1 * NO_OF_MILLIS);\n\t\t\t\tpoints[getYyyyMmDd(date)] = data.dataPoints[timestampSec$$1];\n\t\t\t});\n\t\t\tdata.dataPoints = points;\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tcalc() {\n\t\tlet s = this.state;\n\n\t\ts.start = clone(this.data.start);\n\t\ts.end = clone(this.data.end);\n\n\t\ts.firstWeekStart = clone(s.start);\n\t\ts.noOfWeeks = getWeeksBetween(s.start, s.end);\n\t\ts.distribution = calcDistribution(\n\t\t\tObject.values(this.data.dataPoints), HEATMAP_DISTRIBUTION_SIZE);\n\n\t\ts.domainConfigs = this.getDomains();\n\t}\n\n\tsetupComponents() {\n\t\tlet s = this.state;\n\t\tlet lessCol = this.discreteDomains ? 0 : 1;\n\n\t\tlet componentConfigs = s.domainConfigs.map((config, i) => [\n\t\t\t'heatDomain',\n\t\t\t{\n\t\t\t\tindex: config.index,\n\t\t\t\tcolWidth: COL_WIDTH,\n\t\t\t\trowHeight: ROW_HEIGHT,\n\t\t\t\tsquareSize: HEATMAP_SQUARE_SIZE,\n\t\t\t\txTranslate: s.domainConfigs\n\t\t\t\t\t.filter((config, j) => j < i)\n\t\t\t\t\t.map(config => config.cols.length - lessCol)\n\t\t\t\t\t.reduce((a, b) => a + b, 0)\n\t\t\t\t\t* COL_WIDTH\n\t\t\t},\n\t\t\tfunction() {\n\t\t\t\treturn s.domainConfigs[i];\n\t\t\t}.bind(this)\n\n\t\t]);\n\n\t\tthis.components = new Map(componentConfigs\n\t\t\t.map((args, i) => {\n\t\t\t\tlet component = getComponent(...args);\n\t\t\t\treturn [args[0] + '-' + i, component];\n\t\t\t})\n\t\t);\n\n\t\tlet y = 0;\n\t\tDAY_NAMES_SHORT.forEach((dayName, i) => {\n\t\t\tif([1, 3, 5].includes(i)) {\n\t\t\t\tlet dayText = makeText('subdomain-name', -COL_WIDTH/2, y, dayName,\n\t\t\t\t\t{\n\t\t\t\t\t\tfontSize: HEATMAP_SQUARE_SIZE,\n\t\t\t\t\t\tdy: 8,\n\t\t\t\t\t\ttextAnchor: 'end'\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tthis.drawArea.appendChild(dayText);\n\t\t\t}\n\t\t\ty += ROW_HEIGHT;\n\t\t});\n\t}\n\n\tupdate(data) {\n\t\tif(!data) {\n\t\t\tconsole.error('No data to update.');\n\t\t}\n\n\t\tthis.data = this.prepareData(data);\n\t\tthis.draw();\n\t\tthis.bindTooltip();\n\t}\n\n\tbindTooltip() {\n\t\tthis.container.addEventListener('mousemove', (e) => {\n\t\t\tthis.components.forEach(comp => {\n\t\t\t\tlet daySquares = comp.store;\n\t\t\t\tlet daySquare = e.target;\n\t\t\t\tif(daySquares.includes(daySquare)) {\n\n\t\t\t\t\tlet count = daySquare.getAttribute('data-value');\n\t\t\t\t\tlet dateParts = daySquare.getAttribute('data-date').split('-');\n\n\t\t\t\t\tlet month = getMonthName(parseInt(dateParts[1])-1, true);\n\n\t\t\t\t\tlet gOff = this.container.getBoundingClientRect(), pOff = daySquare.getBoundingClientRect();\n\n\t\t\t\t\tlet width = parseInt(e.target.getAttribute('width'));\n\t\t\t\t\tlet x = pOff.left - gOff.left + width/2;\n\t\t\t\t\tlet y = pOff.top - gOff.top;\n\t\t\t\t\tlet value = count + ' ' + this.countLabel;\n\t\t\t\t\tlet name = ' on ' + month + ' ' + dateParts[0] + ', ' + dateParts[2];\n\n\t\t\t\t\tthis.tip.setValues(x, y, {name: name, value: value, valueFirst: 1}, []);\n\t\t\t\t\tthis.tip.showTip();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\trenderLegend() {\n\t\tthis.legendArea.textContent = '';\n\t\tlet x = 0;\n\t\tlet y = ROW_HEIGHT;\n\n\t\tlet lessText = makeText('subdomain-name', x, y, 'Less',\n\t\t\t{\n\t\t\t\tfontSize: HEATMAP_SQUARE_SIZE + 1,\n\t\t\t\tdy: 9\n\t\t\t}\n\t\t);\n\t\tx = (COL_WIDTH * 2) + COL_WIDTH/2;\n\t\tthis.legendArea.appendChild(lessText);\n\n\t\tthis.colors.slice(0, HEATMAP_DISTRIBUTION_SIZE).map((color, i) => {\n\t\t\tconst square = heatSquare('heatmap-legend-unit', x + (COL_WIDTH + 3) * i,\n\t\t\t\ty, HEATMAP_SQUARE_SIZE, color);\n\t\t\tthis.legendArea.appendChild(square);\n\t\t});\n\n\t\tlet moreTextX = x + HEATMAP_DISTRIBUTION_SIZE * (COL_WIDTH + 3) + COL_WIDTH/4;\n\t\tlet moreText = makeText('subdomain-name', moreTextX, y, 'More',\n\t\t\t{\n\t\t\t\tfontSize: HEATMAP_SQUARE_SIZE + 1,\n\t\t\t\tdy: 9\n\t\t\t}\n\t\t);\n\t\tthis.legendArea.appendChild(moreText);\n\t}\n\n\tgetDomains() {\n\t\tlet s = this.state;\n\t\tconst [startMonth, startYear] = [s.start.getMonth(), s.start.getFullYear()];\n\t\tconst [endMonth, endYear] = [s.end.getMonth(), s.end.getFullYear()];\n\n\t\tconst noOfMonths = (endMonth - startMonth + 1) + (endYear - startYear) * 12;\n\n\t\tlet domainConfigs = [];\n\n\t\tlet startOfMonth = clone(s.start);\n\t\tfor(var i = 0; i < noOfMonths; i++) {\n\t\t\tlet endDate = s.end;\n\t\t\tif(!areInSameMonth(startOfMonth, s.end)) {\n\t\t\t\tlet [month, year] = [startOfMonth.getMonth(), startOfMonth.getFullYear()];\n\t\t\t\tendDate = getLastDateInMonth(month, year);\n\t\t\t}\n\t\t\tdomainConfigs.push(this.getDomainConfig(startOfMonth, endDate));\n\n\t\t\taddDays(endDate, 1);\n\t\t\tstartOfMonth = endDate;\n\t\t}\n\n\t\treturn domainConfigs;\n\t}\n\n\tgetDomainConfig(startDate, endDate='') {\n\t\tlet [month, year] = [startDate.getMonth(), startDate.getFullYear()];\n\t\tlet startOfWeek = setDayToSunday(startDate); // TODO: Monday as well\n\t\tendDate = clone(endDate) || getLastDateInMonth(month, year);\n\n\t\tlet domainConfig = {\n\t\t\tindex: month,\n\t\t\tcols: []\n\t\t};\n\n\t\taddDays(endDate, 1);\n\t\tlet noOfMonthWeeks = getWeeksBetween(startOfWeek, endDate);\n\n\t\tlet cols = [], col;\n\t\tfor(var i = 0; i < noOfMonthWeeks; i++) {\n\t\t\tcol = this.getCol(startOfWeek, month);\n\t\t\tcols.push(col);\n\n\t\t\tstartOfWeek = new Date(col[NO_OF_DAYS_IN_WEEK - 1].yyyyMmDd);\n\t\t\taddDays(startOfWeek, 1);\n\t\t}\n\n\t\tif(col[NO_OF_DAYS_IN_WEEK - 1].dataValue !== undefined) {\n\t\t\taddDays(startOfWeek, 1);\n\t\t\tcols.push(this.getCol(startOfWeek, month, true));\n\t\t}\n\n\t\tdomainConfig.cols = cols;\n\n\t\treturn domainConfig;\n\t}\n\n\tgetCol(startDate, month, empty = false) {\n\t\tlet s = this.state;\n\n\t\t// startDate is the start of week\n\t\tlet currentDate = clone(startDate);\n\t\tlet col = [];\n\n\t\tfor(var i = 0; i < NO_OF_DAYS_IN_WEEK; i++, addDays(currentDate, 1)) {\n\t\t\tlet config = {};\n\n\t\t\t// Non-generic adjustment for entire heatmap, needs state\n\t\t\tlet currentDateWithinData = currentDate >= s.start && currentDate <= s.end;\n\n\t\t\tif(empty || currentDate.getMonth() !== month || !currentDateWithinData) {\n\t\t\t\tconfig.yyyyMmDd = getYyyyMmDd(currentDate);\n\t\t\t} else {\n\t\t\t\tconfig = this.getSubDomainConfig(currentDate);\n\t\t\t}\n\t\t\tcol.push(config);\n\t\t}\n\n\t\treturn col;\n\t}\n\n\tgetSubDomainConfig(date) {\n\t\tlet yyyyMmDd = getYyyyMmDd(date);\n\t\tlet dataValue = this.data.dataPoints[yyyyMmDd];\n\t\tlet config = {\n\t\t\tyyyyMmDd: yyyyMmDd,\n\t\t\tdataValue: dataValue || 0,\n\t\t\tfill: this.colors[getMaxCheckpoint(dataValue, this.state.distribution)]\n\t\t};\n\t\treturn config;\n\t}\n}\n\nfunction dataPrep(data, type) {\n\tdata.labels = data.labels || [];\n\n\tlet datasetLength = data.labels.length;\n\n\t// Datasets\n\tlet datasets = data.datasets;\n\tlet zeroArray = new Array(datasetLength).fill(0);\n\tif(!datasets) {\n\t\t// default\n\t\tdatasets = [{\n\t\t\tvalues: zeroArray\n\t\t}];\n\t}\n\n\tdatasets.map(d=> {\n\t\t// Set values\n\t\tif(!d.values) {\n\t\t\td.values = zeroArray;\n\t\t} else {\n\t\t\t// Check for non values\n\t\t\tlet vals = d.values;\n\t\t\tvals = vals.map(val => (!isNaN(val) ? val : 0));\n\n\t\t\t// Trim or extend\n\t\t\tif(vals.length > datasetLength) {\n\t\t\t\tvals = vals.slice(0, datasetLength);\n\t\t\t} else {\n\t\t\t\tvals = fillArray(vals, datasetLength - vals.length, 0);\n\t\t\t}\n\t\t}\n\n\t\t// Set labels\n\t\t//\n\n\t\t// Set type\n\t\tif(!d.chartType ) {\n\t\t\tif(!AXIS_DATASET_CHART_TYPES.includes(type)) type === DEFAULT_AXIS_CHART_TYPE;\n\t\t\td.chartType = type;\n\t\t}\n\n\t});\n\n\t// Markers\n\n\t// Regions\n\t// data.yRegions = data.yRegions || [];\n\tif(data.yRegions) {\n\t\tdata.yRegions.map(d => {\n\t\t\tif(d.end < d.start) {\n\t\t\t\t[d.start, d.end] = [d.end, d.start];\n\t\t\t}\n\t\t});\n\t}\n\n\treturn data;\n}\n\nfunction zeroDataPrep(realData) {\n\tlet datasetLength = realData.labels.length;\n\tlet zeroArray = new Array(datasetLength).fill(0);\n\n\tlet zeroData = {\n\t\tlabels: realData.labels.slice(0, -1),\n\t\tdatasets: realData.datasets.map(d => {\n\t\t\treturn {\n\t\t\t\tname: '',\n\t\t\t\tvalues: zeroArray.slice(0, -1),\n\t\t\t\tchartType: d.chartType\n\t\t\t};\n\t\t}),\n\t};\n\n\tif(realData.yMarkers) {\n\t\tzeroData.yMarkers = [\n\t\t\t{\n\t\t\t\tvalue: 0,\n\t\t\t\tlabel: ''\n\t\t\t}\n\t\t];\n\t}\n\n\tif(realData.yRegions) {\n\t\tzeroData.yRegions = [\n\t\t\t{\n\t\t\t\tstart: 0,\n\t\t\t\tend: 0,\n\t\t\t\tlabel: ''\n\t\t\t}\n\t\t];\n\t}\n\n\treturn zeroData;\n}\n\nfunction getShortenedLabels(chartWidth, labels=[], isSeries=true) {\n\tlet allowedSpace = chartWidth / labels.length;\n\tif(allowedSpace <= 0) allowedSpace = 1;\n\tlet allowedLetters = allowedSpace / DEFAULT_CHAR_WIDTH;\n\n\tlet calcLabels = labels.map((label, i) => {\n\t\tlabel += \"\";\n\t\tif(label.length > allowedLetters) {\n\n\t\t\tif(!isSeries) {\n\t\t\t\tif(allowedLetters-3 > 0) {\n\t\t\t\t\tlabel = label.slice(0, allowedLetters-3) + \" ...\";\n\t\t\t\t} else {\n\t\t\t\t\tlabel = label.slice(0, allowedLetters) + '..';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet multiple = Math.ceil(label.length/allowedLetters);\n\t\t\t\tif(i % multiple !== 0) {\n\t\t\t\t\tlabel = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn label;\n\t});\n\n\treturn calcLabels;\n}\n\nclass AxisChart extends BaseChart {\n\tconstructor(parent, args) {\n\t\tsuper(parent, args);\n\n\t\tthis.barOptions = args.barOptions || {};\n\t\tthis.lineOptions = args.lineOptions || {};\n\n\t\tthis.type = args.type || 'line';\n\t\tthis.init = 1;\n\n\t\tthis.setup();\n\t}\n\n\tsetMeasures() {\n\t\tif(this.data.datasets.length <= 1) {\n\t\t\tthis.config.showLegend = 0;\n\t\t\tthis.measures.paddings.bottom = 30;\n\t\t}\n\t}\n\n\tconfigure(options) {\n\t\tsuper.configure(options);\n\n\t\toptions.axisOptions = options.axisOptions || {};\n\t\toptions.tooltipOptions = options.tooltipOptions || {};\n\n\t\tthis.config.xAxisMode = options.axisOptions.xAxisMode || 'span';\n\t\tthis.config.yAxisMode = options.axisOptions.yAxisMode || 'span';\n\t\tthis.config.xIsSeries = options.axisOptions.xIsSeries || 0;\n\t\tthis.config.shortenYAxisNumbers = options.axisOptions.shortenYAxisNumbers || 0;\n\n\t\tthis.config.formatTooltipX = options.tooltipOptions.formatTooltipX;\n\t\tthis.config.formatTooltipY = options.tooltipOptions.formatTooltipY;\n\n\t\tthis.config.valuesOverPoints = options.valuesOverPoints;\n\t}\n\n\tprepareData(data=this.data) {\n\t\treturn dataPrep(data, this.type);\n\t}\n\n\tprepareFirstData(data=this.data) {\n\t\treturn zeroDataPrep(data);\n\t}\n\n\tcalc(onlyWidthChange = false) {\n\t\tthis.calcXPositions();\n\t\tif(!onlyWidthChange) {\n\t\t\tthis.calcYAxisParameters(this.getAllYValues(), this.type === 'line');\n\t\t}\n\t\tthis.makeDataByIndex();\n\t}\n\n\tcalcXPositions() {\n\t\tlet s = this.state;\n\t\tlet labels = this.data.labels;\n\t\ts.datasetLength = labels.length;\n\n\t\ts.unitWidth = this.width/(s.datasetLength);\n\t\t// Default, as per bar, and mixed. Only line will be a special case\n\t\ts.xOffset = s.unitWidth/2;\n\n\t\t// // For a pure Line Chart\n\t\t// s.unitWidth = this.width/(s.datasetLength - 1);\n\t\t// s.xOffset = 0;\n\n\t\ts.xAxis = {\n\t\t\tlabels: labels,\n\t\t\tpositions: labels.map((d, i) =>\n\t\t\t\tfloatTwo(s.xOffset + i * s.unitWidth)\n\t\t\t)\n\t\t};\n\t}\n\n\tcalcYAxisParameters(dataValues, withMinimum = 'false') {\n\t\tconst yPts = calcChartIntervals(dataValues, withMinimum);\n\t\tconst scaleMultiplier = this.height / getValueRange(yPts);\n\t\tconst intervalHeight = getIntervalSize(yPts) * scaleMultiplier;\n\t\tconst zeroLine = this.height - (getZeroIndex(yPts) * intervalHeight);\n\n\t\tthis.state.yAxis = {\n\t\t\tlabels: yPts,\n\t\t\tpositions: yPts.map(d => zeroLine - d * scaleMultiplier),\n\t\t\tscaleMultiplier: scaleMultiplier,\n\t\t\tzeroLine: zeroLine,\n\t\t};\n\n\t\t// Dependent if above changes\n\t\tthis.calcDatasetPoints();\n\t\tthis.calcYExtremes();\n\t\tthis.calcYRegions();\n\t}\n\n\tcalcDatasetPoints() {\n\t\tlet s = this.state;\n\t\tlet scaleAll = values => values.map(val => scale(val, s.yAxis));\n\n\t\ts.datasets = this.data.datasets.map((d, i) => {\n\t\t\tlet values = d.values;\n\t\t\tlet cumulativeYs = d.cumulativeYs || [];\n\t\t\treturn {\n\t\t\t\tname: d.name,\n\t\t\t\tindex: i,\n\t\t\t\tchartType: d.chartType,\n\n\t\t\t\tvalues: values,\n\t\t\t\tyPositions: scaleAll(values),\n\n\t\t\t\tcumulativeYs: cumulativeYs,\n\t\t\t\tcumulativeYPos: scaleAll(cumulativeYs),\n\t\t\t};\n\t\t});\n\t}\n\n\tcalcYExtremes() {\n\t\tlet s = this.state;\n\t\tif(this.barOptions.stacked) {\n\t\t\ts.yExtremes = s.datasets[s.datasets.length - 1].cumulativeYPos;\n\t\t\treturn;\n\t\t}\n\t\ts.yExtremes = new Array(s.datasetLength).fill(9999);\n\t\ts.datasets.map(d => {\n\t\t\td.yPositions.map((pos, j) => {\n\t\t\t\tif(pos < s.yExtremes[j]) {\n\t\t\t\t\ts.yExtremes[j] = pos;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tcalcYRegions() {\n\t\tlet s = this.state;\n\t\tif(this.data.yMarkers) {\n\t\t\tthis.state.yMarkers = this.data.yMarkers.map(d => {\n\t\t\t\td.position = scale(d.value, s.yAxis);\n\t\t\t\tif(!d.options) d.options = {};\n\t\t\t\t// if(!d.label.includes(':')) {\n\t\t\t\t// \td.label += ': ' + d.value;\n\t\t\t\t// }\n\t\t\t\treturn d;\n\t\t\t});\n\t\t}\n\t\tif(this.data.yRegions) {\n\t\t\tthis.state.yRegions = this.data.yRegions.map(d => {\n\t\t\t\td.startPos = scale(d.start, s.yAxis);\n\t\t\t\td.endPos = scale(d.end, s.yAxis);\n\t\t\t\tif(!d.options) d.options = {};\n\t\t\t\treturn d;\n\t\t\t});\n\t\t}\n\t}\n\n\tgetAllYValues() {\n\t\tlet key = 'values';\n\n\t\tif(this.barOptions.stacked) {\n\t\t\tkey = 'cumulativeYs';\n\t\t\tlet cumulative = new Array(this.state.datasetLength).fill(0);\n\t\t\tthis.data.datasets.map((d, i) => {\n\t\t\t\tlet values = this.data.datasets[i].values;\n\t\t\t\td[key] = cumulative = cumulative.map((c, i) => c + values[i]);\n\t\t\t});\n\t\t}\n\n\t\tlet allValueLists = this.data.datasets.map(d => d[key]);\n\t\tif(this.data.yMarkers) {\n\t\t\tallValueLists.push(this.data.yMarkers.map(d => d.value));\n\t\t}\n\t\tif(this.data.yRegions) {\n\t\t\tthis.data.yRegions.map(d => {\n\t\t\t\tallValueLists.push([d.end, d.start]);\n\t\t\t});\n\t\t}\n\n\t\treturn [].concat(...allValueLists);\n\t}\n\n\tsetupComponents() {\n\t\tlet componentConfigs = [\n\t\t\t[\n\t\t\t\t'yAxis',\n\t\t\t\t{\n\t\t\t\t\tmode: this.config.yAxisMode,\n\t\t\t\t\twidth: this.width,\n\t\t\t\t\tshortenNumbers: this.config.shortenYAxisNumbers\n\t\t\t\t\t// pos: 'right'\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\treturn this.state.yAxis;\n\t\t\t\t}.bind(this)\n\t\t\t],\n\n\t\t\t[\n\t\t\t\t'xAxis',\n\t\t\t\t{\n\t\t\t\t\tmode: this.config.xAxisMode,\n\t\t\t\t\theight: this.height,\n\t\t\t\t\t// pos: 'right'\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\tlet s = this.state;\n\t\t\t\t\ts.xAxis.calcLabels = getShortenedLabels(this.width,\n\t\t\t\t\t\ts.xAxis.labels, this.config.xIsSeries);\n\n\t\t\t\t\treturn s.xAxis;\n\t\t\t\t}.bind(this)\n\t\t\t],\n\n\t\t\t[\n\t\t\t\t'yRegions',\n\t\t\t\t{\n\t\t\t\t\twidth: this.width,\n\t\t\t\t\tpos: 'right'\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\treturn this.state.yRegions;\n\t\t\t\t}.bind(this)\n\t\t\t],\n\t\t];\n\n\t\tlet barDatasets = this.state.datasets.filter(d => d.chartType === 'bar');\n\t\tlet lineDatasets = this.state.datasets.filter(d => d.chartType === 'line');\n\n\t\tlet barsConfigs = barDatasets.map(d => {\n\t\t\tlet index = d.index;\n\t\t\treturn [\n\t\t\t\t'barGraph' + '-' + d.index,\n\t\t\t\t{\n\t\t\t\t\tindex: index,\n\t\t\t\t\tcolor: this.colors[index],\n\t\t\t\t\tstacked: this.barOptions.stacked,\n\n\t\t\t\t\t// same for all datasets\n\t\t\t\t\tvaluesOverPoints: this.config.valuesOverPoints,\n\t\t\t\t\tminHeight: this.height * MIN_BAR_PERCENT_HEIGHT,\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\tlet s = this.state;\n\t\t\t\t\tlet d = s.datasets[index];\n\t\t\t\t\tlet stacked = this.barOptions.stacked;\n\n\t\t\t\t\tlet spaceRatio = this.barOptions.spaceRatio || BAR_CHART_SPACE_RATIO;\n\t\t\t\t\tlet barsWidth = s.unitWidth * (1 - spaceRatio);\n\t\t\t\t\tlet barWidth = barsWidth/(stacked ? 1 : barDatasets.length);\n\n\t\t\t\t\tlet xPositions = s.xAxis.positions.map(x => x - barsWidth/2);\n\t\t\t\t\tif(!stacked) {\n\t\t\t\t\t\txPositions = xPositions.map(p => p + barWidth * index);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet labels = new Array(s.datasetLength).fill('');\n\t\t\t\t\tif(this.config.valuesOverPoints) {\n\t\t\t\t\t\tif(stacked && d.index === s.datasets.length - 1) {\n\t\t\t\t\t\t\tlabels = d.cumulativeYs;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlabels = d.values;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet offsets = new Array(s.datasetLength).fill(0);\n\t\t\t\t\tif(stacked) {\n\t\t\t\t\t\toffsets = d.yPositions.map((y, j) => y - d.cumulativeYPos[j]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\txPositions: xPositions,\n\t\t\t\t\t\tyPositions: d.yPositions,\n\t\t\t\t\t\toffsets: offsets,\n\t\t\t\t\t\t// values: d.values,\n\t\t\t\t\t\tlabels: labels,\n\n\t\t\t\t\t\tzeroLine: s.yAxis.zeroLine,\n\t\t\t\t\t\tbarsWidth: barsWidth,\n\t\t\t\t\t\tbarWidth: barWidth,\n\t\t\t\t\t};\n\t\t\t\t}.bind(this)\n\t\t\t];\n\t\t});\n\n\t\tlet lineConfigs = lineDatasets.map(d => {\n\t\t\tlet index = d.index;\n\t\t\treturn [\n\t\t\t\t'lineGraph' + '-' + d.index,\n\t\t\t\t{\n\t\t\t\t\tindex: index,\n\t\t\t\t\tcolor: this.colors[index],\n\t\t\t\t\tsvgDefs: this.svgDefs,\n\t\t\t\t\theatline: this.lineOptions.heatline,\n\t\t\t\t\tregionFill: this.lineOptions.regionFill,\n\t\t\t\t\thideDots: this.lineOptions.hideDots,\n\t\t\t\t\thideLine: this.lineOptions.hideLine,\n\n\t\t\t\t\t// same for all datasets\n\t\t\t\t\tvaluesOverPoints: this.config.valuesOverPoints,\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\tlet s = this.state;\n\t\t\t\t\tlet d = s.datasets[index];\n\t\t\t\t\tlet minLine = s.yAxis.positions[0] < s.yAxis.zeroLine\n\t\t\t\t\t\t? s.yAxis.positions[0] : s.yAxis.zeroLine;\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\txPositions: s.xAxis.positions,\n\t\t\t\t\t\tyPositions: d.yPositions,\n\n\t\t\t\t\t\tvalues: d.values,\n\n\t\t\t\t\t\tzeroLine: minLine,\n\t\t\t\t\t\tradius: this.lineOptions.dotSize || LINE_CHART_DOT_SIZE,\n\t\t\t\t\t};\n\t\t\t\t}.bind(this)\n\t\t\t];\n\t\t});\n\n\t\tlet markerConfigs = [\n\t\t\t[\n\t\t\t\t'yMarkers',\n\t\t\t\t{\n\t\t\t\t\twidth: this.width,\n\t\t\t\t\tpos: 'right'\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\treturn this.state.yMarkers;\n\t\t\t\t}.bind(this)\n\t\t\t]\n\t\t];\n\n\t\tcomponentConfigs = componentConfigs.concat(barsConfigs, lineConfigs, markerConfigs);\n\n\t\tlet optionals = ['yMarkers', 'yRegions'];\n\t\tthis.dataUnitComponents = [];\n\n\t\tthis.components = new Map(componentConfigs\n\t\t\t.filter(args => !optionals.includes(args[0]) || this.state[args[0]])\n\t\t\t.map(args => {\n\t\t\t\tlet component = getComponent(...args);\n\t\t\t\tif(args[0].includes('lineGraph') || args[0].includes('barGraph')) {\n\t\t\t\t\tthis.dataUnitComponents.push(component);\n\t\t\t\t}\n\t\t\t\treturn [args[0], component];\n\t\t\t}));\n\t}\n\n\tmakeDataByIndex() {\n\t\tthis.dataByIndex = {};\n\n\t\tlet s = this.state;\n\t\tlet formatX = this.config.formatTooltipX;\n\t\tlet formatY = this.config.formatTooltipY;\n\t\tlet titles = s.xAxis.labels;\n\n\t\ttitles.map((label, index) => {\n\t\t\tlet values = this.state.datasets.map((set, i) => {\n\t\t\t\tlet value = set.values[index];\n\t\t\t\treturn {\n\t\t\t\t\ttitle: set.name,\n\t\t\t\t\tvalue: value,\n\t\t\t\t\tyPos: set.yPositions[index],\n\t\t\t\t\tcolor: this.colors[i],\n\t\t\t\t\tformatted: formatY ? formatY(value) : value,\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tthis.dataByIndex[index] = {\n\t\t\t\tlabel: label,\n\t\t\t\tformattedLabel: formatX ? formatX(label) : label,\n\t\t\t\txPos: s.xAxis.positions[index],\n\t\t\t\tvalues: values,\n\t\t\t\tyExtreme: s.yExtremes[index],\n\t\t\t};\n\t\t});\n\t}\n\n\tbindTooltip() {\n\t\t// NOTE: could be in tooltip itself, as it is a given functionality for its parent\n\t\tthis.container.addEventListener('mousemove', (e) => {\n\t\t\tlet m = this.measures;\n\t\t\tlet o = getOffset(this.container);\n\t\t\tlet relX = e.pageX - o.left - getLeftOffset(m);\n\t\t\tlet relY = e.pageY - o.top;\n\n\t\t\tif(relY < this.height + getTopOffset(m)\n\t\t\t\t&& relY >  getTopOffset(m)) {\n\t\t\t\tthis.mapTooltipXPosition(relX);\n\t\t\t} else {\n\t\t\t\tthis.tip.hideTip();\n\t\t\t}\n\t\t});\n\t}\n\n\tmapTooltipXPosition(relX) {\n\t\tlet s = this.state;\n\t\tif(!s.yExtremes) return;\n\n\t\tlet index = getClosestInArray(relX, s.xAxis.positions, true);\n\t\tlet dbi = this.dataByIndex[index];\n\n\t\tthis.tip.setValues(\n\t\t\tdbi.xPos + this.tip.offset.x,\n\t\t\tdbi.yExtreme + this.tip.offset.y,\n\t\t\t{name: dbi.formattedLabel, value: ''},\n\t\t\tdbi.values,\n\t\t\tindex\n\t\t);\n\n\t\tthis.tip.showTip();\n\t}\n\n\trenderLegend() {\n\t\tlet s = this.data;\n\t\tif(s.datasets.length > 1) {\n\t\t\tthis.legendArea.textContent = '';\n\t\t\ts.datasets.map((d, i) => {\n\t\t\t\tlet barWidth = AXIS_LEGEND_BAR_SIZE;\n\t\t\t\t// let rightEndPoint = this.baseWidth - this.measures.margins.left - this.measures.margins.right;\n\t\t\t\t// let multiplier = s.datasets.length - i;\n\t\t\t\tlet rect = legendBar(\n\t\t\t\t\t// rightEndPoint - multiplier * barWidth,\t// To right align\n\t\t\t\t\tbarWidth * i,\n\t\t\t\t\t'0',\n\t\t\t\t\tbarWidth,\n\t\t\t\t\tthis.colors[i],\n\t\t\t\t\td.name,\n\t\t\t\t\tthis.config.truncateLegends);\n\t\t\t\tthis.legendArea.appendChild(rect);\n\t\t\t});\n\t\t}\n\t}\n\n\n\n\t// Overlay\n\tmakeOverlay() {\n\t\tif(this.init) {\n\t\t\tthis.init = 0;\n\t\t\treturn;\n\t\t}\n\t\tif(this.overlayGuides) {\n\t\t\tthis.overlayGuides.forEach(g => {\n\t\t\t\tlet o = g.overlay;\n\t\t\t\to.parentNode.removeChild(o);\n\t\t\t});\n\t\t}\n\n\t\tthis.overlayGuides = this.dataUnitComponents.map(c => {\n\t\t\treturn {\n\t\t\t\ttype: c.unitType,\n\t\t\t\toverlay: undefined,\n\t\t\t\tunits: c.units,\n\t\t\t};\n\t\t});\n\n\t\tif(this.state.currentIndex === undefined) {\n\t\t\tthis.state.currentIndex = this.state.datasetLength - 1;\n\t\t}\n\n\t\t// Render overlays\n\t\tthis.overlayGuides.map(d => {\n\t\t\tlet currentUnit = d.units[this.state.currentIndex];\n\n\t\t\td.overlay = makeOverlay[d.type](currentUnit);\n\t\t\tthis.drawArea.appendChild(d.overlay);\n\t\t});\n\t}\n\n\tupdateOverlayGuides() {\n\t\tif(this.overlayGuides) {\n\t\t\tthis.overlayGuides.forEach(g => {\n\t\t\t\tlet o = g.overlay;\n\t\t\t\to.parentNode.removeChild(o);\n\t\t\t});\n\t\t}\n\t}\n\n\tbindOverlay() {\n\t\tthis.parent.addEventListener('data-select', () => {\n\t\t\tthis.updateOverlay();\n\t\t});\n\t}\n\n\tbindUnits() {\n\t\tthis.dataUnitComponents.map(c => {\n\t\t\tc.units.map(unit => {\n\t\t\t\tunit.addEventListener('click', () => {\n\t\t\t\t\tlet index = unit.getAttribute('data-point-index');\n\t\t\t\t\tthis.setCurrentDataPoint(index);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\t// Note: Doesn't work as tooltip is absolutely positioned\n\t\tthis.tip.container.addEventListener('click', () => {\n\t\t\tlet index = this.tip.container.getAttribute('data-point-index');\n\t\t\tthis.setCurrentDataPoint(index);\n\t\t});\n\t}\n\n\tupdateOverlay() {\n\t\tthis.overlayGuides.map(d => {\n\t\t\tlet currentUnit = d.units[this.state.currentIndex];\n\t\t\tupdateOverlay[d.type](currentUnit, d.overlay);\n\t\t});\n\t}\n\n\tonLeftArrow() {\n\t\tthis.setCurrentDataPoint(this.state.currentIndex - 1);\n\t}\n\n\tonRightArrow() {\n\t\tthis.setCurrentDataPoint(this.state.currentIndex + 1);\n\t}\n\n\tgetDataPoint(index=this.state.currentIndex) {\n\t\tlet s = this.state;\n\t\tlet data_point = {\n\t\t\tindex: index,\n\t\t\tlabel: s.xAxis.labels[index],\n\t\t\tvalues: s.datasets.map(d => d.values[index])\n\t\t};\n\t\treturn data_point;\n\t}\n\n\tsetCurrentDataPoint(index) {\n\t\tlet s = this.state;\n\t\tindex = parseInt(index);\n\t\tif(index < 0) index = 0;\n\t\tif(index >= s.xAxis.labels.length) index = s.xAxis.labels.length - 1;\n\t\tif(index === s.currentIndex) return;\n\t\ts.currentIndex = index;\n\t\tfire(this.parent, \"data-select\", this.getDataPoint());\n\t}\n\n\n\n\t// API\n\taddDataPoint(label, datasetValues, index=this.state.datasetLength) {\n\t\tsuper.addDataPoint(label, datasetValues, index);\n\t\tthis.data.labels.splice(index, 0, label);\n\t\tthis.data.datasets.map((d, i) => {\n\t\t\td.values.splice(index, 0, datasetValues[i]);\n\t\t});\n\t\tthis.update(this.data);\n\t}\n\n\tremoveDataPoint(index = this.state.datasetLength-1) {\n\t\tif (this.data.labels.length <= 1) {\n\t\t\treturn;\n\t\t}\n\t\tsuper.removeDataPoint(index);\n\t\tthis.data.labels.splice(index, 1);\n\t\tthis.data.datasets.map(d => {\n\t\t\td.values.splice(index, 1);\n\t\t});\n\t\tthis.update(this.data);\n\t}\n\n\tupdateDataset(datasetValues, index=0) {\n\t\tthis.data.datasets[index].values = datasetValues;\n\t\tthis.update(this.data);\n\t}\n\t// addDataset(dataset, index) {}\n\t// removeDataset(index = 0) {}\n\n\tupdateDatasets(datasets) {\n\t\tthis.data.datasets.map((d, i) => {\n\t\t\tif(datasets[i]) {\n\t\t\t\td.values = datasets[i];\n\t\t\t}\n\t\t});\n\t\tthis.update(this.data);\n\t}\n\n\t// updateDataPoint(dataPoint, index = 0) {}\n\t// addDataPoint(dataPoint, index = 0) {}\n\t// removeDataPoint(index = 0) {}\n}\n\nclass DonutChart extends AggregationChart {\n\tconstructor(parent, args) {\n\t\tsuper(parent, args);\n\t\tthis.type = 'donut';\n\t\tthis.initTimeout = 0;\n\t\tthis.init = 1;\n\n\t\tthis.setup();\n\t}\n\n\tconfigure(args) {\n\t\tsuper.configure(args);\n\t\tthis.mouseMove = this.mouseMove.bind(this);\n\t\tthis.mouseLeave = this.mouseLeave.bind(this);\n\n\t\tthis.hoverRadio = args.hoverRadio || 0.1;\n\t\tthis.config.startAngle = args.startAngle || 0;\n\n\t\tthis.clockWise = args.clockWise || false;\n\t\tthis.strokeWidth = args.strokeWidth || 30;\n\t}\n\n\tcalc() {\n\t\tsuper.calc();\n\t\tlet s = this.state;\n\t\tthis.radius =\n\t\t\tthis.height > this.width\n\t\t\t\t? this.center.x - this.strokeWidth / 2\n\t\t\t\t: this.center.y - this.strokeWidth / 2;\n\n\t\tconst { radius, clockWise } = this;\n\n\t\tconst prevSlicesProperties = s.slicesProperties || [];\n\t\ts.sliceStrings = [];\n\t\ts.slicesProperties = [];\n\t\tlet curAngle = 180 - this.config.startAngle;\n\n\t\ts.sliceTotals.map((total, i) => {\n\t\t\tconst startAngle = curAngle;\n\t\t\tconst originDiffAngle = (total / s.grandTotal) * FULL_ANGLE;\n\t\t\tconst largeArc = originDiffAngle > 180 ? 1: 0;\n\t\t\tconst diffAngle = clockWise ? -originDiffAngle : originDiffAngle;\n\t\t\tconst endAngle = curAngle = curAngle + diffAngle;\n\t\t\tconst startPosition = getPositionByAngle(startAngle, radius);\n\t\t\tconst endPosition = getPositionByAngle(endAngle, radius);\n\n\t\t\tconst prevProperty = this.init && prevSlicesProperties[i];\n\n\t\t\tlet curStart,curEnd;\n\t\t\tif(this.init) {\n\t\t\t\tcurStart = prevProperty ? prevProperty.startPosition : startPosition;\n\t\t\t\tcurEnd = prevProperty ? prevProperty.endPosition : startPosition;\n\t\t\t} else {\n\t\t\t\tcurStart = startPosition;\n\t\t\t\tcurEnd = endPosition;\n\t\t\t}\n\t\t\tconst curPath =\n\t\t\t\toriginDiffAngle === 360\n\t\t\t\t\t? makeStrokeCircleStr(curStart, curEnd, this.center, this.radius, this.clockWise, largeArc)\n\t\t\t\t\t: makeArcStrokePathStr(curStart, curEnd, this.center, this.radius, this.clockWise, largeArc);\n\n\t\t\ts.sliceStrings.push(curPath);\n\t\t\ts.slicesProperties.push({\n\t\t\t\tstartPosition,\n\t\t\t\tendPosition,\n\t\t\t\tvalue: total,\n\t\t\t\ttotal: s.grandTotal,\n\t\t\t\tstartAngle,\n\t\t\t\tendAngle,\n\t\t\t\tangle: diffAngle\n\t\t\t});\n\n\t\t});\n\t\tthis.init = 0;\n\t}\n\n\tsetupComponents() {\n\t\tlet s = this.state;\n\n\t\tlet componentConfigs = [\n\t\t\t[\n\t\t\t\t'donutSlices',\n\t\t\t\t{ },\n\t\t\t\tfunction() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tsliceStrings: s.sliceStrings,\n\t\t\t\t\t\tcolors: this.colors,\n\t\t\t\t\t\tstrokeWidth: this.strokeWidth,\n\t\t\t\t\t};\n\t\t\t\t}.bind(this)\n\t\t\t]\n\t\t];\n\n\t\tthis.components = new Map(componentConfigs\n\t\t\t.map(args => {\n\t\t\t\tlet component = getComponent(...args);\n\t\t\t\treturn [args[0], component];\n\t\t\t}));\n\t}\n\n\tcalTranslateByAngle(property){\n\t\tconst{ radius, hoverRadio } = this;\n\t\tconst position = getPositionByAngle(property.startAngle+(property.angle / 2),radius);\n\t\treturn `translate3d(${(position.x) * hoverRadio}px,${(position.y) * hoverRadio}px,0)`;\n\t}\n\n\thoverSlice(path,i,flag,e){\n\t\tif(!path) return;\n\t\tconst color = this.colors[i];\n\t\tif(flag) {\n\t\t\ttransform(path, this.calTranslateByAngle(this.state.slicesProperties[i]));\n\t\t\tpath.style.stroke = lightenDarkenColor(color, 50);\n\t\t\tlet g_off = getOffset(this.svg);\n\t\t\tlet x = e.pageX - g_off.left + 10;\n\t\t\tlet y = e.pageY - g_off.top - 10;\n\t\t\tlet title = (this.formatted_labels && this.formatted_labels.length > 0\n\t\t\t\t? this.formatted_labels[i] : this.state.labels[i]) + ': ';\n\t\t\tlet percent = (this.state.sliceTotals[i] * 100 / this.state.grandTotal).toFixed(1);\n\t\t\tthis.tip.setValues(x, y, {name: title, value: percent + \"%\"});\n\t\t\tthis.tip.showTip();\n\t\t} else {\n\t\t\ttransform(path,'translate3d(0,0,0)');\n\t\t\tthis.tip.hideTip();\n\t\t\tpath.style.stroke = color;\n\t\t}\n\t}\n\n\tbindTooltip() {\n\t\tthis.container.addEventListener('mousemove', this.mouseMove);\n\t\tthis.container.addEventListener('mouseleave', this.mouseLeave);\n\t}\n\n\tmouseMove(e){\n\t\tconst target = e.target;\n\t\tlet slices = this.components.get('donutSlices').store;\n\t\tlet prevIndex = this.curActiveSliceIndex;\n\t\tlet prevAcitve = this.curActiveSlice;\n\t\tif(slices.includes(target)) {\n\t\t\tlet i = slices.indexOf(target);\n\t\t\tthis.hoverSlice(prevAcitve, prevIndex,false);\n\t\t\tthis.curActiveSlice = target;\n\t\t\tthis.curActiveSliceIndex = i;\n\t\t\tthis.hoverSlice(target, i, true, e);\n\t\t} else {\n\t\t\tthis.mouseLeave();\n\t\t}\n\t}\n\n\tmouseLeave(){\n\t\tthis.hoverSlice(this.curActiveSlice,this.curActiveSliceIndex,false);\n\t}\n}\n\n// import MultiAxisChart from './charts/MultiAxisChart';\nconst chartTypes = {\n\tbar: AxisChart,\n\tline: AxisChart,\n\t// multiaxis: MultiAxisChart,\n\tpercentage: PercentageChart,\n\theatmap: Heatmap,\n\tpie: PieChart,\n\tdonut: DonutChart,\n};\n\nfunction getChartByType(chartType = 'line', parent, options) {\n\tif (chartType === 'axis-mixed') {\n\t\toptions.type = 'line';\n\t\treturn new AxisChart(parent, options);\n\t}\n\n\tif (!chartTypes[chartType]) {\n\t\tconsole.error(\"Undefined chart type: \" + chartType);\n\t\treturn;\n\t}\n\n\treturn new chartTypes[chartType](parent, options);\n}\n\nclass Chart {\n\tconstructor(parent, options) {\n\t\treturn getChartByType(options.type, parent, options);\n\t}\n}\n\nexport { Chart, PercentageChart, PieChart, Heatmap, AxisChart };\n"],"sourceRoot":""}