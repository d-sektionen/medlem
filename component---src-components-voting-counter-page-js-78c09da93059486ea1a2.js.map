{"version":3,"file":"component---src-components-voting-counter-page-js-78c09da93059486ea1a2.js","mappings":"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","sources":["webpack://medlem/./src/components/checkin/doorkeeperPanel.js","webpack://medlem/./src/components/ui/list.js","webpack://medlem/./src/components/ui/titleChooser.js","webpack://medlem/./src/components/votingCounter/meetingPanel.js","webpack://medlem/./src/components/votingCounter/voteStats.js","webpack://medlem/./src/components/votingCounter/votePanel.js","webpack://medlem/./src/components/votingCounter/attendantPanel.js","webpack://medlem/./src/components/votingCounter/speakerPanel.js","webpack://medlem/./src/components/votingCounter/page.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nimport { FiTrash2 } from 'react-icons/fi'\r\nimport { List, ListItem, ListButton } from '../ui/list'\r\nimport useSWR from 'swr'\r\nimport { post, del } from '../request'\r\n\r\nconst DoorkeeperPanel = ({ event }) => {\r\n  const [input, setInput] = useState('')\r\n\r\n  const { data: doorkeepers, mutate } = useSWR(\r\n    `/checkin/doorkeepers/?event_id=${event.id}`\r\n  )\r\n\r\n  const create = async data => {\r\n    const { data: newDoorkeeper } = await post('/checkin/doorkeepers/', data)\r\n    mutate([...doorkeepers, newDoorkeeper])\r\n    return newDoorkeeper\r\n  }\r\n\r\n  const destroy = async id => {\r\n    await del(`/checkin/doorkeepers/${id}/`)\r\n    mutate(doorkeepers.filter(d => d.id !== id))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Dörrvakter</h2>\r\n      <form\r\n        onSubmit={e => {\r\n          e.preventDefault()\r\n          setInput('')\r\n\r\n          create({\r\n            user_username: input,\r\n            event_id: event.id,\r\n          })\r\n        }}\r\n      >\r\n        <input\r\n          value={input}\r\n          placeholder=\"LiU-ID\"\r\n          onChange={e => setInput(e.target.value)}\r\n        />\r\n      </form>\r\n      <List>\r\n        {doorkeepers &&\r\n          doorkeepers.map(doorkeeper => (\r\n            <ListItem\r\n              title={doorkeeper.user.pretty_name}\r\n              key={doorkeeper.id}\r\n              buttons={[\r\n                <ListButton\r\n                  onClick={() => destroy(doorkeeper.id)}\r\n                  iconComponent={FiTrash2}\r\n                  text=\"Ta bort dörrvakt\"\r\n                  key=\"remove\"\r\n                />,\r\n              ]}\r\n            />\r\n          ))}\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DoorkeeperPanel\r\n","import React from 'react'\r\n\r\nimport {listItemColor, listText, listButtons, list, listButton} from '../../scss/ui.module.scss'\r\n\r\nconst List = ({ children }) => <ul className={list}>{children}</ul>\r\n\r\nconst ListItem = ({ title, subtitle, buttons, color }) => (\r\n  <li\r\n    className={color ? listItemColor : ''}\r\n    style={{ borderColor: color }}\r\n  >\r\n    <div className={listText}>\r\n      <h3>{title}</h3>\r\n      <p>{subtitle}</p>\r\n    </div>\r\n    <div className={listButtons}>{buttons}</div>\r\n  </li>\r\n)\r\n\r\nListItem.defaultProps = {\r\n  color: null,\r\n}\r\n\r\nconst ListButton = ({ href, onClick, iconComponent: Icon, text, shown }) =>\r\n  shown ? (\r\n    <>\r\n      {href ? (\r\n        <a\r\n          className={listButton}\r\n          href={href}\r\n          onClick={onClick}\r\n          title={text}\r\n        >\r\n          <Icon />\r\n        </a>\r\n      ) : (\r\n        <button\r\n          className={listButton}\r\n          type=\"button\"\r\n          onClick={onClick}\r\n          title={text}\r\n        >\r\n          <Icon />\r\n        </button>\r\n      )}\r\n    </>\r\n  ) : (\r\n    <></>\r\n  )\r\n\r\nListButton.defaultProps = {\r\n  shown: true,\r\n}\r\n\r\nexport { List, ListItem, ListButton }\r\n","import React, { useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {actions, titleChooser, selectContainer, hint} from '../../scss/ui.module.scss'\r\nimport { Button } from './buttons'\r\n\r\nconst TitleChooser = ({\r\n  title,\r\n  choices,\r\n  categorizedChoices,\r\n  choice,\r\n  setChoice,\r\n  label,\r\n  action,\r\n  actionLabel,\r\n  noChoicesLabel,\r\n  onChange,\r\n}) => {\r\n  const allChoices = [\r\n    ...(choices || []),\r\n    // merge all categorized choices to single array.\r\n    ...Object.keys(categorizedChoices).reduce(\r\n      (accumulator, category) => [\r\n        ...accumulator,\r\n        ...categorizedChoices[category],\r\n      ],\r\n      []\r\n    ),\r\n  ]\r\n\r\n  // Re-select the previously selected choice if there is one\r\n  useEffect(() => {\r\n    const savedChoice = sessionStorage.getItem(`${title}-selectedItem`)\r\n    if (!savedChoice) {\r\n      return;\r\n    }\r\n\r\n    const selectedItem = allChoices.find((item) => `${item.id}` === savedChoice)\r\n    if (selectedItem) {\r\n      setChoice(selectedItem)\r\n    }\r\n\r\n  }, [choices, categorizedChoices])\r\n\r\n  return (\r\n    <div className={titleChooser}>\r\n      <h1>{title}</h1>\r\n      <div className={actions}>\r\n        {allChoices.length ? (\r\n          <div className={selectContainer}>\r\n            <select\r\n              onChange={e => {\r\n                const selectedValue = e.target.value\r\n                const selectedItem =\r\n                  selectedValue === ''\r\n                    ? null\r\n                    : allChoices.filter(i => `${i.id}` === selectedValue)[0]\r\n                setChoice(selectedItem)\r\n                onChange(e)\r\n\r\n                // Save the selected item for refresh re-select\r\n                if (selectedItem) {\r\n                  sessionStorage.setItem(`${title}-selectedItem`, selectedItem.id)\r\n                } else {\r\n                  sessionStorage.removeItem(`${title}-selectedItem`)\r\n                }\r\n              }}\r\n              value={choice ? choice.id : ''}\r\n            >\r\n              <option hidden value=\"\" />\r\n              {choices.sort().map(c => (\r\n                <option value={c.id} key={c.id}>\r\n                  {c[label]}\r\n                </option>\r\n              ))}\r\n              {Object.keys(categorizedChoices)\r\n                .sort()\r\n                .map(key => (\r\n                  <optgroup label={key} key={key}>\r\n                    {categorizedChoices[key].sort().map(c => (\r\n                      <option value={c.id} key={c.id}>\r\n                        {c[label]}\r\n                      </option>\r\n                    ))}\r\n                  </optgroup>\r\n                ))}\r\n            </select>\r\n            {choice === null && (\r\n              <div className={hint}>Välj ett objekt</div>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <span>{noChoicesLabel}</span>\r\n        )}\r\n\r\n        {action && <Button onClick={action}>{actionLabel}</Button>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nTitleChooser.defaultProps = {\r\n  categorizedChoices: {},\r\n  choices: [],\r\n  action: null,\r\n  actionLabel: '',\r\n  choice: null,\r\n  noChoicesLabel: '',\r\n  setChoice: () => {},\r\n  label: '',\r\n  onChange: () => {},\r\n}\r\n\r\nTitleChooser.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  choices: PropTypes.array,\r\n  categorizedChoices: PropTypes.object,\r\n  choice: PropTypes.object,\r\n  setChoice: PropTypes.func,\r\n  label: PropTypes.string,\r\n  action: PropTypes.func,\r\n  actionLabel: PropTypes.string,\r\n  noChoicesLabel: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n}\r\n\r\nexport default TitleChooser\r\n","import React from 'react'\r\nimport { ButtonGroup, Button } from '../ui/buttons'\r\nimport { patch } from '../request'\r\n\r\nconst MeetingPanel = ({ currentMeeting, updatePatch }) => (\r\n  <div>\r\n    <h2>Mötesinfo</h2>\r\n    <h3>{currentMeeting.name}</h3>\r\n    {currentMeeting.description && (\r\n      <p style={{ whiteSpace: 'pre-line' }}>{currentMeeting.description}</p>\r\n    )}\r\n    <h3>Detaljer</h3>\r\n    <ul>\r\n      <li>\r\n        {currentMeeting.enable_speaker_requests\r\n          ? 'Talarlista aktiverad'\r\n          : 'Talarlista inaktiverad'}\r\n      </li>\r\n      <li>\r\n        {currentMeeting.open_attendance\r\n          ? 'Öppen incheckning'\r\n          : 'Stängd incheckning'}\r\n      </li>\r\n      <li>{`Mötesdata rensas: ${currentMeeting.clear_data}`}</li>\r\n    </ul>\r\n  </div>\r\n)\r\n\r\nexport default MeetingPanel\r\n","import React, { useRef, useEffect } from 'react'\r\nimport useSWR from 'swr'\r\n\r\nconst VoteStats = ({ currentMeeting, voteId }) => {\r\n  const { data } = useSWR(() => voteId && `/voting/admin-votes/${voteId}/`)\r\n\r\n  const voteSum = (data\r\n    ? data.alternatives.map(alt => alt.num_votes)\r\n    : []\r\n  ).reduce((a, b) => a + b, 0)\r\n\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {data &&\r\n          data.alternatives.map(alt => (\r\n            <li key={alt.text}>\r\n              {`${alt.text}: ${alt.num_votes}`}\r\n              {voteSum\r\n                ? ` (${\r\n                    alt.num_votes\r\n                      ? Math.round((1000 * alt.num_votes) / voteSum) / 10\r\n                      : 0\r\n                  }%)`\r\n                : ''}\r\n            </li>\r\n          ))}\r\n      </ul>\r\n      <p>\r\n        {'Summa: '}\r\n        {voteSum}\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VoteStats\r\n","import React, { useEffect } from 'react'\r\nimport useSWR from 'swr'\r\nimport { FiBarChart2, FiEdit2 } from 'react-icons/fi'\r\n\r\nimport useModal, { useCloseModal } from '../modal/useModal'\r\nimport VoteStats from './voteStats'\r\nimport { List, ListItem, ListButton } from '../ui/list'\r\nimport { Button } from '../ui/buttons'\r\nimport { post, put } from '../request'\r\n\r\nconst VotePanel = ({ currentMeeting }) => {\r\n  const { data: votes, mutate } = useSWR(\r\n    `/voting/admin-votes/?event_id=${currentMeeting.id}`\r\n  )\r\n\r\n  const create = async data => {\r\n    const { data: newVote } = await post('/voting/admin-votes/', data)\r\n    mutate([...votes, newVote])\r\n    return newVote\r\n  }\r\n\r\n  const update = async (id, data) => {\r\n    const { data: updatedVote } = await put(`/voting/admin-votes/${id}/`, data)\r\n    mutate([...votes.filter(v => v.id !== id), updatedVote])\r\n    return updatedVote\r\n  }\r\n\r\n  const [openChartModal] = useModal(VoteStats)\r\n  const closeModal = useCloseModal()\r\n\r\n  // Close modal when a vote is created\r\n  useEffect(closeModal, [votes])\r\n\r\n  // if (votes === null) return <></>\r\n\r\n  return (\r\n    <div>\r\n      <h2>Omröstningar</h2>\r\n      <List>\r\n        {votes &&\r\n          votes\r\n            .filter(vote => vote.meeting === currentMeeting.id)\r\n            .map(vote => (\r\n              <ListItem\r\n                title={vote.question}\r\n                subtitle={vote.open ? 'Active' : undefined}\r\n                key={vote.id}\r\n                buttons={[\r\n                  <ListButton\r\n                    onClick={() =>\r\n                      openChartModal(`Resultat av \"${vote.question}\"`, {\r\n                        voteId: vote.id,\r\n                      })\r\n                    }\r\n                    iconComponent={FiBarChart2}\r\n                    text=\"Resultat\"\r\n                    key=\"results\"\r\n                  />,\r\n                ]}\r\n              />\r\n            ))}\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VotePanel\r\n","import React, { useState, useEffect } from 'react'\r\nimport { FiTrash2 } from 'react-icons/fi'\r\n\r\nimport { List, ListButton, ListItem } from '../ui/list'\r\nimport { Button, ButtonGroup } from '../ui/buttons'\r\nimport { del, post } from '../request'\r\nimport useSWR from 'swr'\r\n\r\nconst getMemberAttendants = attendants => {\r\n  const memberAttendants = attendants.filter(\r\n    attendant => attendant.has_voting_rights\r\n  )\r\n  return memberAttendants\r\n}\r\n\r\nconst AttendantPanel = ({ currentMeeting }) => {\r\n  const [input, setInput] = useState('')\r\n\r\n  const { data: attendants, mutate } = useSWR(\r\n    () => `/voting/attendants/?meeting_id=${currentMeeting.id}`,\r\n    { refreshInterval: 4000 }\r\n  )\r\n\r\n  if (attendants === null) return <></>\r\n\r\n  return (\r\n    <div>\r\n      <h2>Deltagare</h2>\r\n\r\n      <div>\r\n        <p>{`Röstlängd: ${\r\n          attendants ? getMemberAttendants(attendants).length : 0\r\n        }`}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AttendantPanel\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport useSWR from 'swr'\r\n\r\nimport { FiTrash2 } from 'react-icons/fi'\r\nimport { List, ListButton, ListItem } from '../ui/list'\r\nimport { Button } from '../ui/buttons'\r\nimport { UserContext } from '../layout/layout'\r\nimport { post, del } from '../request'\r\n\r\nconst SpeakerPanel = ({ meeting }) => {\r\n  const { data: speakers, mutate } = useSWR(\r\n    () => meeting && `/voting/speakers/?meeting_id=${meeting.id}`,\r\n    { refreshInterval: 4000 }\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <h2>Talarlista</h2>\r\n      <List>\r\n        {speakers &&\r\n          speakers.map(s => (\r\n            <ListItem\r\n              title={s.user.pretty_name}\r\n              subtitle={s.prioritized ? 'Replik' : null}\r\n              key={s.id}\r\n              buttons={[\r\n                <ListButton\r\n                  onClick={async () => {\r\n                    await del(`/voting/speakers/${s.id}`)\r\n                    mutate(speakers.filter(x => x.id !== s.id))\r\n                  }}\r\n                  iconComponent={FiTrash2}\r\n                  text=\"Ta bort från talarlista\"\r\n                  key=\"remove\"\r\n                />,\r\n              ]}\r\n            />\r\n          ))}\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SpeakerPanel\r\n","import React, { useState, useEffect } from 'react'\r\nimport useSWR from 'swr'\r\n\r\nimport MeetingPanel from './meetingPanel'\r\nimport DoorkeeperPanel from '../checkin/doorkeeperPanel'\r\nimport VotePanel from './votePanel'\r\nimport AttendantPanel from './attendantPanel'\r\nimport { GridContainer, GridItem } from '../ui/grid'\r\nimport SpeakerPanel from './speakerPanel'\r\nimport TitleChooser from '../ui/titleChooser'\r\nimport useModal, { useCloseModal } from '../modal/useModal'\r\nimport { post, patch } from '../request'\r\nimport BigPixels from '../layout/bigPixels'\r\n\r\nconst VotingAdminPage = ({ pageContext: { title } }) => {\r\n  const [currentMeeting, setCurrentMeeting] = useState(null)\r\n  const { data: unorderedMeetings, mutate } = useSWR('/voting/admin-meetings/')\r\n  const closeModal = useCloseModal()\r\n\r\n  const create = async data => {\r\n    const { data: newMeeting } = await post('/voting/admin-meetings/', data)\r\n    mutate([...unorderedMeetings, newMeeting])\r\n  }\r\n\r\n  const updatePatch = async data => {\r\n    const { data: updatedMeeting } = await patch(\r\n      `/voting/admin-meetings/${currentMeeting.id}/`,\r\n      data\r\n    )\r\n    mutate([\r\n      ...unorderedMeetings.filter(meeting => meeting.id !== currentMeeting.id),\r\n      updatedMeeting,\r\n    ])\r\n  }\r\n\r\n  const meetings = unorderedMeetings ? [...unorderedMeetings].reverse() : null\r\n\r\n  // sync currentMeeting with updated meetings\r\n  useEffect(\r\n    () => {\r\n      if (currentMeeting)\r\n        setCurrentMeeting(meetings.find(m => m.id === currentMeeting.id))\r\n    },\r\n    [meetings]\r\n  )\r\n\r\n  return (\r\n    <BigPixels>\r\n      <GridContainer>\r\n        <GridItem fullWidth>\r\n          <TitleChooser\r\n            title={title}\r\n            choice={currentMeeting}\r\n            setChoice={setCurrentMeeting}\r\n            choices={meetings}\r\n            label=\"name\"\r\n            noChoicesLabel=\"Det finns inga möten just nu.\"\r\n          />\r\n        </GridItem>\r\n        {currentMeeting && (\r\n          <>\r\n            <GridItem>\r\n              <MeetingPanel\r\n                currentMeeting={currentMeeting}\r\n                updatePatch={updatePatch}\r\n              />\r\n            </GridItem>\r\n            <GridItem>\r\n              <VotePanel currentMeeting={currentMeeting} />\r\n            </GridItem>\r\n            <GridItem>\r\n              <AttendantPanel currentMeeting={currentMeeting} />\r\n            </GridItem>\r\n          </>\r\n        )}\r\n      </GridContainer>\r\n    </BigPixels>\r\n  )\r\n}\r\n\r\nexport default VotingAdminPage\r\n"],"names":["_ref","event","input","setInput","useState","data","doorkeepers","mutate","useSWR","id","React","onSubmit","e","preventDefault","async","newDoorkeeper","post","concat","_toConsumableArray","create","user_username","event_id","value","placeholder","onChange","target","List","map","doorkeeper","ListItem","title","user","pretty_name","key","buttons","ListButton","onClick","del","filter","d","destroy","iconComponent","FiTrash2","text","children","className","list","_ref2","subtitle","color","listItemColor","style","borderColor","listText","listButtons","defaultProps","_ref3","href","Icon","shown","listButton","type","TitleChooser","choices","categorizedChoices","choice","setChoice","label","action","actionLabel","noChoicesLabel","allChoices","Object","keys","reduce","accumulator","category","useEffect","savedChoice","sessionStorage","getItem","selectedItem","find","item","titleChooser","actions","length","selectContainer","selectedValue","i","setItem","removeItem","hidden","sort","c","hint","Button","currentMeeting","updatePatch","name","description","whiteSpace","enable_speaker_requests","open_attendance","clear_data","voteId","voteSum","alternatives","alt","num_votes","a","b","Math","round","votes","openChartModal","useModal","VoteStats","closeModal","useCloseModal","vote","meeting","question","open","undefined","FiBarChart2","attendants","refreshInterval","attendant","has_voting_rights","getMemberAttendants","pageContext","setCurrentMeeting","unorderedMeetings","meetings","reverse","m","BigPixels","GridContainer","GridItem","fullWidth","MeetingPanel","updatedMeeting","patch","VotePanel","AttendantPanel"],"sourceRoot":""}