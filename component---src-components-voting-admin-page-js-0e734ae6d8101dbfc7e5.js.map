{"version":3,"file":"component---src-components-voting-admin-page-js-0e734ae6d8101dbfc7e5.js","mappings":"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","sources":["webpack://medlem/./src/components/checkin/doorkeeperPanel.js","webpack://medlem/./src/scss/form.module.scss","webpack://medlem/./src/components/form/input.js","webpack://medlem/./src/components/form/form.js","webpack://medlem/./src/components/modal/useConfirmModal.js","webpack://medlem/./src/components/votingAdmin/meetingPanel.js","webpack://medlem/./src/components/votingAdmin/addVote.js","webpack://medlem/./src/components/votingAdmin/voteStats.js","webpack://medlem/./src/components/votingAdmin/votePanel.js","webpack://medlem/./src/components/votingAdmin/attendantPanel.js","webpack://medlem/./src/components/votingAdmin/speakerPanel.js","webpack://medlem/./src/components/votingAdmin/addMeeting.js","webpack://medlem/./src/components/votingAdmin/page.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nimport { FiTrash2 } from 'react-icons/fi'\r\nimport { List, ListItem, ListButton } from '../ui/list'\r\nimport useSWR from 'swr'\r\nimport { post, del } from '../request'\r\n\r\nconst DoorkeeperPanel = ({ event }) => {\r\n  const [input, setInput] = useState('')\r\n\r\n  const { data: doorkeepers, mutate } = useSWR(\r\n    `/checkin/doorkeepers/?event_id=${event.id}`\r\n  )\r\n\r\n  const create = async data => {\r\n    const { data: newDoorkeeper } = await post('/checkin/doorkeepers/', data)\r\n    mutate([...doorkeepers, newDoorkeeper])\r\n    return newDoorkeeper\r\n  }\r\n\r\n  const destroy = async id => {\r\n    await del(`/checkin/doorkeepers/${id}/`)\r\n    mutate(doorkeepers.filter(d => d.id !== id))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Dörrvakter</h2>\r\n      <form\r\n        onSubmit={e => {\r\n          e.preventDefault()\r\n          setInput('')\r\n\r\n          create({\r\n            user_username: input,\r\n            event_id: event.id,\r\n          })\r\n        }}\r\n      >\r\n        <input\r\n          value={input}\r\n          placeholder=\"LiU-ID\"\r\n          onChange={e => setInput(e.target.value)}\r\n        />\r\n      </form>\r\n      <List>\r\n        {doorkeepers &&\r\n          doorkeepers.map(doorkeeper => (\r\n            <ListItem\r\n              title={doorkeeper.user.pretty_name}\r\n              key={doorkeeper.id}\r\n              buttons={[\r\n                <ListButton\r\n                  onClick={() => destroy(doorkeeper.id)}\r\n                  iconComponent={FiTrash2}\r\n                  text=\"Ta bort dörrvakt\"\r\n                  key=\"remove\"\r\n                />,\r\n              ]}\r\n            />\r\n          ))}\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DoorkeeperPanel\r\n","// extracted by mini-css-extract-plugin\nexport var Label = \"form-module--Label--ab587\";\nexport var inputWrapper = \"form-module--inputWrapper--1111e\";\nexport var required = \"form-module--required--7063a\";","import React, { useState, useEffect } from 'react'\r\nimport DateTimePicker from './dateTimePicker'\r\n\r\nimport { Label, Required, inputWrapper } from '../../scss/form.module.scss'\r\n\r\nconst AutoInput = ({\r\n  value,\r\n  onChange,\r\n  type,\r\n  label,\r\n  required,\r\n  min_value,\r\n  max_value,\r\n  min_length,\r\n  max_length,\r\n}) => {\r\n  const change = e => {\r\n    onChange(e.target.value)\r\n  }\r\n\r\n  const map = {\r\n    datetime: <DateTimePicker value={value} onChange={onChange} />,\r\n    date: <input type=\"date\" value={value} onChange={change} />,\r\n    boolean: (\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={value}\r\n        onChange={e => {\r\n          onChange(e.target.checked)\r\n        }}\r\n      />\r\n    ),\r\n    integer: (\r\n      <input\r\n        type=\"number\"\r\n        value={value}\r\n        onChange={change}\r\n        max={max_value}\r\n        min={min_value}\r\n      />\r\n    ),\r\n  }\r\n\r\n  const component = Object.prototype.hasOwnProperty.call(map, type) ? (\r\n    map[type]\r\n  ) : (\r\n    <input\r\n      value={value}\r\n      onChange={change}\r\n      maxLength={max_length}\r\n      minLength={min_length}\r\n    />\r\n  )\r\n\r\n  return (\r\n    <label className={Label}>\r\n      {`${label}`}\r\n      {required && <span className={Required}>*</span>}\r\n      <div className={inputWrapper}>{component}</div>\r\n    </label>\r\n  )\r\n}\r\nexport default AutoInput\r\n","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport request, { options } from '../request'\r\nimport AutoInput from './input'\r\nimport { Button } from '../ui/buttons'\r\n\r\nconst AutoForm = ({ endpoint, method, customFetcher, onSubmit, defaults }) => {\r\n  const [fields, setFields] = useState()\r\n  const [values, setValues] = useState(defaults)\r\n  const [errors, setErrors] = useState({})\r\n\r\n  const setValue = (field, value) => {\r\n    setValues(old => ({ ...old, [field]: value }))\r\n  }\r\n\r\n  const setError = (field, error) => {\r\n    setErrors(old => ({ ...old, [field]: error }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    // request endpoint info from server\r\n    options(endpoint)\r\n      .then(res => {\r\n        const raw = res.data.actions.POST\r\n\r\n        // object to array\r\n        const arrayified = Object.keys(raw).map(key => ({\r\n          key,\r\n          ...raw[key],\r\n        }))\r\n        const editable = arrayified.filter(f => !f.read_only)\r\n\r\n        setFields(editable)\r\n      })\r\n      .catch(err => {})\r\n  }, endpoint)\r\n\r\n  return (\r\n    <form\r\n      onSubmit={e => {\r\n        e.preventDefault()\r\n        onSubmit()\r\n        if (customFetcher) {\r\n          customFetcher(values).catch(err => {\r\n            if (err.response) {\r\n              setErrors(err.response.data)\r\n            }\r\n          })\r\n        } else {\r\n          request({ endpoint, method, data: values })\r\n        }\r\n      }}\r\n    >\r\n      {fields &&\r\n        fields.map(field => (\r\n          <React.Fragment key={field.key}>\r\n            <AutoInput\r\n              {...field}\r\n              onChange={newValue => {\r\n                setValue(field.key, newValue)\r\n              }}\r\n              value={values[field.key]}\r\n            />\r\n            {Object.prototype.hasOwnProperty.call(errors, field.key) && (\r\n              <div>{errors[field.key].join(', ')}</div>\r\n            )}\r\n          </React.Fragment>\r\n        ))}\r\n      <Button type=\"submit\" onClick={() => {}}>\r\n        Submit\r\n      </Button>\r\n    </form>\r\n  )\r\n}\r\n\r\nAutoForm.defaultProps = {\r\n  method: 'POST',\r\n  customFetcher: null,\r\n  onSubmit: () => {},\r\n  defaults: {},\r\n}\r\n\r\nAutoForm.propTypes = {\r\n  method: PropTypes.string,\r\n  endpoint: PropTypes.string.isRequired,\r\n  customFetcher: PropTypes.func,\r\n  onSubmit: PropTypes.func,\r\n  defaults: PropTypes.object,\r\n}\r\n\r\nexport default AutoForm\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport useModal, { useCloseModal } from './useModal'\r\nimport { Button } from '../ui/buttons'\r\n\r\nimport { confirmation } from '../../scss/modal.module.scss'\r\n\r\nconst Confirmation = ({ text, onAccept, onDecline }) => {\r\n  const close = useCloseModal()\r\n  return (\r\n    <div className={confirmation}>\r\n      <p>{text}</p>\r\n      <Button\r\n        onClick={() => {\r\n          onDecline()\r\n          close()\r\n        }}\r\n      >\r\n        Nej\r\n      </Button>\r\n      <Button\r\n        onClick={() => {\r\n          onAccept()\r\n          close()\r\n        }}\r\n      >\r\n        Ja\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nConfirmation.propTypes = {\r\n  text: PropTypes.string,\r\n  onAccept: PropTypes.func,\r\n  onDecline: PropTypes.func,\r\n}\r\n\r\nConfirmation.defaultProps = {\r\n  text: 'Är du säker?',\r\n  onAccept: () => {},\r\n  onDecline: () => {},\r\n}\r\n\r\nexport default function useConfirmModal() {\r\n  const [openModal, isOpen] = useModal(Confirmation)\r\n\r\n  const open = (text, onAccept, onDecline) => {\r\n    openModal('', { text, onAccept, onDecline })\r\n  }\r\n\r\n  return [open, isOpen]\r\n}\r\n","import React from 'react'\r\nimport { ButtonGroup, Button } from '../ui/buttons'\r\nimport { patch } from '../request'\r\n\r\nconst MeetingPanel = ({ currentMeeting, updatePatch }) => (\r\n  <div>\r\n    <h2>Mötesinfo</h2>\r\n    <h3>{currentMeeting.name}</h3>\r\n    {currentMeeting.description && (\r\n      <p style={{ whiteSpace: 'pre-line' }}>{currentMeeting.description}</p>\r\n    )}\r\n    <h3>Detaljer</h3>\r\n    <ul>\r\n      <li>\r\n        {currentMeeting.enable_speaker_requests\r\n          ? 'Talarlista aktiverad'\r\n          : 'Talarlista inaktiverad'}\r\n      </li>\r\n      <li>\r\n        {currentMeeting.open_attendance\r\n          ? 'Öppen incheckning'\r\n          : 'Stängd incheckning'}\r\n      </li>\r\n      <li>{`Mötesdata rensas: ${currentMeeting.clear_data}`}</li>\r\n    </ul>\r\n    <ButtonGroup>\r\n      <Button\r\n        onClick={() =>\r\n          updatePatch({\r\n            enable_speaker_requests: !currentMeeting.enable_speaker_requests,\r\n          })\r\n        }\r\n      >\r\n        {currentMeeting.enable_speaker_requests\r\n          ? 'Inaktivera talarlista'\r\n          : 'Aktivera talarlista'}\r\n      </Button>\r\n      <Button\r\n        onClick={() =>\r\n          updatePatch({\r\n            open_attendance: !currentMeeting.open_attendance,\r\n          })\r\n        }\r\n      >\r\n        {currentMeeting.open_attendance\r\n          ? 'Stäng självincheckning'\r\n          : 'Öppna självincheckning'}\r\n      </Button>\r\n    </ButtonGroup>\r\n  </div>\r\n)\r\n\r\nexport default MeetingPanel\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nlet currentKey = 0\r\n// creates an alternative with an unique key, do not manually create alternative objects\r\n// the key does not match the id later given by the server.\r\nconst createAlternative = (existingData = {}) => {\r\n  currentKey += 1\r\n  return { text: '', ...existingData, key: currentKey }\r\n}\r\n\r\nconst AddVote = ({ currentMeeting, create, updateData, update }) => {\r\n  const [question, setQuestion] = useState(\r\n    updateData ? updateData.question : ''\r\n  )\r\n  const [alternatives, setAlternatives] = useState(\r\n    updateData\r\n      ? updateData.alternatives.map(alt => createAlternative(alt))\r\n      : [createAlternative({text: 'Vakant'}), createAlternative({text: 'Blankt'})]\r\n  )\r\n  const [currentQuestion, setCurrentQuestion] = useState(\r\n    updateData ? updateData.open : true\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <label>\r\n        Fråga\r\n        <input\r\n          value={question}\r\n          onChange={e => {\r\n            setQuestion(e.target.value)\r\n          }}\r\n        />\r\n      </label>\r\n      <hr />\r\n      <ul>\r\n        {alternatives.map((alt, i) => (\r\n          <li key={alt.key}>\r\n            <input\r\n              value={alt.text}\r\n              onChange={e => {\r\n                const newVal = e.target.value\r\n                setAlternatives(prev => [\r\n                  ...prev.slice(0, i),\r\n                  { ...prev[i], text: newVal },\r\n                  ...prev.slice(i + 1),\r\n                ])\r\n              }}\r\n            />\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setAlternatives(prev => [\r\n                  ...prev.slice(0, i),\r\n                  ...prev.slice(i + 1),\r\n                ])\r\n              }}\r\n            >\r\n              X\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          setAlternatives(prev => [...prev, createAlternative()])\r\n        }}\r\n      >\r\n        Lägg till alternativ\r\n      </button>\r\n      <hr />\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={currentQuestion}\r\n          onChange={() => setCurrentQuestion(prev => !prev)}\r\n        />\r\n        Nuvarande frågan\r\n      </label>\r\n      <hr />\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          if (updateData) {\r\n            update(updateData.id, {\r\n              question,\r\n              open: currentQuestion,\r\n              alternatives,\r\n              meeting: currentMeeting.id,\r\n            })\r\n          } else {\r\n            create({\r\n              question,\r\n              open: currentQuestion,\r\n              alternatives,\r\n              meeting: currentMeeting.id,\r\n            })\r\n          }\r\n        }}\r\n      >\r\n        {updateData ? 'Uppdatera omröstning' : 'Skapa ny omröstning'}\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddVote\r\n","import React, { useRef, useEffect } from 'react'\r\nimport useSWR from 'swr'\r\n\r\nconst VoteStats = ({ currentMeeting, voteId }) => {\r\n  const { data } = useSWR(() => voteId && `/voting/admin-votes/${voteId}/`)\r\n\r\n  const voteSum = (data\r\n    ? data.alternatives.map(alt => alt.num_votes)\r\n    : []\r\n  ).reduce((a, b) => a + b, 0)\r\n\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {data &&\r\n          data.alternatives.map(alt => (\r\n            <li key={alt.text}>\r\n              {`${alt.text}: ${alt.num_votes}`}\r\n              {voteSum\r\n                ? ` (${\r\n                    alt.num_votes\r\n                      ? Math.round((1000 * alt.num_votes) / voteSum) / 10\r\n                      : 0\r\n                  }%)`\r\n                : ''}\r\n            </li>\r\n          ))}\r\n      </ul>\r\n      <p>\r\n        {'Summa: '}\r\n        {voteSum}\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VoteStats\r\n","import React, { useEffect } from 'react'\r\nimport useSWR from 'swr'\r\nimport { FiTrash2, FiBarChart2, FiEdit2 } from 'react-icons/fi'\r\n\r\nimport useModal, { useCloseModal } from '../modal/useModal'\r\nimport useConfirmModal from '../modal/useConfirmModal'\r\nimport AddVote from './addVote'\r\nimport VoteStats from './voteStats'\r\nimport { List, ListItem, ListButton } from '../ui/list'\r\nimport { Button } from '../ui/buttons'\r\nimport { del, post, put } from '../request'\r\n\r\nconst VotePanel = ({ currentMeeting }) => {\r\n  const { data: votes, mutate } = useSWR(\r\n    `/voting/admin-votes/?event_id=${currentMeeting.id}`\r\n  )\r\n\r\n  const create = async data => {\r\n    const { data: newVote } = await post('/voting/admin-votes/', data)\r\n    mutate([...votes, newVote])\r\n    return newVote\r\n  }\r\n\r\n  const update = async (id, data) => {\r\n    const { data: updatedVote } = await put(`/voting/admin-votes/${id}/`, data)\r\n    mutate([...votes.filter(v => v.id !== id), updatedVote])\r\n    return updatedVote\r\n  }\r\n\r\n  const open = async vote => {\r\n    await closeModal()\r\n    openChartModal(`Resultat av \"${vote.question}\"`, {\r\n      voteId: vote.id,\r\n    })\r\n  }\r\n\r\n  const [openCreateModal] = useModal(AddVote)\r\n  const [openChartModal] = useModal(VoteStats)\r\n  const closeModal = useCloseModal()\r\n  const [confirmModal] = useConfirmModal()\r\n\r\n  // Close modal when a vote is created\r\n  useEffect(closeModal, [votes])\r\n\r\n  // if (votes === null) return <></>\r\n\r\n  return (\r\n    <div>\r\n      <h2>Omröstningar</h2>\r\n      <Button\r\n        onClick={() =>\r\n          openCreateModal('Ny omröstning', {\r\n            currentMeeting,\r\n            create,\r\n          })\r\n        }\r\n      >\r\n        Ny omröstning\r\n      </Button>\r\n      <List>\r\n        {votes &&\r\n          votes\r\n            .filter(vote => vote.meeting === currentMeeting.id)\r\n            .map(vote => (\r\n              <ListItem\r\n                title={vote.question}\r\n                subtitle={vote.open ? 'Active' : undefined}\r\n                key={vote.id}\r\n                buttons={[\r\n                  <ListButton\r\n                    onClick={() =>\r\n                      confirmModal(\r\n                        `Vill du ta bort omröstningen?`,\r\n                        async () => {\r\n                          console.log(vote)\r\n                          await del(`/voting/admin-votes/${vote.id}`, {\r\n                            params: {\r\n                              meeting_id: currentMeeting.id,\r\n                              vote_id: vote.id,\r\n                            },\r\n                          })\r\n\r\n                          mutate([])\r\n                        },\r\n                        closeModal\r\n                      )\r\n                    }\r\n                    iconComponent={FiTrash2}\r\n                    text=\"Ta bort\"\r\n                    key=\"remove\"\r\n                  />,\r\n                  <ListButton\r\n                    onClick={() =>\r\n                      confirmModal(\r\n                        `Vill du se resultatet?`,\r\n                        function() {\r\n                          open(vote)\r\n                        },\r\n                        closeModal\r\n                      )\r\n                    }\r\n                    iconComponent={FiBarChart2}\r\n                    text=\"Resultat\"\r\n                    key=\"results\"\r\n                  />,\r\n                  <ListButton\r\n                    onClick={() =>\r\n                      openCreateModal(`Uppdatera \"${vote.question}\"`, {\r\n                        currentMeeting,\r\n                        update,\r\n                        updateData: vote,\r\n                      })\r\n                    }\r\n                    iconComponent={FiEdit2}\r\n                    text=\"Uppdatera omröstning\"\r\n                    key=\"update\"\r\n                  />,\r\n                ]}\r\n              />\r\n            ))}\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VotePanel\r\n","import React, { useState, useEffect } from 'react'\r\nimport { FiTrash2 } from 'react-icons/fi'\r\n\r\nimport { List, ListButton, ListItem } from '../ui/list'\r\nimport { Button, ButtonGroup } from '../ui/buttons'\r\nimport { del, post } from '../request'\r\nimport useConfirmModal from '../modal/useConfirmModal'\r\nimport { useCloseModal } from '../modal/useModal'\r\nimport useSWR from 'swr'\r\n\r\nconst getMemberAttendants = attendants => {\r\n  const memberAttendants = attendants.filter(\r\n    attendant => attendant.has_voting_rights\r\n  )\r\n  return memberAttendants\r\n}\r\n\r\nconst AttendantPanel = ({ currentMeeting }) => {\r\n  const [input, setInput] = useState('')\r\n  const [confirmModal] = useConfirmModal()\r\n  const closeModal = useCloseModal()\r\n\r\n  const { data: attendants, mutate } = useSWR(\r\n    () => `/voting/attendants/?meeting_id=${currentMeeting.id}`,\r\n    { refreshInterval: 4000 }\r\n  )\r\n\r\n  if (attendants === null) return <></>\r\n\r\n  return (\r\n    <div>\r\n      <h2>Deltagare</h2>\r\n      <form\r\n        onSubmit={async e => {\r\n          e.preventDefault()\r\n          setInput('')\r\n          const { data: newAttendant } = await post('/voting/attendants/', {\r\n            user_username: input,\r\n            meeting_id: currentMeeting.id,\r\n            has_voting_rights: true,\r\n          })\r\n          mutate([...attendants, newAttendant])\r\n        }}\r\n      >\r\n        <input\r\n          value={input}\r\n          placeholder=\"LiU-ID\"\r\n          onChange={e => setInput(e.target.value)}\r\n        />\r\n      </form>\r\n      <div>\r\n        <ButtonGroup>\r\n          <p>{`Röstlängd: ${\r\n            attendants ? getMemberAttendants(attendants).length : 0\r\n          }`}</p>\r\n          <Button\r\n            onClick={() =>\r\n              confirmModal(\r\n                `Är du säker på att du vill ta bort alla deltagare?`,\r\n                async () => {\r\n                  await del(\r\n                    `/voting/attendants/clear/?meeting_id=${currentMeeting.id}`\r\n                  )\r\n\r\n                  mutate([])\r\n                },\r\n                closeModal\r\n              )\r\n            }\r\n          >\r\n            Återställ deltagarlista\r\n          </Button>\r\n        </ButtonGroup>\r\n      </div>\r\n      <List>\r\n        {attendants &&\r\n          getMemberAttendants(attendants).map(attendant => (\r\n            <ListItem\r\n              title={attendant.user.pretty_name}\r\n              key={attendant.id}\r\n              buttons={[\r\n                <ListButton\r\n                  onClick={async () => {\r\n                    await del(`/voting/attendants/${attendant.id}`, {\r\n                      meeting_id: currentMeeting.id,\r\n                    })\r\n                    mutate(attendants.filter(x => x.id !== attendant.id))\r\n                  }}\r\n                  iconComponent={FiTrash2}\r\n                  text=\"Ta bort deltagare\"\r\n                  key=\"remove\"\r\n                />,\r\n              ]}\r\n            />\r\n          ))}\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AttendantPanel\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport useSWR from 'swr'\r\n\r\nimport { FiTrash2 } from 'react-icons/fi'\r\nimport { List, ListButton, ListItem } from '../ui/list'\r\nimport { Button } from '../ui/buttons'\r\nimport { UserContext } from '../layout/layout'\r\nimport { post, del } from '../request'\r\n\r\nconst SpeakerPanel = ({ meeting }) => {\r\n  const { data: speakers, mutate } = useSWR(\r\n    () => meeting && `/voting/speakers/?meeting_id=${meeting.id}`,\r\n    { refreshInterval: 4000 }\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <h2>Talarlista</h2>\r\n      <List>\r\n        {speakers &&\r\n          speakers.map(s => (\r\n            <ListItem\r\n              title={s.user.pretty_name}\r\n              subtitle={s.prioritized ? 'Replik' : null}\r\n              key={s.id}\r\n              buttons={[\r\n                <ListButton\r\n                  onClick={async () => {\r\n                    await del(`/voting/speakers/${s.id}`)\r\n                    mutate(speakers.filter(x => x.id !== s.id))\r\n                  }}\r\n                  iconComponent={FiTrash2}\r\n                  text=\"Ta bort från talarlista\"\r\n                  key=\"remove\"\r\n                />,\r\n              ]}\r\n            />\r\n          ))}\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SpeakerPanel\r\n","import React from 'react'\r\nimport AutoForm from '../form/form'\r\n\r\nconst AddMeeting = ({ create }) => (\r\n  <AutoForm\r\n    endpoint=\"/voting/admin-meetings/\" // onSubmit={() => {\r\n    //   setNewMeetingName('')\r\n    // }}\r\n    customFetcher={create}\r\n  />\r\n)\r\n\r\nexport default AddMeeting\r\n","import React, { useState, useEffect } from 'react'\r\nimport useSWR from 'swr'\r\n\r\nimport MeetingPanel from './meetingPanel'\r\nimport DoorkeeperPanel from '../checkin/doorkeeperPanel'\r\nimport VotePanel from './votePanel'\r\nimport AttendantPanel from './attendantPanel'\r\nimport { GridContainer, GridItem } from '../ui/grid'\r\nimport SpeakerPanel from './speakerPanel'\r\nimport TitleChooser from '../ui/titleChooser'\r\nimport AddMeeting from './addMeeting'\r\nimport useModal, { useCloseModal } from '../modal/useModal'\r\nimport { post, patch } from '../request'\r\nimport BigPixels from '../layout/bigPixels'\r\n\r\nconst VotingAdminPage = ({ pageContext: { title } }) => {\r\n  const [currentMeeting, setCurrentMeeting] = useState(null)\r\n  const { data: unorderedMeetings, mutate } = useSWR('/voting/admin-meetings/')\r\n  const [openCreateModal] = useModal(AddMeeting)\r\n  const closeModal = useCloseModal()\r\n\r\n  const create = async data => {\r\n    const { data: newMeeting } = await post('/voting/admin-meetings/', data)\r\n    mutate([...unorderedMeetings, newMeeting])\r\n  }\r\n\r\n  const updatePatch = async data => {\r\n    const { data: updatedMeeting } = await patch(\r\n      `/voting/admin-meetings/${currentMeeting.id}/`,\r\n      data\r\n    )\r\n    mutate([\r\n      ...unorderedMeetings.filter(meeting => meeting.id !== currentMeeting.id),\r\n      updatedMeeting,\r\n    ])\r\n  }\r\n\r\n  const meetings = unorderedMeetings ? [...unorderedMeetings].reverse() : null\r\n\r\n  // sync currentMeeting with updated meetings\r\n  useEffect(() => {\r\n    if (currentMeeting)\r\n      setCurrentMeeting(meetings.find(m => m.id === currentMeeting.id))\r\n  }, [meetings])\r\n\r\n  return (\r\n    <BigPixels>\r\n      <GridContainer>\r\n        <GridItem fullWidth>\r\n          <TitleChooser\r\n            title={title}\r\n            choice={currentMeeting}\r\n            setChoice={setCurrentMeeting}\r\n            choices={meetings}\r\n            label=\"name\"\r\n            action={() => {\r\n              openCreateModal('Nytt möte', {\r\n                create: async data => {\r\n                  await create(data)\r\n                  closeModal()\r\n                },\r\n              })\r\n            }}\r\n            actionLabel=\"Nytt möte\"\r\n            noChoicesLabel=\"Det finns inga möten just nu.\"\r\n          />\r\n        </GridItem>\r\n        {currentMeeting && (\r\n          <>\r\n            <GridItem>\r\n              <MeetingPanel\r\n                currentMeeting={currentMeeting}\r\n                updatePatch={updatePatch}\r\n              />\r\n            </GridItem>\r\n            <GridItem>\r\n              <VotePanel currentMeeting={currentMeeting} />\r\n            </GridItem>\r\n            <GridItem>\r\n              <DoorkeeperPanel event={currentMeeting} />\r\n            </GridItem>\r\n            <GridItem>\r\n              <AttendantPanel currentMeeting={currentMeeting} />\r\n            </GridItem>\r\n            <GridItem>\r\n              <SpeakerPanel meeting={currentMeeting} />\r\n            </GridItem>\r\n          </>\r\n        )}\r\n      </GridContainer>\r\n    </BigPixels>\r\n  )\r\n}\r\n\r\nexport default VotingAdminPage\r\n"],"names":["_ref","event","input","setInput","useState","data","doorkeepers","mutate","useSWR","id","React","onSubmit","e","preventDefault","async","newDoorkeeper","post","concat","_toConsumableArray","create","user_username","event_id","value","placeholder","onChange","target","List","map","doorkeeper","ListItem","title","user","pretty_name","key","buttons","ListButton","onClick","del","filter","d","destroy","iconComponent","FiTrash2","text","Label","inputWrapper","type","label","required","min_value","max_value","min_length","max_length","change","datetime","DateTimePicker","date","boolean","checked","integer","max","min","component","Object","prototype","hasOwnProperty","call","maxLength","minLength","className","Required","AutoForm","endpoint","method","customFetcher","defaults","fields","setFields","values","setValues","errors","setErrors","useEffect","options","then","res","raw","actions","POST","editable","keys","f","read_only","catch","err","response","request","field","AutoInput","assign","newValue","setValue","old","join","Button","defaultProps","Confirmation","onAccept","onDecline","close","useCloseModal","confirmation","useConfirmModal","openModal","isOpen","useModal","open","currentMeeting","updatePatch","name","description","style","whiteSpace","enable_speaker_requests","open_attendance","clear_data","ButtonGroup","currentKey","createAlternative","existingData","updateData","update","question","setQuestion","alternatives","setAlternatives","alt","currentQuestion","setCurrentQuestion","i","newVal","prev","slice","meeting","voteId","voteSum","num_votes","reduce","a","b","Math","round","votes","newVote","updatedVote","put","v","openCreateModal","AddVote","openChartModal","VoteStats","closeModal","confirmModal","vote","subtitle","undefined","console","log","params","meeting_id","vote_id","FiBarChart2","FiEdit2","getMemberAttendants","attendants","attendant","has_voting_rights","refreshInterval","newAttendant","length","x","speakers","s","prioritized","pageContext","setCurrentMeeting","unorderedMeetings","AddMeeting","meetings","reverse","find","m","BigPixels","GridContainer","GridItem","fullWidth","TitleChooser","choice","setChoice","choices","action","newMeeting","actionLabel","noChoicesLabel","MeetingPanel","updatedMeeting","patch","VotePanel","DoorkeeperPanel","AttendantPanel","SpeakerPanel"],"sourceRoot":""}