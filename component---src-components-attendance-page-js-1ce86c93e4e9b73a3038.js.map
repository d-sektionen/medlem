{"version":3,"sources":["webpack:///./src/components/checkin/doorkeeperPanel.js","webpack:///./src/components/attendance/attendantPanel.js","webpack:///./src/components/attendance/addOccurrence.js","webpack:///./src/components/attendance/page.js","webpack:///./src/scss/form.module.scss","webpack:///./src/components/form/input.js","webpack:///./src/components/form/form.js"],"names":["DoorkeeperPanel","event","input","setInput","useState","data","doorkeepers","mutate","useSWR","id","onSubmit","e","preventDefault","async","newDoorkeeper","post","create","user_username","event_id","value","onChange","target","map","doorkeeper","title","user","pretty_name","key","buttons","onClick","del","filter","d","destroy","iconComponent","FiTrash2","text","AttendantPanel","currentOccurrence","attendants","attendant_limit","attendantLimit","members_only","membersOnly","length","attendant","username","AddOccurrence","endpoint","customFetcher","AttendancePage","pageContext","setCurrentOccurrence","unorderedOccurrences","openCreateModal","useModal","closeModal","useCloseModal","occurrences","reverse","useEffect","find","m","fullWidth","choice","setChoice","choices","label","action","newOccurrence","actionLabel","noChoicesLabel","module","exports","AutoInput","type","required","min_value","max_value","min_length","max_length","change","datetime","date","boolean","checked","integer","max","min","component","Object","prototype","hasOwnProperty","call","maxLength","minLength","className","style","inputWrapper","AutoForm","method","defaults","fields","setFields","values","setValues","errors","setErrors","options","then","res","raw","actions","POST","editable","keys","f","read_only","catch","err","response","request","field","Fragment","newValue","old","setValue","join","defaultProps"],"mappings":"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","file":"component---src-components-attendance-page-js-1ce86c93e4e9b73a3038.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nimport { FiTrash2 } from 'react-icons/fi'\r\nimport { List, ListItem, ListButton } from '../ui/list'\r\nimport useSWR from 'swr'\r\nimport { post, del } from '../request'\r\n\r\nconst DoorkeeperPanel = ({ event }) => {\r\n  const [input, setInput] = useState('')\r\n\r\n  const { data: doorkeepers, mutate } = useSWR(\r\n    `/checkin/doorkeepers/?event_id=${event.id}`\r\n  )\r\n\r\n  const create = async data => {\r\n    const { data: newDoorkeeper } = await post('/checkin/doorkeepers/', data)\r\n    mutate([...doorkeepers, newDoorkeeper])\r\n    return newDoorkeeper\r\n  }\r\n\r\n  const destroy = async id => {\r\n    await del(`/checkin/doorkeepers/${id}/`)\r\n    mutate(doorkeepers.filter(d => d.id !== id))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Dörrvakter</h2>\r\n      <form\r\n        onSubmit={e => {\r\n          e.preventDefault()\r\n          setInput('')\r\n\r\n          create({\r\n            user_username: input,\r\n            event_id: event.id,\r\n          })\r\n        }}\r\n      >\r\n        <input value={input} onChange={e => setInput(e.target.value)} />\r\n      </form>\r\n      <List>\r\n        {doorkeepers &&\r\n          doorkeepers.map(doorkeeper => (\r\n            <ListItem\r\n              title={doorkeeper.user.pretty_name}\r\n              key={doorkeeper.id}\r\n              buttons={[\r\n                <ListButton\r\n                  onClick={() => destroy(doorkeeper.id)}\r\n                  iconComponent={FiTrash2}\r\n                  text=\"Ta bort dörrvakt\"\r\n                  key=\"remove\"\r\n                />,\r\n              ]}\r\n            />\r\n          ))}\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DoorkeeperPanel\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst AttendantPanel = ({ currentOccurrence }) => {\r\n  if (!currentOccurrence) return <></>\r\n\r\n  const {\r\n    attendants,\r\n    attendant_limit: attendantLimit,\r\n    members_only: membersOnly,\r\n  } = currentOccurrence\r\n\r\n  return (\r\n    <div>\r\n      <h2>Deltagare</h2>\r\n      <p>Antal deltagare: {attendants.length}</p>\r\n      {attendantLimit !== 0 && <p>Deltagargräns: {attendantLimit}</p>}\r\n      <p>{membersOnly ? 'Endast för medlemmar' : 'Öppet för alla användare'}</p>\r\n      <ul>\r\n        {attendants.map(attendant => (\r\n          <li key={attendant.id}>{attendant.username}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AttendantPanel\r\n","import React from 'react'\r\nimport AutoForm from '../form/form'\r\n\r\nconst AddOccurrence = ({ create }) => (\r\n  <AutoForm endpoint=\"/attendance/occurrences/\" customFetcher={create} />\r\n)\r\n\r\nexport default AddOccurrence\r\n","import React, { useState, useEffect } from 'react'\r\nimport useSWR from 'swr'\r\n\r\nimport AttendantPanel from './attendantPanel'\r\nimport DoorkeeperPanel from '../checkin/doorkeeperPanel'\r\nimport { GridContainer, GridItem } from '../ui/grid'\r\nimport BigPixels from '../layout/bigPixels'\r\nimport TitleChooser from '../ui/titleChooser'\r\nimport AddOccurrence from './addOccurrence'\r\nimport useModal, { useCloseModal } from '../modal/useModal'\r\nimport { post } from '../request'\r\n\r\nconst AttendancePage = ({ pageContext: { title } }) => {\r\n  const [currentOccurrence, setCurrentOccurrence] = useState(null)\r\n  const { data: unorderedOccurrences, mutate } = useSWR(\r\n    '/attendance/occurrences/'\r\n  )\r\n  const [openCreateModal] = useModal(AddOccurrence)\r\n  const closeModal = useCloseModal()\r\n\r\n  const create = async data => {\r\n    const { data: newOccurrence } = await post('/attendance/occurrences/', data)\r\n    mutate([...unorderedOccurrences, newOccurrence])\r\n  }\r\n\r\n  const occurrences = unorderedOccurrences\r\n    ? [...unorderedOccurrences].reverse()\r\n    : null\r\n\r\n  // sync currentOccurrence with updated occurrences\r\n  useEffect(\r\n    () => {\r\n      if (currentOccurrence)\r\n        setCurrentOccurrence(\r\n          unorderedOccurrences.find(m => m.id === currentOccurrence.id)\r\n        )\r\n    },\r\n    [unorderedOccurrences]\r\n  )\r\n\r\n  return (\r\n    <BigPixels>\r\n      <GridContainer>\r\n        <GridItem fullWidth>\r\n          <TitleChooser\r\n            title={title}\r\n            choice={currentOccurrence}\r\n            setChoice={setCurrentOccurrence}\r\n            choices={occurrences}\r\n            label=\"name\"\r\n            action={() => {\r\n              openCreateModal('Ny händelse', {\r\n                create: async data => {\r\n                  await create(data)\r\n                  closeModal()\r\n                },\r\n              })\r\n            }}\r\n            actionLabel=\"Ny händelse\"\r\n            noChoicesLabel=\"Det finns inga händelser just nu.\"\r\n          />\r\n        </GridItem>\r\n        {currentOccurrence && (\r\n          <>\r\n            <GridItem>\r\n              <AttendantPanel currentOccurrence={currentOccurrence} />\r\n            </GridItem>\r\n            <GridItem>\r\n              <DoorkeeperPanel event={currentOccurrence} />\r\n            </GridItem>\r\n          </>\r\n        )}\r\n      </GridContainer>\r\n    </BigPixels>\r\n  )\r\n}\r\n\r\nexport default AttendancePage\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"form-module--label--1D42h\",\"inputWrapper\":\"form-module--inputWrapper--1aGr5\",\"required\":\"form-module--required--1fgVY\"};","import React, { useState, useEffect } from 'react'\r\nimport DateTimePicker from './dateTimePicker'\r\n\r\nimport style from '../../scss/form.module.scss'\r\n\r\nconst AutoInput = ({\r\n  value,\r\n  onChange,\r\n  type,\r\n  label,\r\n  required,\r\n  min_value,\r\n  max_value,\r\n  min_length,\r\n  max_length,\r\n}) => {\r\n  const change = e => {\r\n    onChange(e.target.value)\r\n  }\r\n\r\n  const map = {\r\n    datetime: <DateTimePicker value={value} onChange={onChange} />,\r\n    date: <input type=\"date\" value={value} onChange={change} />,\r\n    boolean: (\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={value}\r\n        onChange={e => {\r\n          onChange(e.target.checked)\r\n        }}\r\n      />\r\n    ),\r\n    integer: (\r\n      <input\r\n        type=\"number\"\r\n        value={value}\r\n        onChange={change}\r\n        max={max_value}\r\n        min={min_value}\r\n      />\r\n    ),\r\n  }\r\n\r\n  const component = Object.prototype.hasOwnProperty.call(map, type) ? (\r\n    map[type]\r\n  ) : (\r\n    <input\r\n      value={value}\r\n      onChange={change}\r\n      maxLength={max_length}\r\n      minLength={min_length}\r\n    />\r\n  )\r\n\r\n  return (\r\n    <label className={style.label}>\r\n      {`${label}`}\r\n      {required && <span className={style.required}>*</span>}\r\n      <div className={style.inputWrapper}>{component}</div>\r\n    </label>\r\n  )\r\n}\r\nexport default AutoInput\r\n","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport request, { options } from '../request'\r\nimport AutoInput from './input'\r\nimport { Button } from '../ui/buttons'\r\n\r\nconst AutoForm = ({ endpoint, method, customFetcher, onSubmit, defaults }) => {\r\n  const [fields, setFields] = useState()\r\n  const [values, setValues] = useState(defaults)\r\n  const [errors, setErrors] = useState({})\r\n\r\n  const setValue = (field, value) => {\r\n    setValues(old => ({ ...old, [field]: value }))\r\n  }\r\n\r\n  const setError = (field, error) => {\r\n    setErrors(old => ({ ...old, [field]: error }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    // request endpoint info from server\r\n    options(endpoint)\r\n      .then(res => {\r\n        const raw = res.data.actions.POST\r\n\r\n        // object to array\r\n        const arrayified = Object.keys(raw).map(key => ({\r\n          key,\r\n          ...raw[key],\r\n        }))\r\n        const editable = arrayified.filter(f => !f.read_only)\r\n\r\n        setFields(editable)\r\n      })\r\n      .catch(err => {})\r\n  }, endpoint)\r\n\r\n  return (\r\n    <form\r\n      onSubmit={e => {\r\n        e.preventDefault()\r\n        onSubmit()\r\n        if (customFetcher) {\r\n          customFetcher(values).catch(err => {\r\n            if (err.response) {\r\n              setErrors(err.response.data)\r\n            }\r\n          })\r\n        } else {\r\n          request({ endpoint, method, data: values })\r\n        }\r\n      }}\r\n    >\r\n      {fields &&\r\n        fields.map(field => (\r\n          <React.Fragment key={field.key}>\r\n            <AutoInput\r\n              {...field}\r\n              onChange={newValue => {\r\n                setValue(field.key, newValue)\r\n              }}\r\n              value={values[field.key]}\r\n            />\r\n            {Object.prototype.hasOwnProperty.call(errors, field.key) && (\r\n              <div>{errors[field.key].join(', ')}</div>\r\n            )}\r\n          </React.Fragment>\r\n        ))}\r\n      <Button type=\"submit\" onClick={() => {}}>\r\n        Submit\r\n      </Button>\r\n    </form>\r\n  )\r\n}\r\n\r\nAutoForm.defaultProps = {\r\n  method: 'POST',\r\n  customFetcher: null,\r\n  onSubmit: () => {},\r\n  defaults: {},\r\n}\r\n\r\nAutoForm.propTypes = {\r\n  method: PropTypes.string,\r\n  endpoint: PropTypes.string.isRequired,\r\n  customFetcher: PropTypes.func,\r\n  onSubmit: PropTypes.func,\r\n  defaults: PropTypes.object,\r\n}\r\n\r\nexport default AutoForm\r\n"],"sourceRoot":""}