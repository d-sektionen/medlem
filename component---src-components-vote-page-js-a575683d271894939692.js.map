{"version":3,"file":"component---src-components-vote-page-js-a575683d271894939692.js","mappings":"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","sources":["webpack://medlem/./src/components/ui/list.js","webpack://medlem/./src/components/ui/titleChooser.js","webpack://medlem/./src/components/vote/speakerPanel.js","webpack://medlem/./src/components/vote/meetingInfoPanel.js","webpack://medlem/./src/components/vote/voteForm.js","webpack://medlem/./src/components/vote/votePanel.js","webpack://medlem/./src/components/vote/page.js"],"sourcesContent":["import React from 'react'\r\n\r\nimport {listItemColor, listText, listButtons, list, listButton} from '../../scss/ui.module.scss'\r\n\r\nconst List = ({ children }) => <ul className={list}>{children}</ul>\r\n\r\nconst ListItem = ({ title, subtitle, buttons, color }) => (\r\n  <li\r\n    className={color ? listItemColor : ''}\r\n    style={{ borderColor: color }}\r\n  >\r\n    <div className={listText}>\r\n      <h3>{title}</h3>\r\n      <p>{subtitle}</p>\r\n    </div>\r\n    <div className={listButtons}>{buttons}</div>\r\n  </li>\r\n)\r\n\r\nListItem.defaultProps = {\r\n  color: null,\r\n}\r\n\r\nconst ListButton = ({ href, onClick, iconComponent: Icon, text, shown }) =>\r\n  shown ? (\r\n    <>\r\n      {href ? (\r\n        <a\r\n          className={listButton}\r\n          href={href}\r\n          onClick={onClick}\r\n          title={text}\r\n        >\r\n          <Icon />\r\n        </a>\r\n      ) : (\r\n        <button\r\n          className={listButton}\r\n          type=\"button\"\r\n          onClick={onClick}\r\n          title={text}\r\n        >\r\n          <Icon />\r\n        </button>\r\n      )}\r\n    </>\r\n  ) : (\r\n    <></>\r\n  )\r\n\r\nListButton.defaultProps = {\r\n  shown: true,\r\n}\r\n\r\nexport { List, ListItem, ListButton }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {actions, titleChooser, selectContainer, hint} from '../../scss/ui.module.scss'\r\nimport { Button } from './buttons'\r\n\r\nconst TitleChooser = ({\r\n  title,\r\n  choices,\r\n  categorizedChoices,\r\n  choice,\r\n  setChoice,\r\n  label,\r\n  action,\r\n  actionLabel,\r\n  noChoicesLabel,\r\n  onChange,\r\n}) => {\r\n  const allChoices = [\r\n    ...(choices || []),\r\n    // merge all categorized choices to single array.\r\n    ...Object.keys(categorizedChoices).reduce(\r\n      (accumulator, category) => [\r\n        ...accumulator,\r\n        ...categorizedChoices[category],\r\n      ],\r\n      []\r\n    ),\r\n  ]\r\n  return (\r\n    <div className={titleChooser}>\r\n      <h1>{title}</h1>\r\n      <div className={actions}>\r\n        {allChoices.length ? (\r\n          <div className={selectContainer}>\r\n            <select\r\n              onChange={e => {\r\n                const selectedValue = e.target.value\r\n                const c =\r\n                  selectedValue === ''\r\n                    ? null\r\n                    : allChoices.filter(i => `${i.id}` === selectedValue)[0]\r\n                setChoice(c)\r\n                onChange(e)\r\n              }}\r\n              value={choice ? choice.id : ''}\r\n            >\r\n              <option hidden value=\"\" />\r\n              {choices.sort().map(c => (\r\n                <option value={c.id} key={c.id}>\r\n                  {c[label]}\r\n                </option>\r\n              ))}\r\n              {Object.keys(categorizedChoices)\r\n                .sort()\r\n                .map(key => (\r\n                  <optgroup label={key} key={key}>\r\n                    {categorizedChoices[key].sort().map(c => (\r\n                      <option value={c.id} key={c.id}>\r\n                        {c[label]}\r\n                      </option>\r\n                    ))}\r\n                  </optgroup>\r\n                ))}\r\n            </select>\r\n            {choice === null && (\r\n              <div className={hint}>VÃ¤lj ett objekt</div>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <span>{noChoicesLabel}</span>\r\n        )}\r\n\r\n        {action && <Button onClick={action}>{actionLabel}</Button>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nTitleChooser.defaultProps = {\r\n  categorizedChoices: {},\r\n  choices: [],\r\n  action: null,\r\n  actionLabel: '',\r\n  choice: null,\r\n  noChoicesLabel: '',\r\n  setChoice: () => {},\r\n  label: '',\r\n  onChange: () => {},\r\n}\r\n\r\nTitleChooser.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  choices: PropTypes.array,\r\n  categorizedChoices: PropTypes.object,\r\n  choice: PropTypes.object,\r\n  setChoice: PropTypes.func,\r\n  label: PropTypes.string,\r\n  action: PropTypes.func,\r\n  actionLabel: PropTypes.string,\r\n  noChoicesLabel: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n}\r\n\r\nexport default TitleChooser\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport useSWR from 'swr'\r\n\r\nimport { FiTrash2 } from 'react-icons/fi'\r\nimport { List, ListButton, ListItem } from '../ui/list'\r\nimport { Button, ButtonGroup } from '../ui/buttons'\r\nimport { UserContext } from '../layout/layout'\r\nimport { post, del } from '../request'\r\n\r\nconst SpeakerPanel = ({ meeting }) => {\r\n  const { data: speakers, mutate } = useSWR(\r\n    () => meeting && `/voting/speakers/?meeting_id=${meeting.id}`\r\n  )\r\n\r\n  const [user] = useContext(UserContext)\r\n\r\n  const errorMessage = meeting.attending\r\n    ? 'Talarlista Ã¤r inaktiverad fÃ¶r mÃ¶tet.'\r\n    : 'Du mÃ¥ste vara registrerad pÃ¥ mÃ¶tet fÃ¶r att kunna skriva upp dig pÃ¥ talarlistan.'\r\n\r\n  return (\r\n    <div>\r\n      <h2>Talarlista</h2>\r\n      {meeting.attending && meeting.enable_speaker_requests ? (\r\n        <ButtonGroup>\r\n          <Button\r\n            onClick={async () => {\r\n              const { data: newSpeaker } = await post('/voting/speakers/', {\r\n                meeting_id: meeting.id,\r\n              })\r\n              mutate([...speakers, newSpeaker])\r\n            }}\r\n          >\r\n            Jag vill tala!\r\n          </Button>\r\n          <Button\r\n            onClick={async () => {\r\n              const { data: newSpeaker } = await post('/voting/speakers/', {\r\n                meeting_id: meeting.id,\r\n                prioritized: true,\r\n              })\r\n              mutate([...speakers, newSpeaker])\r\n            }}\r\n          >\r\n            Replik!\r\n          </Button>\r\n        </ButtonGroup>\r\n      ) : (\r\n        <p>{errorMessage}</p>\r\n      )}\r\n      <List>\r\n        {speakers &&\r\n          speakers.map(s => (\r\n            <ListItem\r\n              title={s.user.pretty_name}\r\n              subtitle={s.prioritized ? 'Replik' : null}\r\n              key={s.id}\r\n              buttons={[\r\n                <ListButton\r\n                  shown={user.id === s.user.id}\r\n                  onClick={async () => {\r\n                    const prioQS = s.prioritized ? '&prioritized' : ''\r\n                    await del(\r\n                      `/voting/speakers/?meeting_id=${meeting.id}${prioQS}`\r\n                    )\r\n                    mutate(speakers.filter(x => x.id !== s.id))\r\n                  }}\r\n                  iconComponent={FiTrash2}\r\n                  text=\"LÃ¤mna talarlista\"\r\n                  key=\"remove\"\r\n                />,\r\n              ]}\r\n            />\r\n          ))}\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SpeakerPanel\r\n","import React from 'react'\r\nimport { Button } from '../ui/buttons'\r\nimport { post, del } from '../request'\r\n\r\nconst MeetingInfoPanel = ({ currentMeeting, revalidate }) => (\r\n  <div>\r\n    <h2>MÃ¶tesinfo</h2>\r\n    <h3>{currentMeeting.name}</h3>\r\n    <p>\r\n      <strong>\r\n        {currentMeeting.attending\r\n          ? 'Du deltar pÃ¥ mÃ¶tet.'\r\n          : 'Du Ã¤r inte registrerad pÃ¥ mÃ¶tet.'}\r\n      </strong>\r\n    </p>\r\n    {currentMeeting.description && (\r\n      <p style={{ whiteSpace: 'pre-line' }}>{currentMeeting.description}</p>\r\n    )}\r\n    {currentMeeting.open_attendance && (\r\n      <p>\r\n        {currentMeeting.attending ? (\r\n          <Button\r\n            onClick={async () => {\r\n              await del(`/voting/attend/?meeting_id=${currentMeeting.id}`)\r\n              revalidate()\r\n            }}\r\n          >\r\n            LÃ¤mna rÃ¶stlÃ¤ngden\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            onClick={async () => {\r\n              await post('/voting/attend/', { meeting_id: currentMeeting.id })\r\n              revalidate()\r\n            }}\r\n          >\r\n            GÃ¥ med i rÃ¶stlÃ¤ngden\r\n          </Button>\r\n        )}\r\n      </p>\r\n    )}\r\n  </div>\r\n)\r\n\r\nexport default MeetingInfoPanel\r\n","import React, { Component, useState } from 'react'\r\nimport { post } from '../request'\r\n\r\nconst VoteForm = ({ vote }) => {\r\n  const [checkedId, setCheckedId] = useState(-1)\r\n  const [successfullyVoted, setSuccessfullyVoted] = useState(false)\r\n\r\n  const placeVote = async () => {\r\n    const voteData = {\r\n      vote_id: vote.id,\r\n      alternative_id: checkedId,\r\n    }\r\n\r\n    await post('/voting/made_votes/', voteData)\r\n    setSuccessfullyVoted(true)\r\n  }\r\n  const votingDisabled = checkedId === -1\r\n  const buttonText = votingDisabled ? 'VÃ¤lj ett alternativ' : 'RÃ¶sta'\r\n  const alreadyVotedText = successfullyVoted\r\n    ? 'Tack fÃ¶r din rÃ¶st!'\r\n    : 'Du har rÃ¶stat i omrÃ¶stningen.'\r\n\r\n  return (\r\n    <div>\r\n      <strong>{vote.question}</strong>\r\n      {vote.has_voted || successfullyVoted ? (\r\n        <p>{alreadyVotedText}</p>\r\n      ) : (\r\n        <>\r\n          <ul>\r\n            {vote.alternatives.map(({ text, id }) => (\r\n              <li key={id}>\r\n                <label>\r\n                  <input\r\n                    type=\"radio\"\r\n                    checked={checkedId === id}\r\n                    onChange={() => setCheckedId(id)}\r\n                  />\r\n                  {` ${text}`}\r\n                </label>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <button type=\"button\" disabled={votingDisabled} onClick={placeVote}>\r\n            {buttonText}\r\n          </button>\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VoteForm\r\n","import React from 'react'\r\nimport useSWR from 'swr'\r\nimport VoteForm from './voteForm'\r\n\r\nconst VotePanel = ({ meeting }) => {\r\n  const { data: votes } = useSWR(\r\n    () => `/voting/votes/?meeting_id=${meeting.id}`\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <h2>RÃ¶sta</h2>\r\n      {votes && (\r\n        <>\r\n          {votes.length === 0 && <p>Det finns ingen aktiv omrÃ¶stning</p>}\r\n          {votes.map(vote => (\r\n            <VoteForm key={vote.id} vote={vote} />\r\n          ))}\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VotePanel\r\n","import React, { useContext, useState, useEffect } from 'react'\r\nimport useSWR from 'swr'\r\n\r\nimport BigPixels from '../layout/bigPixels'\r\nimport { GridContainer, GridItem } from '../ui/grid'\r\nimport TitleChooser from '../ui/titleChooser'\r\nimport SpeakerPanel from './speakerPanel'\r\nimport MeetingInfoPanel from './meetingInfoPanel'\r\nimport VotePanel from './votePanel'\r\n\r\nconst VotePage = ({ pageContext: { title } }) => {\r\n  const [currentMeeting, setCurrentMeeting] = useState(null)\r\n  const { data: meetings, revalidate } = useSWR('/voting/meetings/')\r\n\r\n  // sync currentMeeting with updated meetings\r\n  useEffect(\r\n    () => {\r\n      if (currentMeeting)\r\n        setCurrentMeeting(meetings.find(m => m.id === currentMeeting.id))\r\n    },\r\n    [meetings]\r\n  )\r\n\r\n  return (\r\n    <BigPixels>\r\n      <GridContainer>\r\n        <GridItem fullWidth>\r\n          <TitleChooser\r\n            title={title}\r\n            choice={currentMeeting}\r\n            setChoice={setCurrentMeeting}\r\n            choices={meetings}\r\n            label=\"name\"\r\n            noChoicesLabel=\"Det finns inga mÃ¶ten just nu.\"\r\n          />\r\n        </GridItem>\r\n        {currentMeeting && (\r\n          <>\r\n            <GridItem>\r\n              <MeetingInfoPanel\r\n                currentMeeting={currentMeeting}\r\n                revalidate={revalidate}\r\n              />\r\n            </GridItem>\r\n            <GridItem>\r\n              <VotePanel meeting={currentMeeting} />\r\n            </GridItem>\r\n            {/* {currentMeeting.enable_speaker_requests && ( */}\r\n            <GridItem>\r\n              <SpeakerPanel meeting={currentMeeting} />\r\n            </GridItem>\r\n            {/* )} */}\r\n          </>\r\n        )}\r\n      </GridContainer>\r\n    </BigPixels>\r\n  )\r\n}\r\nexport default VotePage\r\n"],"names":["List","_ref","children","React","className","list","ListItem","_ref2","title","subtitle","buttons","color","listItemColor","style","borderColor","listText","listButtons","defaultProps","ListButton","_ref3","href","onClick","iconComponent","Icon","text","shown","listButton","type","TitleChooser","choices","categorizedChoices","choice","setChoice","label","action","actionLabel","noChoicesLabel","onChange","allChoices","concat","_toConsumableArray","Object","keys","reduce","accumulator","category","titleChooser","actions","length","selectContainer","e","selectedValue","target","value","c","filter","i","id","hidden","sort","map","key","hint","Button","meeting","data","speakers","mutate","useSWR","user","useContext","UserContext","errorMessage","attending","enable_speaker_requests","ButtonGroup","async","newSpeaker","post","meeting_id","prioritized","s","pretty_name","prioQS","del","x","FiTrash2","currentMeeting","revalidate","name","description","whiteSpace","open_attendance","vote","checkedId","setCheckedId","useState","successfullyVoted","setSuccessfullyVoted","votingDisabled","buttonText","alreadyVotedText","question","has_voted","alternatives","checked","disabled","voteData","vote_id","alternative_id","votes","VoteForm","pageContext","setCurrentMeeting","meetings","useEffect","find","m","BigPixels","GridContainer","GridItem","fullWidth","MeetingInfoPanel","VotePanel","SpeakerPanel"],"sourceRoot":""}